<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git学习笔记</title>
    <url>/2020/06/01/git/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>git init</li>
<li>git add</li>
<li>git commit</li>
<li>git diff</li>
<li>git checkout</li>
<li>git status</li>
<li>git log</li>
<li>git reset</li>
<li>git reflog</li>
</ul>
<p><code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>
<p>还记得如何丢弃工作区的修改吗？<code>git checkout -- readme.txt</code><br><code>git rm test.txt</code></p>
<p><code>git remote add origin https://gitee.com/ztumj/test3.git</code><br><code>git push -u origin master</code></p>
<p>首先，我们创建dev分支，然后切换到dev分支：<br><code>$ git checkout -b dev</code><br><em>switched to a new branch ‘dev’</em><br><code>git checkout</code>命令加上-b参数表示创建并切换，相当于以下两条命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br></pre></td></tr></table></figure>
<p><em>Switched to branch ‘dev’</em><br>然后，用git branch命令查看当前分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure>


<p>Git鼓励大量使用分支：</p>
<p>查看分支：<code>git branch</code></p>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
<p>切换分支：<code>git checkout &lt;name&gt;</code></p>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
<p><code>git log --graph --pretty=oneline --abbrev-commit</code></p>
<p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。<br><code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p>
<p>并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？<br>幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p>
<p><code>$ git stash</code><br>太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！</p>
<p><code>$ git checkout dev</code><br><em>Switched to branch ‘dev’</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<p>工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure>
<p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p>
<p>一是用<code>git stash apply</code>恢复，但是恢复后，<code>stash</code>内容并不删除，你需要用<code>git stash drop</code>来删除；</p>
<p>另一种方式是用<code>git stash pop</code>，恢复的同时把<code>stash</code>内容也删了：</p>
<p><code>$ git stash pop</code></p>
<p>在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。</p>
<p>那怎么在dev分支上修复同样的bug？重复操作一次，提交不就行了？</p>
<p>有木有更简单的方法？</p>
<p>有！</p>
<p>同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。</p>
<p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git cherry-pick 4c805e2</span><br><span class="line">[master 1d4b803] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> $ git branch -d feature-vulcan</span><br><span class="line">error: The branch &#39;feature-vulcan&#39; is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run &#39;git branch -D feature-vulcan&#39;.</span><br></pre></td></tr></table></figure>
<p>销毁失败。Git友情提醒，<code>feature-vulcan</code>分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数。。</p>
<p>现在我们强行删除：</p>
<p><code>$ git branch -D feature-vulcan</code></p>
<p>查看远程库信息，使用<code>git remote -v；</code></p>
<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>
<p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p>
<p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>
<p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name；</code></p>
<p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>
<p><code>rebase</code>操作可以把本地未<code>push</code>的分叉提交历史整理成直线；</p>
<p><code>rebase</code>的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p>
<p>然后，敲命令<code>git tag &lt;name&gt;</code>就可以打一个新标签：</p>
<p><code>$ git tag v1.0</code><br>可以用命令git tag查看所有标签：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure>


<p>如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？</p>
<p>方法是找到历史提交的<code>commit id</code>，然后打上就可以了：<br>比方说要对<code>add merge</code>这次提交打标签，它对应的<code>commit id</code>是<code>f52c633</code>，敲入命令：</p>
<p><code>$ git tag v0.9 f52c633</code></p>
<p>可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git show v0.9</span><br><span class="line">commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add merge</span><br><span class="line"></span><br><span class="line">diff --git a&#x2F;readme.txt b&#x2F;readme.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb</span><br></pre></td></tr></table></figure>

<p>如果标签打错了，也可以删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -d v0.1</span><br><span class="line">Deleted tag &#39;v0.1&#39; (was f15b0dd)</span><br></pre></td></tr></table></figure>
<p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p>
<p>如果要推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin v1.0</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao&#x2F;learngit.git</span><br><span class="line"> * [new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></table></figure>
<p>或者，一次性推送全部尚未推送到远程的本地标签：</p>
<p>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</p>
<p>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</p>
<p>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</p>
<p>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</p>
<p>有的小伙伴又要问了，一个本地库能不能既关联GitHub，又关联码云呢？</p>
<p>答案是肯定的，因为git本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。</p>
<p>使用多个远程库时，我们要注意，git给远程库起的默认名称是<code>origin</code>，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。</p>
<p>仍然以<code>learngit</code>本地库为例，我们先删除已关联的名为<code>origin</code>的远程库：</p>
<p><code>git remote rm origin</code><br>然后，先关联GitHub的远程库：</p>
<p><code>git remote add github git@github.com:michaelliao/learngit.git</code><br>注意，远程库的名称叫<code>github</code>，不叫<code>origin</code>了。</p>
<p>接着，再关联码云的远程库：</p>
<p>git remote add gitee <a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#105;&#x74;&#101;&#x65;&#46;&#99;&#x6f;&#109;">&#x67;&#105;&#116;&#x40;&#103;&#105;&#x74;&#101;&#x65;&#46;&#99;&#x6f;&#109;</a>:liaoxuefeng/learngit.git<br>同样注意，远程库的名称叫gitee，不叫origin。</p>
<p>现在，我们用<code>git remote -v</code>查看远程库信息，可以看到两个远程库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">gitee	git@gitee.com:liaoxuefeng&#x2F;learngit.git (fetch)</span><br><span class="line">gitee	git@gitee.com:liaoxuefeng&#x2F;learngit.git (push)</span><br><span class="line">github	git@github.com:michaelliao&#x2F;learngit.git (fetch)</span><br><span class="line">github	git@github.com:michaelliao&#x2F;learngit.git (push)</span><br></pre></td></tr></table></figure>
<p>如果要推送到GitHub，使用命令：</p>
<p><code>git push github master</code><br>如果要推送到码云，使用命令：</p>
<p><code>git push gitee master</code><br>这样一来，我们的本地库就可以同时与多个远程库互相同步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌─────────┐ ┌─────────┐</span><br><span class="line">│ GitHub  │ │  Gitee  │</span><br><span class="line">└─────────┘ └─────────┘</span><br><span class="line">     ▲           ▲</span><br><span class="line">     └─────┬─────┘</span><br><span class="line">           │</span><br><span class="line">    ┌─────────────┐</span><br><span class="line">    │ Local Repo  │</span><br><span class="line">    └─────────────┘</span><br><span class="line">	</span><br></pre></td></tr></table></figure>


<p>有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被<code>.gitignore</code>忽略了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add App.class</span><br><span class="line">The following paths are ignored by one of your .gitignore files:</span><br><span class="line">App.class</span><br><span class="line">Use -f if you really want to add them.</span><br></pre></td></tr></table></figure>
<p>如果你确实想添加该文件，可以用<code>-f</code>强制添加到Git：</p>
<p><code>$ git add -f App.class</code><br>或者你发现，可能是<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git check-ignore -v App.class</span><br><span class="line">.gitignore:3:*.class	App.class</span><br></pre></td></tr></table></figure>
<p>Git会告诉我们，<code>.gitignore</code>的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p>
<p>当然还有别的命令可以简写，很多人都用<code>co</code>表示<code>checkout</code>，<code>ci</code>表示<code>commit</code>，<code>br</code>表示<code>branch</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.br branch</span><br></pre></td></tr></table></figure>
<p>以后提交就可以简写成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git ci -m &quot;bala bala bala...&quot;</span><br></pre></td></tr></table></figure>
<p><code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</p>
<p>在撤销修改一节中，我们知道，命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（<code>unstage</code>），重新放回工作区。既然是一个<code>unstage</code>操作，就可以配置一个<code>unstage</code>别名：<br><code>$ git config --global alias.unstage &#39;reset HEAD&#39;</code><br>当你敲入命令：</p>
<p><code>$ git unstage test.py</code><br>实际上Git执行的是：</p>
<p><code>$ git reset HEAD test.py</code></p>
<p>甚至还有人丧心病狂地把lg配置成了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global alias.lg &quot;log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure>

<p>学习自<br><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a><br><a href="https://www.yiibai.com/git">易百教程/Git教程</a><br><a href="http://www.git-scm.com.cn/1522.html">Git中文网-GitLab中文网</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>彻底搞定乱码-乱码产生的原因-1.md</title>
    <url>/2020/06/03/java-web/%E5%BD%BB%E5%BA%95%E6%90%9E%E5%AE%9A%E4%B9%B1%E7%A0%81-%E4%B9%B1%E7%A0%81%E4%BA%A7%E7%94%9F%E7%9A%84%E5%8E%9F%E5%9B%A0-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-什么是乱码？"><a href="#1-什么是乱码？" class="headerlink" title="1.什么是乱码？"></a>1.什么是乱码？</h1><blockquote>
<p>指的是由于本地计算机在用文本编辑器打开源文件时，使用了不相应字符集而造成部分或所有字符无法被阅读的一系列字符。</p>
</blockquote>
<h1 id="2-乱码产生的原因？"><a href="#2-乱码产生的原因？" class="headerlink" title="2.乱码产生的原因？"></a>2.乱码产生的原因？</h1><p>编码与解码方式不统一(编码方式有很多种)<br>文件在保存时是有编码格式的，只有当保存时使用的编码格式与读取时使用的编码格式相同时才能正确读取文件；例如UTF-8编码、GBK编码都可以读取中文，那么如果采用UTF-8编码保存文件，但是采用GBK编码读取文件就会造成乱码，因此UTF-8编码保存的文件应该使用UTF-8编码读取；</p>
<h1 id="3-编码方式介绍"><a href="#3-编码方式介绍" class="headerlink" title="3. 编码方式介绍"></a>3. 编码方式介绍</h1><p>说到编码方式，就不能不说，计算机的存储单位以及进制（现有的系统基本是基于二进制的，只能识别1和0。现在我们看到的网页、视频、图片、文字…..都是构建在其上的。）</p>
<p><strong>存储单位</strong><br>1 Byte （字节）= 8 Bits（位，信息量的最小单位）<br>1 KB = 1024 Bytes<br>1 MB = 1024 KB<br>1 GB = 1024 MB<br><a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D/3943356?fr=aladdin">存储单位</a></p>
<p><strong>进制</strong><br>二进制<br>八进制<br>十进制<br>十六进制<br><a href="https://baike.baidu.com/item/%E8%BF%9B%E5%88%B6/317457?fr=aladdin">进制</a></p>
<p><strong>字符编码介绍</strong></p>
<ul>
<li>ASCII：在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。ASCII码一共规定了128个字符的编码，比如空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。<br><code>ASCII码</code><br><img src="https://upload-images.jianshu.io/upload_images/19382524-948452ca9fc59282.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ASCII码.jpg"></li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-ef99877c30a7e1e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ASCII特殊字符解释.jpg"></p>
<ul>
<li><p>ISO-8859-1：又称Latin-1，计算机一开始只在美国使用，ASCII可以表示他们的符号，但是后来欧洲一些国家也开始使用计算机，很多国家使用的不是英文，ASCII的256个位置不够了，为了表示这些字符，就重新进行了编码，ISO-8859-1是单字节编码，向下兼容ASCII，其编码范围是0x00-0xFF，0x00-0x7F之间完全和ASCII一致，0x80-0x9F之间是控制字符，0xA0-0xFF之间是文字符号。此字符集主要支持欧洲使用的语言。</p>
</li>
<li><p>GB2312：后来计算机普及了，于是就中国要使用计算机了 但是机器不认得中文，于是就有了国际码, GB，是“国标”二字的汉语拼音首字母，1980年制定，由于“历史局限性”，此字符集内收录的字符很少，汉字总共收录了 6763 个，而且全部都是大陆通用的简体汉字。</p>
</li>
<li><p>BIG5：在GB2312肆虐横行的同时，我们的港澳台同胞，也制定了一个适用于当地繁体汉字需要的字符集，其对应编码名为 BIG5，也有人称之为大五码。</p>
</li>
<li><p>GBK：后来发现一些人名、文言文汉字、少数民族语言都需要支持，GB2312满足不了，就做了扩展，叫GBK标准,基本上采用了原来GB2312-80所有的汉字及码位，并涵盖了原Unicode中所有的汉字20902，总共收录了883个符号，21003个汉字及提供了1894个造字码位。</p>
</li>
<li><p>UNICODE：随着计算机的普及，编码也众多，需要统一，一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “UNICODE”。</p>
<ul>
<li><p>UTF-8: 互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种unicode的实现方式。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一, 其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。<br>UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。<br>UTF-8的编码规则很简单，只有二条：</p>
<ul>
<li><p>a）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p>
</li>
<li><p>b）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>ANSI: 不同的国家和地区制定了不同的标准，由此产生了 GB2312、GBK、GB18030、Big5、Shift_JIS 等各自的编码标准。这些使用多个字节来代表一个字符的各种汉字延伸编码方式，称为 ANSI 编码。在简体中文Windows操作系统中，ANSI 编码代表 GBK 编码；在繁体中文Windows操作系统中，ANSI编码代表Big5；在日文Windows操作系统中，ANSI 编码代表 Shift_JIS 编码。</p>
</li>
</ul>
<p><code>编码对比</code><br><img src="https://upload-images.jianshu.io/upload_images/19382524-e297f70d2e088dfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编码对比.png"></p>
<p><strong>发展</strong><br>ASCII（1字节）——&gt;ISO8859-1（1字节）——&gt;GB2312（2字节）——&gt;GBK（2字节）——&gt;unicode(utf-8(变长度编码),utf-16,utf-32)</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-6ce16085bb72df94.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编码方式.jpg"></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>彻底搞定乱码-常见的乱码-2</title>
    <url>/2020/06/03/java-web/%E5%BD%BB%E5%BA%95%E6%90%9E%E5%AE%9A%E4%B9%B1%E7%A0%81-%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B9%B1%E7%A0%81-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-乱码分类"><a href="#1-乱码分类" class="headerlink" title="1.乱码分类"></a>1.乱码分类</h1><ul>
<li>编辑器乱码（idea,eclipse,notepad）</li>
<li>数据在页面显示有乱码</li>
<li>数据到服务器后有乱码</li>
<li>从服务器返回的有乱码</li>
<li>使用Ajax收发时有乱码</li>
<li>数据库乱码</li>
<li>nginx乱码</li>
<li>tomcat乱码</li>
</ul>
<h1 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h1><p><strong>A 编辑器乱码（文件乱码），自己百度</strong><br><strong>B 数据在页面显示有乱码</strong><br>1).jsp编码<br> pageEncoding=”utf-8”告诉tomcat，你编译我jsp文件的时候使用他来编译，如果这句话没有，他默认使用charset=utf-8”这句话来编译，同时注意保存jsp的时候使用编码也应该与pageEncoding=”utf-8”保持一致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; pageEncoding&#x3D;&quot;utf-8&quot;%&gt;</span><br></pre></td></tr></table></figure>
<p> 2).html设置编码格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>还应该用utf-8格式编辑并保存</p>
<p>** C 数据到服务器后有乱码**</p>
<p>通常出现在表单提交数据给服务器,服务器获取时得到的是乱码,以Tomcat为例,出现这种情况是因为没有告诉服务器以什么编码去获取数据,假设页面是以utf-8的编码显示的数据,你填写时没有问题,看起来是没有问题,但是计算机只认识0和1,它在传输过程中是以二进制的样式进入到服务器的,这时你的服务器就不知道它之前是什么编码,如果你没有指定,它就会按照老外的喜好,以iso8859-1的编码去读取,结果就出乱码了.</p>
<p>这种情况的解决方式又要一分为二,为<code>POST</code>和<code>GET</code>方式,<code>POST</code>解决方案很简单,既然获取时有乱码,那么在获取之前,设置编码即可:<br><code>request.setCharacterEncoding(&quot;utf-8&quot;);</code><br>然后再使用传统方法获取:<br><code>String value = request.getParameter(&quot;value&quot;);</code><br>需要注意,这种设置只对<code>POST</code>提交有效,如果是<code>GET</code>则相对麻烦一点.因为乱码是在调用方法<code>getParameter()</code>时出现的,方法内部的编码肯定出现了问题,既然它不能自动使用<code>UTF-8</code>,那我们就手动来转:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(request.getMethod().equalsIgnoreCase(&quot;get&quot;))&#123;</span><br><span class="line">      value &#x3D; new String(value.getBytes(&quot;iso8859-1&quot;),&quot;utf-8&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于<code>POST</code>提交方式已经得到了解决,我们就只需要在提交方式为GET时进行处理.这样,就能保证服务器获取的数据肯定不是乱码</p>
<p><strong>D 从服务器返回的有乱码</strong><br>通常只需要设置<code>response</code>的编码:<br><code>response.setCharacterEncoding(&quot;utf-8&quot;);</code><br>然后再设置浏览器的编码为<code>UTF-8</code>或者通知浏览器以<code>UTF-8</code>的编码打开<br><code>response.setContentType(&quot;text/html;charset=utf-8&quot;);</code><br>这样就能保证浏览器收到的是<code>UTF-8</code>的数据,并且显示也没有问题.</p>
<p><strong>E 使用Ajax收发时有乱码</strong></p>
<p>**1).**Javascript函数：escape()</p>
<p> Javascript语言用于编码的函数，一共有三个，最古老的一个就escape()。<br>虽然这个函数现在已经不提倡使用了，但是由于历史原因，很多地方还在使用它，所以有必要先从它讲起。<br>实际上，escape()不能直接用于URL编码，它的真正作用是返回一个字符的Unicode编码值。比如“春节”的返回结果是%u6625%u8282，也就是说在Unicode字符集中，“春”是第6625个（十六进制）字符，“节”是第8282个（十六进制）字符。<br>它的具体规则是，除了ASCII字母、数字、标点符号“@ * _ + - . /”以外，对其他所有字符进行编码。在\u0000到\u00ff之间的符号被转成%xx的形式，其余符号被转成%uxxxx的形式。对应的解码函数是unescape()。<br>所以，“Hello World”的escape()编码就是“Hello%20World”。因为空格的Unicode值是20（十六进制）。<br>还有两个地方需要注意。<br>首先，无论网页的原始编码是什么，一旦被Javascript编码，就都变为unicode字符。也就是说，Javascipt函数的输入和输出，默认都是Unicode字符。这一点对下面两个函数也适用。<br>其次，escape()不对“+”编码。但是我们知道，网页在提交表单的时候，如果有空格，则会被转化为+字符。服务器处理数据的时候，会把+号处理成空格。所以，使用的时候要小心。<br>**2).**Javascript函数：encodeURI()</p>
<p>encodeURI()是Javascript中真正用来对URL编码的函数。<br>它着眼于对整个URL进行编码，因此除了常见的符号以外，对其他一些在网址中有特殊含义的符号“; / ? : @ &amp; = + $ , #”，也不进行编码。编码后，它输出符号的utf-8形式，并且在每个字节前加上%。<br>它对应的解码函数是decodeURI()。<br>需要注意的是，它不对单引号’编码。</p>
<p>**3).**Javascript函数：encodeURIComponent()</p>
<p>最后一个Javascript编码函数是encodeURIComponent()。与encodeURI()的区别是，它用于对URL的组成部分进行个别编码，而不用于对整个URL进行编码。因此，“; / ? : @ &amp; = + $ , #”，这些在encodeURI()中不被编码的符号，在encodeURIComponent()中统统会被编码。至于具体的编码方法，两者是一样。它对应的解码函数是decodeURIComponent()。</p>
<p><a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html">关于URL编码</a></p>
<p><strong>F 数据库(mysql)乱码</strong><br>在java项目中的mysql配置文件中加入：<br><code>?useUnicode=true&amp;characterEncoding=UTF-8</code></p>
<p><a href="https://blog.csdn.net/qq_42570879/article/details/82912466">解决中文乱码问题大全</a></p>
<p><strong>G nginx乱码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#需要修改nginx的server的配置内容，增加一行：charset utf-8;</span><br><span class="line">upstream you.domainName.com &#123;</span><br><span class="line">        server 127.0.0.1:8081;</span><br><span class="line"> &#125;</span><br><span class="line"> server &#123;</span><br><span class="line">      listen      80;</span><br><span class="line">      server_name  you.domainName.com;</span><br><span class="line">      charset utf-8;</span><br><span class="line">      location &#x2F;examples &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>H tomcat乱码</strong></p>
<p><em>tomcat/conf/sever.xml</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Connector executor&#x3D;&quot;tomcatThreadPool&quot; port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot; connectionTimeout&#x3D;&quot;20000&quot; redirectPort&#x3D;&quot;8443&quot; URIEncoding&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>在tomcat的bin目录下的catalina.bat加如下一条语句<br><code>set JAVA_OPTS=-Xms512m -Xmx1024m -XX:MaxPermSize=1024m -Dfile.encoding=UTF-8</code></p>
<p><a href="https://www.jianshu.com/p/4a09e464f440">Tomcat启动乱码</a><br><a href="https://blog.csdn.net/ws379374000/article/details/77100194">各种乱码问题及原理,很全面</a><br><a href="https://www.cnblogs.com/liushuncheng/p/6891307.html">java web 中有效解决中文乱码问题-pageEncoding与charset区别, response和request的setCharacterEncoding 区别</a></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/06/16/100%E4%B8%AA%E5%AE%9E%E7%94%A8%E7%9A%84%20Linux%20Shell%20%E8%84%9A%E6%9C%AC%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="100个实用的-Linux-Shell-脚本经典案例"><a href="#100个实用的-Linux-Shell-脚本经典案例" class="headerlink" title="100个实用的 Linux Shell 脚本经典案例"></a>100个实用的 Linux Shell 脚本经典案例</h1><p>1）编写hello world脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 编写hello world脚本  </span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World!&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>2）通过位置变量创建 Linux 系统账户及密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 通过位置变量创建 Linux 系统账户及密码  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#$1 是执行脚本的第一个参数,$2 是执行脚本的第二个参数  </span></span><br><span class="line">useradd    <span class="string">&quot;<span class="variable">$1</span>&quot;</span>   </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$2</span>&quot;</span>  |  passwd  ‐‐stdin  <span class="string">&quot;<span class="variable">$1</span>&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>3）备份日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line"><span class="comment"># 每周 5 使用 tar 命令备份/var/log 下的所有日志文件  </span></span><br><span class="line"><span class="comment"># vim  /root/logbak.sh  </span></span><br><span class="line"><span class="comment"># 编写备份脚本,备份后的文件名包含日期标签,防止后面的备份将前面的备份数据覆盖  </span></span><br><span class="line"><span class="comment"># 注意 date 命令需要使用反引号括起来,反引号在键盘&lt;tab&gt;键上面  </span></span><br><span class="line">tar  -czf  <span class="built_in">log</span>-`date +%Y%m%d`.tar.gz  /var/<span class="built_in">log</span>   </span><br><span class="line">  </span><br><span class="line"><span class="comment"># crontab ‐e  #编写计划任务,执行备份脚本  </span></span><br><span class="line">00  03  *  *  5  /root/logbak.sh  </span><br></pre></td></tr></table></figure>

<p>4）一键部署 LNMP(RPM 包版本)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line"><span class="comment"># 一键部署 LNMP(RPM 包版本)  </span></span><br><span class="line"><span class="comment"># 使用 yum 安装部署 LNMP,需要提前配置好 yum 源,否则该脚本会失败  </span></span><br><span class="line"><span class="comment"># 本脚本使用于 centos7.2 或 RHEL7.2  </span></span><br><span class="line">yum ‐y install httpd  </span><br><span class="line">yum ‐y install mariadb mariadb‐devel mariadb‐server  </span><br><span class="line">yum ‐y install php  php‐mysql  </span><br><span class="line">  </span><br><span class="line">systemctl start httpd mariadb  </span><br><span class="line">systemctl <span class="built_in">enable</span> httpd mariadb  </span><br></pre></td></tr></table></figure>

<p>5）监控内存和磁盘容量，小于给定值时报警</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 实时监控本机内存和硬盘剩余空间,剩余内存小于500M、根分区剩余空间小于1000M时,发送报警邮件给root管理员  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 提取根分区剩余空间  </span></span><br><span class="line">disk_size=$(df / | awk <span class="string">&#x27;/\//&#123;print $4&#125;&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 提取内存剩余空间  </span></span><br><span class="line">mem_size=$(free | awk <span class="string">&#x27;/Mem/&#123;print $4&#125;&#x27;</span>)  </span><br><span class="line"><span class="keyword">while</span> :  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line"><span class="comment"># 注意内存和磁盘提取的空间大小都是以 Kb 为单位  </span></span><br><span class="line"><span class="keyword">if</span>  [  <span class="variable">$disk_size</span> -le 512000 -a <span class="variable">$mem_size</span> -le 1024000  ]  </span><br><span class="line"><span class="keyword">then</span>  </span><br><span class="line">    mail  ‐s  <span class="string">&quot;Warning&quot;</span>  root  &lt;&lt;<span class="string">EOF  </span></span><br><span class="line"><span class="string">  Insufficient resources,资源不足  </span></span><br><span class="line"><span class="string">EOF</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>6）猜数字游戏</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 脚本生成一个 100 以内的随机数,提示用户猜数字,根据用户的输入,提示用户猜对了,  </span></span><br><span class="line"><span class="comment"># 猜小了或猜大了,直至用户猜对脚本结束。  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># RANDOM 为系统自带的系统变量,值为 0‐32767的随机数  </span></span><br><span class="line"><span class="comment"># 使用取余算法将随机数变为 1‐100 的随机数  </span></span><br><span class="line">num=$[RANDOM%100+1]  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$num</span>&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用 read 提示用户猜数字  </span></span><br><span class="line"><span class="comment"># 使用 if 判断用户猜数字的大小关系:‐eq(等于),‐ne(不等于),‐gt(大于),‐ge(大于等于),  </span></span><br><span class="line"><span class="comment"># ‐lt(小于),‐le(小于等于)  </span></span><br><span class="line"><span class="keyword">while</span>  :  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">&quot;计算机生成了一个 1‐100 的随机数,你猜: &quot;</span> cai  </span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$cai</span> -eq <span class="variable">$num</span> ]  </span><br><span class="line">    <span class="keyword">then</span>  </span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;恭喜,猜对了&quot;</span>  </span><br><span class="line">         <span class="built_in">exit</span>  </span><br><span class="line">      <span class="keyword">elif</span> [ <span class="variable">$cai</span> -gt <span class="variable">$num</span> ]  </span><br><span class="line">      <span class="keyword">then</span>  </span><br><span class="line">             <span class="built_in">echo</span> <span class="string">&quot;Oops,猜大了&quot;</span>  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">             <span class="built_in">echo</span> <span class="string">&quot;Oops,猜小了&quot;</span>  </span><br><span class="line">   <span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>7）检测本机当前用户是否为超级管理员,如果是管理员,则使用 yum 安装 vsftpd,如果不是,则提示您非管理员(使用字串对比版本)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 检测本机当前用户是否为超级管理员,如果是管理员,则使用 yum 安装 vsftpd,如果不  </span></span><br><span class="line"><span class="comment"># 是,则提示您非管理员(使用字串对比版本)   </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$USER</span> == <span class="string">&quot;root&quot;</span> ]  </span><br><span class="line"><span class="keyword">then</span>  </span><br><span class="line">  yum ‐y install vsftpd  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;您不是管理员,没有权限安装软件&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br></pre></td></tr></table></figure>

<p>8）检测本机当前用户是否为超级管理员,如果是管理员,则使用 yum 安装 vsftpd,如果不是,则提示您非管理员(使用 UID 数字对比版本)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 检测本机当前用户是否为超级管理员,如果是管理员,则使用 yum 安装 vsftpd,如果不  </span></span><br><span class="line"><span class="comment"># 是,则提示您非管理员(使用 UID 数字对比版本)  </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$UID</span> -eq 0 ];<span class="keyword">then</span>  </span><br><span class="line">    yum ‐y install vsftpd  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;您不是管理员,没有权限安装软件&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br></pre></td></tr></table></figure>

<p>9）编写脚本:提示用户输入用户名和密码,脚本自动创建相应的账户及配置密码。如果用户不输入账户名,则提示必须输入账户名并退出脚本;如果用户不输入密码,则统一使用默认的 123456 作为默认密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 编写脚本:提示用户输入用户名和密码,脚本自动创建相应的账户及配置密码。如果用户  </span></span><br><span class="line"><span class="comment"># 不输入账户名,则提示必须输入账户名并退出脚本;如果用户不输入密码,则统一使用默  </span></span><br><span class="line"><span class="comment"># 认的 123456 作为默认密码。  </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入用户名: &quot;</span> user  </span><br><span class="line"><span class="comment">#使用‐z 可以判断一个变量是否为空,如果为空,提示用户必须输入账户名,并退出脚本,退出码为 2  </span></span><br><span class="line"><span class="comment">#没有输入用户名脚本退出后,使用$?查看的返回码为 2  </span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$user</span> ];<span class="keyword">then</span>  </span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;您不需输入账户名&quot;</span>  </span><br><span class="line">   <span class="built_in">exit</span> 2  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="comment">#使用 stty ‐echo 关闭 shell 的回显功能  </span></span><br><span class="line"><span class="comment">#使用 stty  echo 打开 shell 的回显功能  </span></span><br><span class="line">stty -<span class="built_in">echo</span>  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入密码: &quot;</span> pass  </span><br><span class="line">stty <span class="built_in">echo</span>  </span><br><span class="line">pass=<span class="variable">$&#123;pass:‐123456&#125;</span>  </span><br><span class="line">useradd <span class="string">&quot;<span class="variable">$user</span>&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$pass</span>&quot;</span> | passwd ‐‐stdin <span class="string">&quot;<span class="variable">$user</span>&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>10）输入三个数并进行升序排序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 依次提示用户输入 3 个整数,脚本根据数字大小依次排序输出 3 个数字  </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个整数:&quot;</span> num1  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个整数:&quot;</span> num2  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个整数:&quot;</span> num3  </span><br><span class="line"><span class="comment"># 不管谁大谁小,最后都打印 echo &quot;$num1,$num2,$num3&quot;  </span></span><br><span class="line"><span class="comment"># num1 中永远存最小的值,num2 中永远存中间值,num3 永远存最大值  </span></span><br><span class="line"><span class="comment"># 如果输入的不是这样的顺序,则改变数的存储顺序,如:可以将 num1 和 num2 的值对调  </span></span><br><span class="line">tmp=0  </span><br><span class="line"><span class="comment"># 如果 num1 大于 num2,就把 num1 和和 num2 的值对调,确保 num1 变量中存的是最小值  </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num1</span> -gt <span class="variable">$num2</span> ];<span class="keyword">then</span>     </span><br><span class="line">  tmp=<span class="variable">$num1</span>  </span><br><span class="line">  num1=<span class="variable">$num2</span>  </span><br><span class="line">  num2=<span class="variable">$tmp</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="comment"># 如果 num1 大于 num3,就把 num1 和 num3 对调,确保 num1 变量中存的是最小值  </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num1</span> -gt <span class="variable">$num3</span> ];<span class="keyword">then</span>     </span><br><span class="line">    tmp=<span class="variable">$num1</span>  </span><br><span class="line">    num1=<span class="variable">$num3</span>  </span><br><span class="line">    num3=<span class="variable">$tmp</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="comment"># 如果 num2 大于 num3,就把 num2 和 num3 对标,确保 num2 变量中存的是小一点的值  </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num2</span> -gt <span class="variable">$num3</span> ];<span class="keyword">then</span>  </span><br><span class="line">    tmp=<span class="variable">$num2</span>  </span><br><span class="line">    num2=<span class="variable">$num3</span>  </span><br><span class="line">    num3=<span class="variable">$tmp</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;排序后数据(从小到大)为:<span class="variable">$num1</span>,<span class="variable">$num2</span>,<span class="variable">$num3</span>&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>11）石头、剪刀、布游戏</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 编写脚本,实现人机&lt;石头,剪刀,布&gt;游戏  </span></span><br><span class="line">game=(石头 剪刀 布)  </span><br><span class="line">num=$[RANDOM%3]  </span><br><span class="line">computer=<span class="variable">$&#123;game[$num]&#125;</span>  </span><br><span class="line"><span class="comment"># 通过随机数获取计算机的出拳  </span></span><br><span class="line"><span class="comment"># 出拳的可能性保存在一个数组中,game[0],game[1],game[2]分别是 3 中不同的可能  </span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请根据下列提示选择您的出拳手势&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1.石头&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2.剪刀&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;3.布&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请选择 1‐3:&quot;</span> person  </span><br><span class="line"><span class="keyword">case</span>  <span class="variable">$person</span>  <span class="keyword">in</span>  </span><br><span class="line">1)  </span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$num</span> -eq 0 ]  </span><br><span class="line">  <span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;平局&quot;</span>  </span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$num</span> -eq 1 ]  </span><br><span class="line">    <span class="keyword">then</span>  </span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;你赢&quot;</span>  </span><br><span class="line">  <span class="keyword">else</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;计算机赢&quot;</span>  </span><br><span class="line">  <span class="keyword">fi</span>;;  </span><br><span class="line">2)     </span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$num</span> -eq 0 ]  </span><br><span class="line">  <span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;计算机赢&quot;</span>  </span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$num</span> -eq 1 ]  </span><br><span class="line">    <span class="keyword">then</span>  </span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;平局&quot;</span>  </span><br><span class="line">  <span class="keyword">else</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;你赢&quot;</span>  </span><br><span class="line">  <span class="keyword">fi</span>;;  </span><br><span class="line">3)  </span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$num</span> -eq 0 ]  </span><br><span class="line">  <span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;你赢&quot;</span>  </span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$num</span> -eq 1 ]  </span><br><span class="line">    <span class="keyword">then</span>  </span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;计算机赢&quot;</span>  </span><br><span class="line">  <span class="keyword">else</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;平局&quot;</span>  </span><br><span class="line">  <span class="keyword">fi</span>;;  </span><br><span class="line">*)  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;必须输入 1‐3 的数字&quot;</span>  </span><br><span class="line"><span class="keyword">esac</span>  </span><br></pre></td></tr></table></figure>

<p>12）编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机状态(for 版本)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机  </span></span><br><span class="line"><span class="comment"># 状态(for 版本)  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  <span class="comment"># 每隔0.3秒ping一次，一共ping2次，并以1毫秒为单位设置ping的超时时间  </span></span><br><span class="line">     ping ‐c 2 ‐i 0.3 ‐W 1 192.168.4.<span class="variable">$i</span>  &amp;&gt;/dev/null  </span><br><span class="line">    <span class="keyword">if</span>  [ $? -eq 0 ];<span class="keyword">then</span>  </span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;192.168.4.<span class="variable">$i</span> is up&quot;</span>  </span><br><span class="line">     <span class="keyword">else</span>  </span><br><span class="line">         <span class="built_in">echo</span>  <span class="string">&quot;192.168.4.<span class="variable">$i</span> is down&quot;</span>  </span><br><span class="line">     <span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>13）编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机状态(while 版本)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机  </span></span><br><span class="line"><span class="comment"># 状态(while 版本)   </span></span><br><span class="line">i=1  </span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 254 ]  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">     ping ‐c 2 ‐i 0.3 ‐W 1 192.168.4.<span class="variable">$i</span>  &amp;&gt;/dev/null  </span><br><span class="line">     <span class="keyword">if</span>  [ $? -eq 0 ];<span class="keyword">then</span>  </span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;192.168.4.<span class="variable">$i</span> is up&quot;</span>  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">         <span class="built_in">echo</span>  <span class="string">&quot;192.168.4.<span class="variable">$i</span> is down&quot;</span>  </span><br><span class="line">     <span class="keyword">fi</span>  </span><br><span class="line">     <span class="built_in">let</span> i++  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>14）编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机状态(多进程版)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机  </span></span><br><span class="line"><span class="comment"># 状态(多进程版)  </span></span><br><span class="line"><span class="comment">#定义一个函数,ping 某一台主机,并检测主机的存活状态  </span></span><br><span class="line"><span class="function"><span class="title">myping</span></span>()&#123;  </span><br><span class="line">ping ‐c 2 ‐i 0.3 ‐W 1 <span class="variable">$1</span>  &amp;&gt;/dev/null  </span><br><span class="line"><span class="keyword">if</span>  [ $? -eq 0 ];<span class="keyword">then</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is up&quot;</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is down&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">     myping 192.168.4.<span class="variable">$i</span> &amp;  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="comment"># 使用&amp;符号,将执行的函数放入后台执行  </span></span><br><span class="line"><span class="comment"># 这样做的好处是不需要等待ping第一台主机的回应,就可以继续并发ping第二台主机,依次类推。  </span></span><br></pre></td></tr></table></figure>

<p>15）编写脚本,显示进度条</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 编写脚本,显示进度条  </span></span><br><span class="line"><span class="function"><span class="title">jindu</span></span>()&#123;  </span><br><span class="line"><span class="keyword">while</span> :  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">     <span class="built_in">echo</span> -n <span class="string">&#x27;#&#x27;</span>  </span><br><span class="line">     sleep 0.2  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line">&#125;  </span><br><span class="line">jindu &amp;  </span><br><span class="line">cp -a <span class="variable">$1</span> <span class="variable">$2</span>  </span><br><span class="line">killall <span class="variable">$0</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;拷贝完成&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>16）进度条,动态时针版本；定义一个显示进度的函数,屏幕快速显示|  / ‐ \</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 进度条,动态时针版本  </span></span><br><span class="line"><span class="comment"># 定义一个显示进度的函数,屏幕快速显示|  / ‐ \  </span></span><br><span class="line"><span class="function"><span class="title">rotate_line</span></span>()&#123;  </span><br><span class="line">INTERVAL=0.5  <span class="comment">#设置间隔时间  </span></span><br><span class="line">COUNT=<span class="string">&quot;0&quot;</span>     <span class="comment">#设置4个形状的编号,默认编号为 0(不代表任何图像)  </span></span><br><span class="line"><span class="keyword">while</span> :  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  COUNT=`expr <span class="variable">$COUNT</span> + 1` <span class="comment">#执行循环,COUNT 每次循环加 1,(分别代表4种不同的形状)  </span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$COUNT</span> <span class="keyword">in</span>          <span class="comment">#判断 COUNT 的值,值不一样显示的形状就不一样  </span></span><br><span class="line">  <span class="string">&quot;1&quot;</span>)                    <span class="comment">#值为 1 显示‐  </span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">&#x27;‐&#x27;</span><span class="string">&quot;\b\c&quot;</span>  </span><br><span class="line">          sleep <span class="variable">$INTERVAL</span>  </span><br><span class="line">          ;;  </span><br><span class="line">    <span class="string">&quot;2&quot;</span>)                  <span class="comment">#值为 2 显示\\,第一个\是转义  </span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">&#x27;\\&#x27;</span><span class="string">&quot;\b\c&quot;</span>  </span><br><span class="line">          sleep <span class="variable">$INTERVAL</span>  </span><br><span class="line">          ;;  </span><br><span class="line">    <span class="string">&quot;3&quot;</span>)                  <span class="comment">#值为 3 显示|  </span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">&quot;|\b\c&quot;</span>  </span><br><span class="line">          sleep <span class="variable">$INTERVAL</span>  </span><br><span class="line">          ;;  </span><br><span class="line">   <span class="string">&quot;4&quot;</span>)                   <span class="comment">#值为 4 显示/  </span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">&quot;/\b\c&quot;</span>  </span><br><span class="line">          sleep <span class="variable">$INTERVAL</span>  </span><br><span class="line">          ;;  </span><br><span class="line">    *)                    <span class="comment">#值为其他时,将 COUNT 重置为 0  </span></span><br><span class="line">          COUNT=<span class="string">&quot;0&quot;</span>;;  </span><br><span class="line">    <span class="keyword">esac</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line">&#125;  </span><br><span class="line">rotate_line  </span><br></pre></td></tr></table></figure>

<p>17）9*9 乘法表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 9*9 乘法表(编写 shell 脚本,打印 9*9 乘法表)   </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 9`  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> `seq <span class="variable">$i</span>`  </span><br><span class="line">     <span class="keyword">do</span>  </span><br><span class="line">         <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$j</span>*<span class="variable">$i</span>=$[i*j]  &quot;</span>  </span><br><span class="line">     <span class="keyword">done</span>  </span><br><span class="line">    <span class="built_in">echo</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>18）使用死循环实时显示 eth0 网卡发送的数据包流量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用死循环实时显示 eth0 网卡发送的数据包流量   </span></span><br><span class="line"><span class="keyword">while</span> :  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">   <span class="built_in">echo</span>  <span class="string">&#x27;本地网卡 eth0 流量信息如下: &#x27;</span>  </span><br><span class="line">    ifconfig eth0 | grep <span class="string">&quot;RX pack&quot;</span> | awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span>  </span><br><span class="line">    ifconfig eth0 | grep <span class="string">&quot;TX pack&quot;</span> | awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span>  </span><br><span class="line">     sleep 1  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>19）使用 user.txt 文件中的人员名单,在计算机中自动创建对应的账户并配置初始密码本脚本执行,需要提前准备一个 user.txt 文件,该文件中包含有若干用户名信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用 user.txt 文件中的人员名单,在计算机中自动创建对应的账户并配置初始密码  </span></span><br><span class="line"><span class="comment"># 本脚本执行,需要提前准备一个 user.txt 文件,该文件中包含有若干用户名信息  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat user.txt`  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">     useradd  <span class="variable">$i</span>  </span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;123456&quot;</span> | passwd ‐‐stdin <span class="variable">$i</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>20）编写批量修改扩展名脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 编写批量修改扩展名脚本,如批量将 txt 文件修改为 doc 文件   </span></span><br><span class="line"><span class="comment"># 执行脚本时,需要给脚本添加位置参数  </span></span><br><span class="line"><span class="comment"># 脚本名  txt  doc(可以将 txt 的扩展名修改为 doc)  </span></span><br><span class="line"><span class="comment"># 脚本名  doc  jpg(可以将 doc 的扩展名修改为 jpg)  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls *.<span class="variable">$1</span>`  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">     mv <span class="variable">$i</span> <span class="variable">$&#123;i%.*&#125;</span>.<span class="variable">$2</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>21）使用 expect 工具自动交互密码远程其他主机安装 httpd 软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用 expect 工具自动交互密码远程其他主机安装 httpd 软件   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 删除~/.ssh/known_hosts 后,ssh 远程任何主机都会询问是否确认要连接该主机  </span></span><br><span class="line">rm  ‐rf  ~/.ssh/known_hosts  </span><br><span class="line">expect &lt;&lt;<span class="string">EOF  </span></span><br><span class="line"><span class="string">spawn ssh 192.168.4.254  </span></span><br><span class="line"><span class="string">expect &quot;yes/no&quot; &#123;send &quot;yes\r&quot;&#125;  </span></span><br><span class="line"><span class="string"># 根据自己的实际情况将密码修改为真实的密码字串  </span></span><br><span class="line"><span class="string">expect &quot;password&quot; &#123;send  &quot;密码\r&quot;&#125;  </span></span><br><span class="line"><span class="string">expect &quot;#&quot; &#123;send  &quot;yum ‐y install httpd\r&quot;&#125;  </span></span><br><span class="line"><span class="string">expect &quot;#&quot; &#123;send  &quot;exit\r&quot;&#125;  </span></span><br><span class="line"><span class="string">EOF</span>  </span><br></pre></td></tr></table></figure>

<p>22）一键部署 LNMP(源码安装版本)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 一键部署 LNMP(源码安装版本)  </span></span><br><span class="line">menu()  </span><br><span class="line">&#123;  </span><br><span class="line">clear  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;  ##############‐‐‐‐Menu‐‐‐‐##############&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 1. Install Nginx&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 2. Install MySQL&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 3. Install PHP&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 4. Exit Program&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;  ########################################&quot;</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">choice()  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">&quot;Please choice a menu[1‐9]:&quot;</span> select  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">install_nginx()  </span><br><span class="line">&#123;  </span><br><span class="line">  id nginx &amp;&gt;/dev/null  </span><br><span class="line">  <span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span>  </span><br><span class="line">    useradd -s /sbin/nologin nginx  </span><br><span class="line">  <span class="keyword">fi</span>  </span><br><span class="line">  <span class="keyword">if</span> [ -f nginx‐1.8.0.tar.gz ];<span class="keyword">then</span>  </span><br><span class="line">    tar -xf nginx‐1.8.0.tar.gz  </span><br><span class="line">    <span class="built_in">cd</span> nginx‐1.8.0  </span><br><span class="line">    yum -y install  gcc pcre‐devel openssl‐devel zlib‐devel make  </span><br><span class="line">    ./configure ‐‐prefix=/usr/<span class="built_in">local</span>/nginx ‐‐with‐http_ssl_module  </span><br><span class="line">    make  </span><br><span class="line">    make install  </span><br><span class="line">    ln -s /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/sbin/  </span><br><span class="line">    <span class="built_in">cd</span> ..  </span><br><span class="line">  <span class="keyword">else</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;没有 Nginx 源码包&quot;</span>  </span><br><span class="line">  <span class="keyword">fi</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">install_mysql()  </span><br><span class="line">&#123;  </span><br><span class="line">  yum -y install gcc gcc‐c++ cmake ncurses‐devel perl  </span><br><span class="line">  id mysql &amp;&gt;/dev/null  </span><br><span class="line">  <span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span>  </span><br><span class="line">    useradd -s /sbin/nologin mysql  </span><br><span class="line">  <span class="keyword">fi</span>  </span><br><span class="line">  <span class="keyword">if</span> [ -f mysql‐5.6.25.tar.gz ];<span class="keyword">then</span>  </span><br><span class="line">    tar -xf mysql‐5.6.25.tar.gz  </span><br><span class="line">    <span class="built_in">cd</span> mysql‐5.6.25  </span><br><span class="line">    cmake .  </span><br><span class="line">    make  </span><br><span class="line">    make install  </span><br><span class="line">    /usr/<span class="built_in">local</span>/mysql/scripts/mysql_install_db ‐‐user=mysql ‐‐datadir=/usr/<span class="built_in">local</span>/mysql/data/  </span><br><span class="line">‐‐basedir=/usr/<span class="built_in">local</span>/mysql/  </span><br><span class="line">    chown -R root.mysql /usr/<span class="built_in">local</span>/mysql  </span><br><span class="line">    chown -R mysql /usr/<span class="built_in">local</span>/mysql/data  </span><br><span class="line">    /bin/cp -f /usr/<span class="built_in">local</span>/mysql/support‐files/mysql.server /etc/init.d/mysqld  </span><br><span class="line">    chmod +x /etc/init.d/mysqld  </span><br><span class="line">    /bin/cp -f /usr/<span class="built_in">local</span>/mysql/support‐files/my‐default.cnf /etc/my.cnf  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;/usr/local/mysql/lib/&quot;</span> &gt;&gt; /etc/ld.so.conf  </span><br><span class="line">    ldconfig  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;PATH=\$PATH:/usr/local/mysql/bin/&#x27;</span> &gt;&gt; /etc/profile  </span><br><span class="line">    <span class="built_in">export</span> PATH  </span><br><span class="line">  <span class="keyword">else</span>  </span><br><span class="line">    <span class="built_in">echo</span>  <span class="string">&quot;没有 mysql 源码包&quot;</span>  </span><br><span class="line">    <span class="built_in">exit</span>  </span><br><span class="line">  <span class="keyword">fi</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">install_php()  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="comment">#安装 php 时没有指定启动哪些模块功能,如果的用户可以根据实际情况自行添加额外功能如‐‐with‐gd 等  </span></span><br><span class="line">yum  -y  install  gcc  libxml2‐devel  </span><br><span class="line"><span class="keyword">if</span> [ -f mhash‐0.9.9.9.tar.gz ];<span class="keyword">then</span>  </span><br><span class="line">  tar -xf mhash‐0.9.9.9.tar.gz  </span><br><span class="line">  <span class="built_in">cd</span> mhash‐0.9.9.9  </span><br><span class="line">  ./configure  </span><br><span class="line">  make  </span><br><span class="line">  make install  </span><br><span class="line">  <span class="built_in">cd</span> ..  </span><br><span class="line"><span class="keyword">if</span> [ ! ‐f /usr/lib/libmhash.so ];<span class="keyword">then</span>  </span><br><span class="line">  ln -s /usr/<span class="built_in">local</span>/lib/libmhash.so /usr/lib/  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">ldconfig  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;没有 mhash 源码包文件&quot;</span>  </span><br><span class="line">  <span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">if</span> [ -f libmcrypt‐2.5.8.tar.gz ];<span class="keyword">then</span>  </span><br><span class="line">  tar -xf libmcrypt‐2.5.8.tar.gz  </span><br><span class="line">  <span class="built_in">cd</span> libmcrypt‐2.5.8  </span><br><span class="line">  ./configure  </span><br><span class="line">  make  </span><br><span class="line">  make install  </span><br><span class="line">  <span class="built_in">cd</span> ..  </span><br><span class="line">  <span class="keyword">if</span> [ ! -f /usr/lib/libmcrypt.so ];<span class="keyword">then</span>    </span><br><span class="line">    ln -s /usr/<span class="built_in">local</span>/lib/libmcrypt.so /usr/lib/  </span><br><span class="line">  <span class="keyword">fi</span>  </span><br><span class="line">  ldconfig  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;没有 libmcrypt 源码包文件&quot;</span>  </span><br><span class="line">  <span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">if</span> [ -f php‐5.4.24.tar.gz ];<span class="keyword">then</span>  </span><br><span class="line">  tar -xf php‐5.4.24.tar.gz  </span><br><span class="line">  <span class="built_in">cd</span> php‐5.4.24  </span><br><span class="line">  ./configure  ‐‐prefix=/usr/<span class="built_in">local</span>/php5  ‐‐with‐mysql=/usr/<span class="built_in">local</span>/mysql  ‐‐<span class="built_in">enable</span>‐fpm    ‐‐  </span><br><span class="line">  <span class="built_in">enable</span>‐mbstring  ‐‐with‐mcrypt  ‐‐with‐mhash  ‐‐with‐config‐file‐path=/usr/<span class="built_in">local</span>/php5/etc  ‐‐with‐  </span><br><span class="line">  mysqli=/usr/<span class="built_in">local</span>/mysql/bin/mysql_config  </span><br><span class="line">  make &amp;&amp; make install  </span><br><span class="line">  /bin/cp -f php.ini‐production /usr/<span class="built_in">local</span>/php5/etc/php.ini  </span><br><span class="line">  /bin/cp -f /usr/<span class="built_in">local</span>/php5/etc/php‐fpm.conf.default /usr/<span class="built_in">local</span>/php5/etc/php‐fpm.conf  </span><br><span class="line">  <span class="built_in">cd</span> ..  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;没有 php 源码包文件&quot;</span>  </span><br><span class="line">  <span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">fi</span>   </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">while</span> :  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  menu  </span><br><span class="line">  choice  </span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$select</span> <span class="keyword">in</span>  </span><br><span class="line">  1)  </span><br><span class="line">    install_nginx  </span><br><span class="line">    ;;  </span><br><span class="line">  2)  </span><br><span class="line">    install_mysql  </span><br><span class="line">    ;;  </span><br><span class="line">  3)  </span><br><span class="line">    install_php  </span><br><span class="line">    ;;  </span><br><span class="line">  4)  </span><br><span class="line">    <span class="built_in">exit</span>  </span><br><span class="line">    ;;  </span><br><span class="line">  *)  </span><br><span class="line">    <span class="built_in">echo</span> Sorry!  </span><br><span class="line">  <span class="keyword">esac</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>23）编写脚本快速克隆 KVM 虚拟机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 编写脚本快速克隆 KVM 虚拟机  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 本脚本针对 RHEL7.2 或 Centos7.2  </span></span><br><span class="line"><span class="comment"># 本脚本需要提前准备一个 qcow2 格式的虚拟机模板,  </span></span><br><span class="line"><span class="comment"># 名称为/var/lib/libvirt/images  /.rh7_template 的虚拟机模板  </span></span><br><span class="line"><span class="comment"># 该脚本使用 qemu‐img 命令快速创建快照虚拟机  </span></span><br><span class="line"><span class="comment"># 脚本使用 sed 修改模板虚拟机的配置文件,将虚拟机名称、UUID、磁盘文件名、MAC 地址  </span></span><br><span class="line"><span class="comment"># exit code:    </span></span><br><span class="line"><span class="comment">#    65 ‐&gt; user input nothing  </span></span><br><span class="line"><span class="comment">#    66 ‐&gt; user input is not a number  </span></span><br><span class="line"><span class="comment">#    67 ‐&gt; user input out of range  </span></span><br><span class="line"><span class="comment">#    68 ‐&gt; vm disk image exists  </span></span><br><span class="line">  </span><br><span class="line">IMG_DIR=/var/lib/libvirt/images  </span><br><span class="line">BASEVM=rh7_template  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter VM number: &quot;</span> VMNUM  </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$VMNUM</span> -le 9 ];<span class="keyword">then</span>  </span><br><span class="line">VMNUM=0<span class="variable">$VMNUM</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;VMNUM&#125;</span>&quot;</span> ]; <span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;You must input a number.&quot;</span>  </span><br><span class="line">    <span class="built_in">exit</span> 65  </span><br><span class="line"><span class="keyword">elif</span> [[  <span class="variable">$&#123;VMNUM&#125;</span> =~ [a‐z]  ]; <span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;You must input a number.&quot;</span>  </span><br><span class="line">    <span class="built_in">exit</span> 66  </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$&#123;VMNUM&#125;</span> -lt 1 -o <span class="variable">$&#123;VMNUM&#125;</span> -gt 99 ]; <span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Input out of range&quot;</span>  </span><br><span class="line">    <span class="built_in">exit</span> 67  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">  </span><br><span class="line">NEWVM=rh7_node<span class="variable">$&#123;VMNUM&#125;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$IMG_DIR</span>/<span class="variable">$&#123;NEWVM&#125;</span>.img ]; <span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;File exists.&quot;</span>  </span><br><span class="line">    <span class="built_in">exit</span> 68  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">echo</span> -en <span class="string">&quot;Creating Virtual Machine disk image......\t&quot;</span>  </span><br><span class="line">qemu‐img create -f qcow2 ‐b <span class="variable">$IMG_DIR</span>/.<span class="variable">$&#123;BASEVM&#125;</span>.img <span class="variable">$IMG_DIR</span>/<span class="variable">$&#123;NEWVM&#125;</span>.img &amp;&gt; /dev/null  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\e[32;1m[OK]\e[0m&quot;</span>  </span><br><span class="line"><span class="comment">#virsh dumpxml $&#123;BASEVM&#125; &gt; /tmp/myvm.xml  </span></span><br><span class="line">  </span><br><span class="line">cat /var/lib/libvirt/images/.rhel7.xml &gt; /tmp/myvm.xml  </span><br><span class="line">sed -i <span class="string">&quot;/&lt;name&gt;<span class="variable">$&#123;BASEVM&#125;</span>/s/<span class="variable">$&#123;BASEVM&#125;</span>/<span class="variable">$&#123;NEWVM&#125;</span>/&quot;</span> /tmp/myvm.xml  </span><br><span class="line">sed -i <span class="string">&quot;/uuid/s/&lt;uuid&gt;.*&lt;\/uuid&gt;/&lt;uuid&gt;<span class="subst">$(uuidgen)</span>&lt;\/uuid&gt;/&quot;</span> /tmp/myvm.xml  </span><br><span class="line">sed -i <span class="string">&quot;/<span class="variable">$&#123;BASEVM&#125;</span>\.img/s/<span class="variable">$&#123;BASEVM&#125;</span>/<span class="variable">$&#123;NEWVM&#125;</span>/&quot;</span> /tmp/myvm.xml  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 修改 MAC 地址,本例使用的是常量,每位使用该脚本的用户需要根据实际情况修改这些值   </span></span><br><span class="line"><span class="comment"># 最好这里可以使用便利,这样更适合于批量操作,可以克隆更多虚拟机   </span></span><br><span class="line">sed -i <span class="string">&quot;/mac /s/a1/0c/&quot;</span> /tmp/myvm.xml  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">echo</span> -en <span class="string">&quot;Defining new virtual machine......\t\t&quot;</span>  </span><br><span class="line">virsh define /tmp/myvm.xml &amp;&gt; /dev/null  </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\e[32;1m[OK]\e[0m&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>24）点名器脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 编写一个点名器脚本  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 该脚本,需要提前准备一个 user.txt 文件  </span></span><br><span class="line"><span class="comment"># 该文件中需要包含所有姓名的信息,一行一个姓名,脚本每次随机显示一个姓名  </span></span><br><span class="line"><span class="keyword">while</span> :  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line"><span class="comment">#统计 user 文件中有多少用户  </span></span><br><span class="line">line=`cat user.txt |wc ‐l`  </span><br><span class="line">num=$[RANDOM%line+1]  </span><br><span class="line">sed -n <span class="string">&quot;<span class="variable">$&#123;num&#125;</span>p&quot;</span>  user.txt  </span><br><span class="line">sleep 0.2  </span><br><span class="line">clear  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>25）查看有多少远程的 IP 在连接本机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 查看有多少远程的 IP 在连接本机(不管是通过 ssh 还是 web 还是 ftp 都统计)   </span></span><br><span class="line"><span class="comment"># 使用 netstat ‐atn 可以查看本机所有连接的状态,‐a 查看所有,  </span></span><br><span class="line"><span class="comment"># -t仅显示 tcp 连接的信息,‐n 数字格式显示  </span></span><br><span class="line"><span class="comment"># Local Address(第四列是本机的 IP 和端口信息)  </span></span><br><span class="line"><span class="comment"># Foreign Address(第五列是远程主机的 IP 和端口信息)  </span></span><br><span class="line"><span class="comment"># 使用 awk 命令仅显示第 5 列数据,再显示第 1 列 IP 地址的信息  </span></span><br><span class="line"><span class="comment"># sort 可以按数字大小排序,最后使用 uniq 将多余重复的删除,并统计重复的次数  </span></span><br><span class="line">netstat -atn  |  awk  <span class="string">&#x27;&#123;print $5&#125;&#x27;</span>  | awk  <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | sort -nr  |  uniq -c  </span><br></pre></td></tr></table></figure>

<p>26）对 100 以内的所有正整数相加求和(1+2+3+4…+100)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 对 100 以内的所有正整数相加求和(1+2+3+4...+100)  </span></span><br><span class="line"><span class="comment">#seq 100 可以快速自动生成 100 个整数  </span></span><br><span class="line">sum=0  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 100`  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">    sum=$[sum+i]  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;总和是:<span class="variable">$sum</span>&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>27）统计 13:30 到 14:30 所有访问 apache 服务器的请求有多少个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 统计 13:30 到 14:30 所有访问 apache 服务器的请求有多少个  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># awk 使用‐F 选项指定文件内容的分隔符是/或者:  </span></span><br><span class="line"><span class="comment"># 条件判断$7:$8 大于等于 13:30,并且要求,$7:$8 小于等于 14:30  </span></span><br><span class="line"><span class="comment"># 最后使用 wc ‐l 统计这样的数据有多少行,即多少个  </span></span><br><span class="line">awk -F <span class="string">&quot;[ /:]&quot;</span> <span class="string">&#x27;$7&quot;:&quot;$8&gt;=&quot;13:30&quot; &amp;&amp; $7&quot;:&quot;$8&lt;=&quot;14:30&quot;&#x27;</span> /var/<span class="built_in">log</span>/httpd/access_log |wc -l  </span><br></pre></td></tr></table></figure>

<p>28）统计 13:30 到 14:30 所有访问本机 Aapche 服务器的远程 IP 地址是什么</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 统计 13:30 到 14:30 所有访问本机 Aapche 服务器的远程 IP 地址是什么   </span></span><br><span class="line"><span class="comment"># awk 使用‐F 选项指定文件内容的分隔符是/或者:  </span></span><br><span class="line"><span class="comment"># 条件判断$7:$8 大于等于 13:30,并且要求,$7:$8 小于等于 14:30  </span></span><br><span class="line"><span class="comment"># 日志文档内容里面,第 1 列是远程主机的 IP 地址,使用 awk 单独显示第 1 列即可  </span></span><br><span class="line">awk -F <span class="string">&quot;[ /:]&quot;</span> <span class="string">&#x27;$7&quot;:&quot;$8&gt;=&quot;13:30&quot; &amp;&amp; $7&quot;:&quot;$8&lt;=&quot;14:30&quot;&#123;print $1&#125;&#x27;</span> /var/<span class="built_in">log</span>/httpd/access_log  </span><br></pre></td></tr></table></figure>

<p>29）打印国际象棋棋盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印国际象棋棋盘  </span></span><br><span class="line"><span class="comment"># 设置两个变量,i 和 j,一个代表行,一个代表列,国际象棋为 8*8 棋盘  </span></span><br><span class="line"><span class="comment"># i=1 是代表准备打印第一行棋盘,第 1 行棋盘有灰色和蓝色间隔输出,总共为 8 列  </span></span><br><span class="line"><span class="comment"># i=1,j=1 代表第 1 行的第 1 列;i=2,j=3 代表第 2 行的第 3 列  </span></span><br><span class="line"><span class="comment"># 棋盘的规律是 i+j 如果是偶数,就打印蓝色色块,如果是奇数就打印灰色色块  </span></span><br><span class="line"><span class="comment"># 使用 echo ‐ne 打印色块,并且打印完成色块后不自动换行,在同一行继续输出其他色块  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..8&#125;  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> &#123;1..8&#125;  </span><br><span class="line">    <span class="keyword">do</span>  </span><br><span class="line">      sum=$[i+j]  </span><br><span class="line">    <span class="keyword">if</span> [  $[sum%2] -eq 0 ];<span class="keyword">then</span>  </span><br><span class="line">       <span class="built_in">echo</span> -ne <span class="string">&quot;\033[46m  \033[0m&quot;</span>  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">      <span class="built_in">echo</span> -ne <span class="string">&quot;\033[47m  \033[0m&quot;</span>  </span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line">    <span class="keyword">done</span>  </span><br><span class="line">    <span class="built_in">echo</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>30）统计每个远程 IP 访问了本机 apache 几次?</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 统计每个远程 IP 访问了本机 apache 几次?   </span></span><br><span class="line">awk  <span class="string">&#x27;&#123;ip[$1]++&#125;END&#123;for(i in ip)&#123;print ip[i],i&#125;&#125;&#x27;</span>  /var/<span class="built_in">log</span>/httpd/access_log  </span><br></pre></td></tr></table></figure>

<p>31）统计当前 Linux 系统中可以登录计算机的账户有多少个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 统计当前 Linux 系统中可以登录计算机的账户有多少个  </span></span><br><span class="line"><span class="comment">#方法 1:  </span></span><br><span class="line">grep <span class="string">&quot;bash$&quot;</span> /etc/passwd | wc -l  </span><br><span class="line"><span class="comment">#方法 2:  </span></span><br><span class="line">awk -f: <span class="string">&#x27;/bash$/&#123;x++&#125;end&#123;print x&#125;&#x27;</span>  /etc/passwd  </span><br></pre></td></tr></table></figure>

<p>32）统计/var/log 有多少个文件,并显示这些文件名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 统计/var/log 有多少个文件,并显示这些文件名   </span></span><br><span class="line"><span class="comment"># 使用 ls 递归显示所有,再判断是否为文件,如果是文件则计数器加 1  </span></span><br><span class="line"><span class="built_in">cd</span>  /var/<span class="built_in">log</span>  </span><br><span class="line">sum=0  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls -r *`  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">   <span class="keyword">if</span> [ -f <span class="variable">$i</span> ];<span class="keyword">then</span>  </span><br><span class="line">       <span class="built_in">let</span> sum++  </span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;文件名:<span class="variable">$i</span>&quot;</span>  </span><br><span class="line">     <span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;总文件数量为:<span class="variable">$sum</span>&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>33）自动为其他脚本添加解释器信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Docker+K8s+Jenkins 主流技术全解视频资料【干货免费分享】  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 自动为其他脚本添加解释器信息#!/bin/bash,如脚本名为 test.sh 则效果如下:   </span></span><br><span class="line"><span class="comment"># ./test.sh  abc.sh  自动为 abc.sh 添加解释器信息  </span></span><br><span class="line"><span class="comment"># ./test.sh  user.sh  自动为 user.sh 添加解释器信息  </span></span><br><span class="line"><span class="comment"># 先使用 grep 判断对象脚本是否已经有解释器信息,如果没有则使用 sed 添加解释器以及描述信息  </span></span><br><span class="line"><span class="keyword">if</span>  !  grep  -q  <span class="string">&quot;^#!&quot;</span>  <span class="variable">$1</span>; <span class="keyword">then</span>  </span><br><span class="line">sed  <span class="string">&#x27;1i #!/bin/bash&#x27;</span>  <span class="variable">$1</span>  </span><br><span class="line">sed  <span class="string">&#x27;2i #Description: &#x27;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="comment"># 因为每个脚本的功能不同,作用不同,所以在给对象脚本添加完解释器信息,以及 Description 后还希望  </span></span><br><span class="line"><span class="comment"># 继续编辑具体的脚本功能的描述信息,这里直接使用 vim 把对象脚本打开,并且光标跳转到该文件的第 2 行  </span></span><br><span class="line">vim +2 <span class="variable">$1</span>  </span><br></pre></td></tr></table></figure>

<p>34）自动化部署 varnish 源码包软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 自动化部署 varnish 源码包软件   </span></span><br><span class="line"><span class="comment"># 本脚本需要提前下载 varnish‐3.0.6.tar.gz 这样一个源码包软件,该脚本即可用自动源码安装部署软件  </span></span><br><span class="line">  </span><br><span class="line">yum -y install gcc readline‐devel pcre‐devel  </span><br><span class="line">useradd -s /sbin/nologin varnish  </span><br><span class="line">tar -xf varnish‐3.0.6.tar.gz  </span><br><span class="line"><span class="built_in">cd</span> varnish‐3.0.6  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用 configure,make,make install 源码安装软件包  </span></span><br><span class="line">./configure ‐‐prefix=/usr/<span class="built_in">local</span>/varnish  </span><br><span class="line">make &amp;&amp; make install  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 在源码包目录下,将相应的配置文件拷贝到 Linux 系统文件系统中  </span></span><br><span class="line"><span class="comment"># 默认安装完成后,不会自动拷贝或安装配置文件到 Linux 系统,所以需要手动 cp 复制配置文件  </span></span><br><span class="line"><span class="comment"># 并使用 uuidgen 生成一个随机密钥的配置文件  </span></span><br><span class="line">cp redhat/varnish.initrc /etc/init.d/varnish  </span><br><span class="line">cp redhat/varnish.sysconfig /etc/sysconfig/varnish  </span><br><span class="line">cp redhat/varnish_reload_vcl /usr/bin/  </span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/varnish/sbin/varnishd /usr/sbin/  </span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/varnish/bin/* /usr/bin  </span><br><span class="line">mkdir /etc/varnish  </span><br><span class="line">cp /usr/<span class="built_in">local</span>/varnish/etc/varnish/default.vcl /etc/varnish/  </span><br><span class="line">uuidgen &gt; /etc/varnish/secret  </span><br></pre></td></tr></table></figure>

<p>35）编写 nginx 启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 编写 nginx 启动脚本   </span></span><br><span class="line"><span class="comment"># 本脚本编写完成后,放置在/etc/init.d/目录下,就可以被 Linux 系统自动识别到该脚本  </span></span><br><span class="line"><span class="comment"># 如果本脚本名为/etc/init.d/nginx,则 service nginx start 就可以启动该服务  </span></span><br><span class="line"><span class="comment"># service nginx stop 就可以关闭服务  </span></span><br><span class="line"><span class="comment"># service nginx restart 可以重启服务  </span></span><br><span class="line"><span class="comment"># service nginx status 可以查看服务状态  </span></span><br><span class="line">program=/usr/<span class="built_in">local</span>/nginx/sbin/nginx  </span><br><span class="line">pid=/usr/<span class="built_in">local</span>/nginx/logs/nginx.pid  </span><br><span class="line"><span class="function"><span class="title">start</span></span>()&#123;  </span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$pid</span> ];<span class="keyword">then</span>  </span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">&quot;nginx 服务已经处于开启状态&quot;</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">  <span class="variable">$program</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="function"><span class="title">stop</span></span>()&#123;  </span><br><span class="line"><span class="keyword">if</span> [ -! -f <span class="variable">$pid</span> ];<span class="keyword">then</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;nginx 服务已经关闭&quot;</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">  <span class="variable">$program</span> -s stop  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;关闭服务 ok&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="title">status</span></span>()&#123;  </span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$pid</span> ];<span class="keyword">then</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;服务正在运行...&quot;</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;服务已经关闭&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span>  </span><br><span class="line">start)  </span><br><span class="line">  start;;  </span><br><span class="line">stop)  </span><br><span class="line">  stop;;  </span><br><span class="line">restart)  </span><br><span class="line">  stop  </span><br><span class="line">  sleep 1  </span><br><span class="line">  start;;  </span><br><span class="line">status)  </span><br><span class="line">  status;;  </span><br><span class="line">*)  </span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">&quot;你输入的语法格式错误&quot;</span>  </span><br><span class="line"><span class="keyword">esac</span>  </span><br></pre></td></tr></table></figure>

<p>36）自动对磁盘分区、格式化、挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 自动对磁盘分区、格式化、挂载  </span></span><br><span class="line"><span class="comment"># 对虚拟机的 vdb 磁盘进行分区格式化,使用&lt;&lt;将需要的分区指令导入给程序 fdisk  </span></span><br><span class="line"><span class="comment"># n(新建分区),p(创建主分区),1(分区编号为 1),两个空白行(两个回车,相当于将整个磁盘分一个区)  </span></span><br><span class="line"><span class="comment"># 注意:1 后面的两个回车(空白行)是必须的!  </span></span><br><span class="line">fdisk /dev/vdb &lt;&lt; <span class="string">EOF  </span></span><br><span class="line"><span class="string">n  </span></span><br><span class="line"><span class="string">p  </span></span><br><span class="line"><span class="string">1  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">wq  </span></span><br><span class="line"><span class="string">EOF</span>  </span><br><span class="line"><span class="comment">#格式化刚刚创建好的分区  </span></span><br><span class="line">mkfs.xfs   /dev/vdb1  </span><br><span class="line"><span class="comment">#创建挂载点目录  </span></span><br><span class="line"><span class="keyword">if</span> [ -e /data ]; <span class="keyword">then</span>  </span><br><span class="line"><span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">mkdir /data  </span><br><span class="line"><span class="comment">#自动挂载刚刚创建的分区,并设置开机自动挂载该分区  </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/dev/vdb1     /data    xfs    defaults        1 2&#x27;</span>  &gt;&gt; /etc/fstab  </span><br><span class="line">mount -a  </span><br></pre></td></tr></table></figure>

<p>37）自动优化 Linux 内核参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 自动优化 Linux 内核参数  </span></span><br><span class="line"><span class="comment">#脚本针对 RHEL7  </span></span><br><span class="line">cat &gt;&gt; /usr/lib/sysctl.d/00‐system.conf &lt;&lt;<span class="string">EOF  </span></span><br><span class="line"><span class="string">fs.file‐max=65535  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_timestamps = 0  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_synack_retries = 5  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_syn_retries = 5  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_recycle = 1  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_reuse = 1  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_fin_timeout = 30  </span></span><br><span class="line"><span class="string">#net.ipv4.tcp_keepalive_time = 120  </span></span><br><span class="line"><span class="string">net.ipv4.ip_local_port_range = 1024  65535  </span></span><br><span class="line"><span class="string">kernel.shmall = 2097152  </span></span><br><span class="line"><span class="string">kernel.shmmax = 2147483648  </span></span><br><span class="line"><span class="string">kernel.shmmni = 4096  </span></span><br><span class="line"><span class="string">kernel.sem = 5010 641280 5010 128  </span></span><br><span class="line"><span class="string">net.core.wmem_default=262144  </span></span><br><span class="line"><span class="string">net.core.wmem_max=262144  </span></span><br><span class="line"><span class="string">net.core.rmem_default=4194304  </span></span><br><span class="line"><span class="string">net.core.rmem_max=4194304  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_fin_timeout = 10  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_time = 30  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_window_scaling = 0  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_sack = 0  </span></span><br><span class="line"><span class="string">EOF</span>  </span><br><span class="line">  </span><br><span class="line">sysctl –p  </span><br></pre></td></tr></table></figure>

<p>38）切割 Nginx 日志文件(防止单个文件过大,后期处理很困难)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mkdir  /data/scripts  </span></span><br><span class="line"><span class="comment">#vim   /data/scripts/nginx_log.sh    </span></span><br><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 切割 Nginx 日志文件(防止单个文件过大,后期处理很困难)   </span></span><br><span class="line">logs_path=<span class="string">&quot;/usr/local/nginx/logs/&quot;</span>  </span><br><span class="line">mv <span class="variable">$&#123;logs_path&#125;</span>access.log <span class="variable">$&#123;logs_path&#125;</span>access_$(date -d <span class="string">&quot;yesterday&quot;</span> +<span class="string">&quot;%Y%m%d&quot;</span>).<span class="built_in">log</span>  </span><br><span class="line"><span class="built_in">kill</span> -USR1  `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># chmod +x  /data/scripts/nginx_log.sh  </span></span><br><span class="line"><span class="comment"># crontab  ‐e                    #脚本写完后,将脚本放入计划任务每天执行一次脚本  </span></span><br><span class="line">0  1  *  *   *   /data/scripts/nginx_log.sh  </span><br></pre></td></tr></table></figure>

<p>39）检测 MySQL 数据库连接数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 检测 MySQL 数据库连接数量   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 本脚本每 2 秒检测一次 MySQL 并发连接数,可以将本脚本设置为开机启动脚本,或在特定时间段执行  </span></span><br><span class="line"><span class="comment"># 以满足对 MySQL 数据库的监控需求,查看 MySQL 连接是否正常  </span></span><br><span class="line"><span class="comment"># 本案例中的用户名和密码需要根据实际情况修改后方可使用  </span></span><br><span class="line">log_file=/var/<span class="built_in">log</span>/mysql_count.log  </span><br><span class="line">user=root  </span><br><span class="line">passwd=123456  </span><br><span class="line"><span class="keyword">while</span> :  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">    sleep 2  </span><br><span class="line">    count=`mysqladmin  -u  <span class="string">&quot;<span class="variable">$user</span>&quot;</span>  -p  <span class="string">&quot;<span class="variable">$passwd</span>&quot;</span>   status |  awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;`date +%Y‐%m‐%d` 并发连接数为:<span class="variable">$count</span>&quot;</span> &gt;&gt; <span class="variable">$log_file</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>40）根据 md5 校验码,检测文件是否被修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 根据 md5 校验码,检测文件是否被修改   </span></span><br><span class="line"><span class="comment"># 本示例脚本检测的是/etc 目录下所有的 conf 结尾的文件,根据实际情况,您可以修改为其他目录或文件  </span></span><br><span class="line"><span class="comment"># 本脚本在目标数据没有被修改时执行一次,当怀疑数据被人篡改,再执行一次  </span></span><br><span class="line"><span class="comment"># 将两次执行的结果做对比,MD5 码发生改变的文件,就是被人篡改的文件  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(ls /etc/*.conf)  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  md5sum <span class="string">&quot;<span class="variable">$i</span>&quot;</span> &gt;&gt; /var/<span class="built_in">log</span>/conf_file.log  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>41）检测 MySQL 服务是否存活</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 检测 MySQL 服务是否存活   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># host 为你需要检测的 MySQL 主机的 IP 地址,user 为 MySQL 账户名,passwd 为密码  </span></span><br><span class="line"><span class="comment"># 这些信息需要根据实际情况修改后方可使用  </span></span><br><span class="line">host=192.168.51.198  </span><br><span class="line">user=root  </span><br><span class="line">passwd=123456  </span><br><span class="line">mysqladmin -h <span class="string">&#x27;$host&#x27;</span> -u <span class="string">&#x27;$user&#x27;</span> -p<span class="string">&#x27;$passwd&#x27;</span> ping &amp;&gt;/dev/null  </span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]  </span><br><span class="line"><span class="keyword">then</span>  </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;MySQL is UP&quot;</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;MySQL is down&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br></pre></td></tr></table></figure>

<p>42）备份 MySQL 的 shell 脚本(mysqldump版本)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 备份 MySQL 的 shell 脚本(mysqldump版本)   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 定义变量 user(数据库用户名),passwd(数据库密码),date(备份的时间标签)  </span></span><br><span class="line"><span class="comment"># dbname(需要备份的数据库名称,根据实际需求需要修改该变量的值,默认备份 mysql 数据库)  </span></span><br><span class="line">  </span><br><span class="line">user=root  </span><br><span class="line">passwd=123456  </span><br><span class="line">dbname=mysql  </span><br><span class="line">date=$(date +%Y%m%d)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 测试备份目录是否存在,不存在则自动创建该目录  </span></span><br><span class="line">[ ! -d /mysqlbackup ] &amp;&amp; mkdir /mysqlbackup  </span><br><span class="line"><span class="comment"># 使用 mysqldump 命令备份数据库  </span></span><br><span class="line">mysqldump -u <span class="string">&quot;<span class="variable">$user</span>&quot;</span> -p <span class="string">&quot;<span class="variable">$passwd</span>&quot;</span> <span class="string">&quot;<span class="variable">$dbname</span>&quot;</span> &gt; /mysqlbackup/<span class="string">&quot;<span class="variable">$dbname</span>&quot;</span>-<span class="variable">$&#123;date&#125;</span>.sql  </span><br></pre></td></tr></table></figure>

<p>43）将文件中所有的小写字母转换为大写字母</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将文件中所有的小写字母转换为大写字母   </span></span><br><span class="line"><span class="comment"># $1是位置参数,是你需要转换大小写字母的文件名称  </span></span><br><span class="line"><span class="comment"># 执行脚本,给定一个文件名作为参数,脚本就会将该文件中所有的小写字母转换为大写字母  </span></span><br><span class="line">tr <span class="string">&quot;[a‐z]&quot;</span> <span class="string">&quot;[A‐Z]&quot;</span> &lt; <span class="variable">$1</span>  </span><br></pre></td></tr></table></figure>

<p>44）非交互自动生成 SSH 密钥文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 非交互自动生成 SSH 密钥文件   </span></span><br><span class="line"><span class="comment"># ‐t 指定 SSH 密钥的算法为 RSA 算法;‐N 设置密钥的密码为空;‐f 指定生成的密钥文件&gt;存放在哪里  </span></span><br><span class="line">rm  -rf  ~/.ssh/&#123;known_hosts,id_rsa*&#125;  </span><br><span class="line">ssh‐keygen -t RSA -N <span class="string">&#x27;&#x27;</span> -f ~/.ssh/id_rsa  </span><br></pre></td></tr></table></figure>

<p>45）检查特定的软件包是否已经安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 检查特定的软件包是否已经安装   </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ];<span class="keyword">then</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;你需要制定一个软件包名称作为脚本参数&quot;</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;用法:<span class="variable">$0</span> 软件包名称 ...&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="comment"># $@提取所有的位置变量的值,相当于$*  </span></span><br><span class="line"><span class="keyword">for</span> package <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">    <span class="keyword">if</span> rpm -q <span class="variable">$&#123;package&#125;</span> &amp;&gt;/dev/null ;<span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;package&#125;</span>\033[32m 已经安装\033[0m&quot;</span>  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;package&#125;</span>\033[34;1m 未安装\033[0m&quot;</span>  </span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>46）监控 HTTP 服务器的状态(测试返回码)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 监控 HTTP 服务器的状态(测试返回码)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置变量,url为你需要检测的目标网站的网址(IP 或域名),比如百度  </span></span><br><span class="line">url=http://http://183.232.231.172/index.html  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 定义函数 check_http:  </span></span><br><span class="line"><span class="comment"># 使用 curl 命令检查 http 服务器的状态  </span></span><br><span class="line"><span class="comment"># ‐m 设置curl不管访问成功或失败,最大消耗的时间为 5 秒,5 秒连接服务为相应则视为无法连接  </span></span><br><span class="line"><span class="comment"># ‐s 设置静默连接,不显示连接时的连接速度、时间消耗等信息  </span></span><br><span class="line"><span class="comment"># ‐o 将 curl 下载的页面内容导出到/dev/null(默认会在屏幕显示页面内容)  </span></span><br><span class="line"><span class="comment"># ‐w 设置curl命令需要显示的内容%&#123;http_code&#125;,指定curl返回服务器的状态码  </span></span><br><span class="line">check_http()  </span><br><span class="line">&#123;  </span><br><span class="line">        status_code=$(curl -m 5 -s -o /dev/null -w %&#123;http_code&#125; <span class="variable">$url</span>)  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">while</span> :  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">        check_http  </span><br><span class="line">        date=$(date +%Y%m%d‐%H:%M:%S)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 生成报警邮件的内容  </span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;当前时间为:<span class="variable">$date</span>  </span></span><br><span class="line"><span class="string">        <span class="variable">$url</span> 服务器异常,状态码为<span class="variable">$&#123;status_code&#125;</span>.  </span></span><br><span class="line"><span class="string">        请尽快排查异常.&quot;</span> &gt; /tmp/http$$.pid  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 指定测试服务器状态的函数,并根据返回码决定是发送邮件报警还是将正常信息写入日志  </span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$status_code</span> -ne 200 ];<span class="keyword">then</span>  </span><br><span class="line">                mail -s Warning root &lt; /tmp/http$$.pid  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$url</span> 连接正常&quot;</span> &gt;&gt; /var/<span class="built_in">log</span>/http.log  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">        sleep 5  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>47）自动添加防火墙规则,开启某些服务或端口(适用于 RHEL7)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 自动添加防火墙规则,开启某些服务或端口(适用于 RHEL7)  </span></span><br><span class="line"><span class="comment">#   </span></span><br><span class="line"><span class="comment"># 设置变量定义需要添加到防火墙规则的服务和端口号  </span></span><br><span class="line"><span class="comment"># 使用 firewall‐cmd ‐‐get‐services 可以查看 firewall 支持哪些服务  </span></span><br><span class="line">service=<span class="string">&quot;nfs http ssh&quot;</span>  </span><br><span class="line">port=<span class="string">&quot;80 22 8080&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 循环将每个服务添加到防火墙规则中  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$service</span>  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Adding <span class="variable">$i</span> service to firewall&quot;</span>  </span><br><span class="line">    firewall‐cmd  --add-service=<span class="variable">$&#123;i&#125;</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#循环将每个端口添加到防火墙规则中  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$port</span>  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Adding <span class="variable">$i</span> Port to firewall&quot;</span>  </span><br><span class="line">    firewall‐cmd --add-port=<span class="variable">$&#123;i&#125;</span>/tcp  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="comment">#将以上设置的临时防火墙规则,转换为永久有效的规则(确保重启后有效)  </span></span><br><span class="line">firewall‐cmd  --runtime-to-permanent  </span><br></pre></td></tr></table></figure>

<p>48）使用脚本自动创建逻辑卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用脚本自动创建逻辑卷   </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 清屏,显示警告信息,创建将磁盘转换为逻辑卷会删除数据  </span></span><br><span class="line">clear  </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[32m           !!!!!!警告(Warning)!!!!!!\033[0m&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;+++++++++++++++++++++++++++++++++++++++++++++++++&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;脚本会将整个磁盘转换为 PV,并删除磁盘上所有数据!!!&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This Script will destroy all data on the Disk&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;+++++++++++++++++++++++++++++++++++++++++++++++++&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span>  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请问是否继续 y/n?:&quot;</span> sure  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 测试用户输入的是否为 y,如果不是则退出脚本  </span></span><br><span class="line">[ <span class="variable">$sure</span> != y ] &amp;&amp; <span class="built_in">exit</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 提示用户输入相关参数(磁盘、卷组名称等数据),并测试用户是否输入了这些值,如果没有输入,则脚本退出  </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入磁盘名称,如/dev/vdb:&quot;</span> disk  </span><br><span class="line">[ -z <span class="variable">$disk</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;没有输入磁盘名称&quot;</span> &amp;&amp; <span class="built_in">exit</span>  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入卷组名称:&quot;</span> vg_name  </span><br><span class="line">[ -z <span class="variable">$vg_name</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;没有输入卷组名称&quot;</span> &amp;&amp; <span class="built_in">exit</span>  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入逻辑卷名称:&quot;</span> lv_name  </span><br><span class="line">[ -z <span class="variable">$lv_name</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;没有输入逻辑卷名称&quot;</span> &amp;&amp; <span class="built_in">exit</span>  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入逻辑卷大小:&quot;</span> lv_size  </span><br><span class="line">[ -z <span class="variable">$lv_size</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;没有输入逻辑卷大小&quot;</span> &amp;&amp; <span class="built_in">exit</span>  </span><br><span class="line"><span class="comment"># 使用命令创建逻辑卷  </span></span><br><span class="line">pvcreate <span class="variable">$disk</span>  </span><br><span class="line">vgcreate <span class="variable">$vg_name</span> <span class="variable">$disk</span>  </span><br><span class="line">lvcreate -L <span class="variable">$&#123;lv_size&#125;</span>M -n <span class="variable">$&#123;lv_name&#125;</span>  <span class="variable">$&#123;vg_name&#125;</span>  </span><br></pre></td></tr></table></figure>

<p>49）显示 CPU 厂商信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示 CPU 厂商信息   </span></span><br><span class="line">awk <span class="string">&#x27;/vendor_id/&#123;print $3&#125;&#x27;</span> /proc/cpuinfo | uniq  </span><br></pre></td></tr></table></figure>

<p>50）删除某个目录下大小为 0 的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 删除某个目录下大小为 0 的文件  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#/var/www/html 为测试目录,脚本会清空该目录下所有 0 字节的文件  </span></span><br><span class="line">dir=<span class="string">&quot;/var/www/html&quot;</span>  </span><br><span class="line">find <span class="variable">$dir</span> -<span class="built_in">type</span> f -size 0 -<span class="built_in">exec</span> rm -rf &#123;&#125; \;  </span><br></pre></td></tr></table></figure>

<p>51）查找 Linux 系统中的僵尸进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 查找 Linux 系统中的僵尸进程  </span></span><br><span class="line"><span class="comment"># awk 判断 ps 命令输出的第 8 列为 Z 是,显示该进程的 PID 和进程命令  </span></span><br><span class="line">ps aux | awk <span class="string">&#x27;&#123;if($8 == &quot;Z&quot;)&#123;print $2,$11&#125;&#125;&#x27;</span>  </span><br></pre></td></tr></table></figure>

<p>52）提示用户输入年份后判断该年是否为闰年</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 提示用户输入年份后判断该年是否为闰年  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 能被4整除并且并不能被100整除的年份是闰年  </span></span><br><span class="line"><span class="comment"># 能被400整除的年份也是闰年  </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个年份:&quot;</span> year  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$year</span>&quot;</span> = <span class="string">&quot;&quot;</span> ];<span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;没有输入年份&quot;</span>  </span><br><span class="line">    <span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="comment">#使用正则测试变量 year 中是否包含大小写字母  </span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$year</span>&quot;</span> =~ [a‐Z] ]];<span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;你输入的不是数字&quot;</span>  </span><br><span class="line">    <span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="comment"># 判断是否为闰年  </span></span><br><span class="line"><span class="keyword">if</span> [ $[year % 4] -eq 0 ] &amp;&amp; [ $[year % 100] -ne 0 ];<span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$year</span>年是闰年&quot;</span>    </span><br><span class="line"><span class="keyword">elif</span> [ $[year % 400] -eq 0 ];<span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$year</span>年是闰年&quot;</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$year</span>年不是闰年&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br></pre></td></tr></table></figure>

<p>53）生成随机密码(urandom 版本)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 生成随机密码(urandom 版本)   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># /dev/urandom 文件是 Linux 内置的随机设备文件  </span></span><br><span class="line"><span class="comment"># cat /dev/urandom 可以看看里面的内容,ctrl+c 退出查看  </span></span><br><span class="line"><span class="comment"># 查看该文件内容后,发现内容有些太随机,包括很多特殊符号,我们需要的密码不希望使用这些符号  </span></span><br><span class="line"><span class="comment"># tr ‐dc &#x27;_A‐Za‐z0‐9&#x27; &lt; /dev/urandom  </span></span><br><span class="line"><span class="comment"># 该命令可以将随机文件中其他的字符删除,仅保留大小写字母,数字,下划线,但是内容还是太多  </span></span><br><span class="line"><span class="comment"># 我们可以继续将优化好的内容通过管道传递给 head 命令,在大量数据中仅显示头 10 个字节  </span></span><br><span class="line"><span class="comment"># 注意 A 前面有个下划线  </span></span><br><span class="line">tr -dc <span class="string">&#x27;_A‐Za‐z0‐9&#x27;</span> &lt;/dev/urandom | head -c 10  </span><br></pre></td></tr></table></figure>

<p>54）生成随机密码(字串截取版本)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 生成随机密码(字串截取版本)   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置变量 key,存储密码的所有可能性(密码库),如果还需要其他字符请自行添加其他密码字符  </span></span><br><span class="line"><span class="comment"># 使用$#统计密码库的长度  </span></span><br><span class="line">key=<span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>  </span><br><span class="line">num=<span class="variable">$&#123;#key&#125;</span>  </span><br><span class="line"><span class="comment"># 设置初始密码为空  </span></span><br><span class="line">pass=<span class="string">&#x27;&#x27;</span>  </span><br><span class="line"><span class="comment"># 循环 8 次,生成随机密码  </span></span><br><span class="line"><span class="comment"># 每次都是随机数对密码库的长度取余,确保提取的密码字符不超过密码库的长度  </span></span><br><span class="line"><span class="comment"># 每次循环提取一位随机密码,并将该随机密码追加到 pass 变量的最后  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..8&#125;  </span><br><span class="line"><span class="keyword">do</span>    </span><br><span class="line">  index=$[RANDOM%num]  </span><br><span class="line">  pass=<span class="variable">$pass</span><span class="variable">$&#123;key:$index:1&#125;</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pass</span>  </span><br></pre></td></tr></table></figure>

<p>55）生成随机密码(UUID 版本,16 进制密码)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 生成随机密码(UUID 版本,16 进制密码)   </span></span><br><span class="line">uuidgen  </span><br></pre></td></tr></table></figure>

<p>56）生成随机密码(进程 ID 版本,数字密码)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 生成随机密码(进程 ID 版本,数字密码)  </span></span><br><span class="line"><span class="built_in">echo</span> $$  </span><br></pre></td></tr></table></figure>

<p>57）测试用户名与密码是否正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 测试用户名与密码是否正确  </span></span><br><span class="line"><span class="comment">#用户名为 tom 并且密码为 123456,则提示登录成功,否则提示登录失败  </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入用户名:&quot;</span>  user  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入密码:&quot;</span>    pass  </span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$user</span>&quot;</span> == <span class="string">&#x27;tom&#x27;</span> -a <span class="string">&quot;<span class="variable">$pass</span>&quot;</span> == <span class="string">&#x27;123456&#x27;</span> ];<span class="keyword">then</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Login successful&quot;</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Login Failed&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br></pre></td></tr></table></figure>

<p>58）循环测试用户名与密码是否正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 循环测试用户名与密码是否正确   </span></span><br><span class="line"><span class="comment"># 循环测试用户的账户名和密码,最大测试 3 次,输入正确提示登录成功,否则提示登录失败  </span></span><br><span class="line"><span class="comment"># 用户名为 tom 并且密码为 123456    </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..3&#125;  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">&quot;请输入用户名:&quot;</span> user  </span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">&quot;请输入密码:&quot;</span>   pass  </span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$user</span>&quot;</span> == <span class="string">&#x27;tom&#x27;</span> -a <span class="string">&quot;<span class="variable">$pass</span>&quot;</span> == <span class="string">&#x27;123456&#x27;</span> ];<span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Login successful&quot;</span>  </span><br><span class="line">     <span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Login Failed&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>59）Shell 脚本的 fork 炸弹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Shell 脚本的 fork 炸弹   </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 快速消耗计算机资源,致使计算机死机  </span></span><br><span class="line"><span class="comment"># 定义函数名为.(点), 函数中递归调用自己并放入后台执行  </span></span><br><span class="line">.() &#123; .|.&amp; &#125;;.  </span><br></pre></td></tr></table></figure>

<p>60）批量下载有序文件(pdf、图片、视频等等)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 批量下载有序文件(pdf、图片、视频等等)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 本脚本准备有序的网络资料进行批量下载操作(如 01.jpg,02.jpg,03.jpg)  </span></span><br><span class="line"><span class="comment"># 设置资源来源的域名连接  </span></span><br><span class="line">url=<span class="string">&quot;http://www.baidu.com/&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;开始下载...&quot;</span>  </span><br><span class="line">sleep 2  </span><br><span class="line"><span class="built_in">type</span>=jpg  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 100`  </span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;正在下载<span class="variable">$i</span>.<span class="variable">$type</span>&quot;</span>  </span><br><span class="line">  curl <span class="variable">$url</span>/<span class="variable">$i</span>.<span class="variable">$type</span> -o /tmp/<span class="variable">$&#123;i&#125;</span><span class="variable">$type</span>  </span><br><span class="line">     sleep 1  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="comment">#curl 使用-o 选项指定下载文件另存到哪里.  </span></span><br></pre></td></tr></table></figure>

<p>61）显示当前计算机中所有账户的用户名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"> <span class="comment"># 显示当前计算机中所有账户的用户名称  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 下面使用3种不同的方式列出计算机中所有账户的用户名  </span></span><br><span class="line"><span class="comment"># 指定以:为分隔符,打印/etc/passwd 文件的第 1 列  </span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /etc/passwd  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 指定以:为分隔符,打印/etc/passwd 文件的第 1 列  </span></span><br><span class="line">cut -d: -f1 /etc/passwd  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用 sed 的替换功能,将/etc/passwd 文件中:后面的所有内容替换为空(仅显示用户名)  </span></span><br><span class="line">sed <span class="string">&#x27;s/:.*//&#x27;</span> /etc/passwd  </span><br></pre></td></tr></table></figure>

<p>62）制定目录路径,脚本自动将该目录使用 tar 命令打包备份到/data目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 制定目录路径,脚本自动将该目录使用 tar 命令打包备份到/data目录   </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">[ ! -d /data ] &amp;&amp; mkdir /data  </span><br><span class="line">[ -z <span class="variable">$1</span> ] &amp;&amp; <span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span> ];<span class="keyword">then</span>  </span><br><span class="line">  tar -czf /data/<span class="variable">$1</span>.-`date +%Y%m%d`.tar.gz <span class="variable">$1</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;该目录不存在&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br></pre></td></tr></table></figure>

<p>63）显示进度条(回旋镖版)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示进度条(回旋镖版)  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">while</span> :  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  clear  </span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..20&#125;  </span><br><span class="line">  <span class="keyword">do</span>  </span><br><span class="line">    <span class="built_in">echo</span> ‐e <span class="string">&quot;\033[3;<span class="variable">$&#123;i&#125;</span>H*&quot;</span>  </span><br><span class="line">    sleep 0.1  </span><br><span class="line">    <span class="keyword">done</span>  </span><br><span class="line">    clear  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> &#123;20..1&#125;  </span><br><span class="line">    <span class="keyword">do</span>  </span><br><span class="line">    <span class="built_in">echo</span> ‐e <span class="string">&quot;\033[3;<span class="variable">$&#123;i&#125;</span>H*&quot;</span>  </span><br><span class="line">    sleep 0.1  </span><br><span class="line">    <span class="keyword">done</span>  </span><br><span class="line">    clear  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>64）安装 LAMP 环境(yum 版本)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 安装 LAMP 环境(yum 版本)   </span></span><br><span class="line"><span class="comment"># 本脚本适用于 RHEL7(RHEL6 中数据库为 mysql)  </span></span><br><span class="line">yum makecache &amp;&gt;/dev/null  </span><br><span class="line">num=$(yum repolist | awk <span class="string">&#x27;/repolist/&#123;print $2&#125;&#x27;</span> | sed <span class="string">&#x27;s/,//&#x27;</span>)  </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -lt 0 ];<span class="keyword">then</span>  </span><br><span class="line">  yum -y install httpd  </span><br><span class="line">  yum -y install mariadb mariadb-server mariadb-devel  </span><br><span class="line">  yum -y install php php-mysql  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;未配置 yum 源...&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br></pre></td></tr></table></figure>

<p>65）循环关闭局域网中所有主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 循环关闭局域网中所有主机   </span></span><br><span class="line"><span class="comment"># 假设本机为 192.168.4.100,编写脚本关闭除自己外的其他所有主机  </span></span><br><span class="line"><span class="comment"># 脚本执行,需要提前给所有其他主机传递 ssh 密钥,满足无密码连接  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  [ <span class="variable">$i</span> -eq 100 ] &amp;&amp; <span class="built_in">continue</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;正在关闭 192.168.4.<span class="variable">$i</span>...&quot;</span>  </span><br><span class="line">  ssh 192.168.4.<span class="variable">$i</span> poweroff  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>66）获取本机 MAC 地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取本机 MAC 地址  </span></span><br><span class="line">ip a s | awk <span class="string">&#x27;BEGIN&#123;print  &quot; 本 机 MAC 地 址 信 息 如 下 :&quot;&#125;/^[0‐9]/&#123;print $2;getline;if($0~/link\/ether/)&#123;print $2&#125;&#125;&#x27;</span> | grep -v lo:  </span><br><span class="line"><span class="comment"># awk 读取 ip 命令的输出,输出结果中如果有以数字开始的行,先显示该行的地 2 列(网卡名称),  </span></span><br><span class="line"><span class="comment"># 接着使用 getline 再读取它的下一行数据,判断是否包含 link/ether  </span></span><br><span class="line"><span class="comment"># 如果保护该关键词,就显示该行的第 2 列(MAC 地址)  </span></span><br><span class="line"><span class="comment"># lo 回环设备没有 MAC,因此将其屏蔽,不显示  </span></span><br></pre></td></tr></table></figure>

<p>67）自动配置 rsynd 服务器的配置文件 rsyncd.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 自动配置 rsynd 服务器的配置文件 rsyncd.conf  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># See rsyncd.conf man page for more options.  </span></span><br><span class="line">  </span><br><span class="line">[ ! -d /home/ftp ] &amp;&amp; mkdir /home/ftp  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;uid = nobody  </span></span><br><span class="line"><span class="string">gid = nobody  </span></span><br><span class="line"><span class="string">use chroot = yes  </span></span><br><span class="line"><span class="string">max connections = 4  </span></span><br><span class="line"><span class="string">pid file = /var/run/rsyncd.pid  </span></span><br><span class="line"><span class="string">exclude = lost+found/  </span></span><br><span class="line"><span class="string">transfer logging = yes  </span></span><br><span class="line"><span class="string">timeout = 900  </span></span><br><span class="line"><span class="string">ignore nonreadable = yes  </span></span><br><span class="line"><span class="string">dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2  </span></span><br><span class="line"><span class="string">[ftp]  </span></span><br><span class="line"><span class="string">    path = /home/ftp  </span></span><br><span class="line"><span class="string">    comment = share&#x27;</span> &gt; /etc/rsyncd.conf  </span><br></pre></td></tr></table></figure>

<p>68）修改 Linux 系统的最大打开文件数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 修改 Linux 系统的最大打开文件数量   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 往/etc/security/limits.conf 文件的末尾追加两行配置参数,修改最大打开文件数量为 65536  </span></span><br><span class="line">cat &gt;&gt; /etc/security/limits.conf &lt;&lt;<span class="string">EOF  </span></span><br><span class="line"><span class="string">* soft nofile  65536  </span></span><br><span class="line"><span class="string">* hard nofile  65536  </span></span><br><span class="line"><span class="string">EOF</span>  </span><br></pre></td></tr></table></figure>

<p>69）设置 Python 支持自动命令补齐功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置 Python 支持自动命令补齐功能   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Summary:Enable tab complete for python  </span></span><br><span class="line"><span class="comment"># Description:  </span></span><br><span class="line">  </span><br><span class="line">Needs import readline and rlcompleter module  </span><br><span class="line"><span class="comment">#  </span></span><br><span class="line">import readline  </span><br><span class="line"><span class="comment">#  </span></span><br><span class="line">import rlcompleter  </span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="built_in">help</span>(rlcompleter) display detail: readline.parse_and_bind(<span class="string">&#x27;tab: complete&#x27;</span>)  </span><br><span class="line"><span class="comment">#  </span></span><br><span class="line">man python display detail: PYTHONSTARTUP variable  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>  [ ! -f /usr/bin/tab.py ];<span class="keyword">then</span>  </span><br><span class="line">  cat &gt;&gt; /usr/bin/tab.py &lt;&lt;<span class="string">EOF  </span></span><br><span class="line"><span class="string">import readline  </span></span><br><span class="line"><span class="string">import rlcompleter  </span></span><br><span class="line"><span class="string">readline.parse_and_bind(&#x27;tab: complete&#x27;)  </span></span><br><span class="line"><span class="string">EOF</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">sed  -i <span class="string">&#x27;$a export PYTHONSTARTUP=/usr/bin/tab.py&#x27;</span> /etc/profile  </span><br><span class="line"><span class="built_in">source</span> /etc/profile  </span><br></pre></td></tr></table></figure>

<p>70）自动修改计划任务配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Docker+K8s+Jenkins 主流技术全解视频资料【干货免费分享】  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 自动修改计划任务配置文件   </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入分钟信息(00‐59):&quot;</span> min  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入小时信息(00‐24):&quot;</span> hour  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入日期信息(01‐31):&quot;</span> date  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入月份信息(01‐12):&quot;</span> month  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入星期信息(00‐06):&quot;</span> weak  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入计划任务需要执行的命令或脚本:&quot;</span> program  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$min</span> <span class="variable">$hour</span> <span class="variable">$date</span> <span class="variable">$month</span> <span class="variable">$weak</span> <span class="variable">$program</span>&quot;</span> &gt;&gt; /etc/crontab  </span><br></pre></td></tr></table></figure>

<p>71）使用脚本循环创建三位数字的文本文件(111-999 的文件)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用脚本循环创建三位数字的文本文件(111-999 的文件)   </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..9&#125;  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> &#123;1..9&#125;  </span><br><span class="line">  <span class="keyword">do</span>  </span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> &#123;1..9&#125;  </span><br><span class="line">    <span class="keyword">do</span>  </span><br><span class="line">      touch /tmp/<span class="variable">$i</span><span class="variable">$j</span><span class="variable">$k</span>.txt  </span><br><span class="line">    <span class="keyword">done</span>  </span><br><span class="line">    <span class="keyword">done</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>72）找出/etc/passwd 中能登录的用户,并将对应在/etc/shadow 中第二列密码提出处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 找出/etc/passwd 中能登录的用户,并将对应在/etc/shadow 中第二列密码提出处理  </span></span><br><span class="line">  </span><br><span class="line">user=$(awk -F: <span class="string">&#x27;/bash$/&#123;print $1&#125;&#x27;</span> /etc/passwd)  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$user</span>  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  awk -F: -v x=<span class="variable">$i</span> <span class="string">&#x27;$1==x&#123;print $1,$2&#125;&#x27;</span> /etc/shadow  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>73）统计/etc/passwd 中 root 出现的次数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 统计/etc/passwd 中 root 出现的次数   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#每读取一行文件内容,即从第 1 列循环到最后 1 列,依次判断是否包含 root 关键词,如果包含则 x++  </span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;i=1;while(i&lt;=NF)&#123;if($i~/root/)&#123;x++&#125;;i++&#125;&#125; END&#123;print &quot;root 出现次数为&quot;x&#125;&#x27;</span> /etc/passwd  </span><br></pre></td></tr></table></figure>

<p>74）统计 Linux 进程相关数量信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 统计 Linux 进程相关数量信息   </span></span><br><span class="line">running=0  </span><br><span class="line">sleeping=0  </span><br><span class="line">stoped=0  </span><br><span class="line">zombie=0  </span><br><span class="line"><span class="comment"># 在 proc 目录下所有以数字开始的都是当前计算机正在运行的进程的进程 PID  </span></span><br><span class="line"><span class="comment"># 每个 PID 编号的目录下记录有该进程相关的信息  </span></span><br><span class="line"><span class="keyword">for</span> pid <span class="keyword">in</span> /proc/[1‐9]*  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  procs=$[procs+1]  </span><br><span class="line">  <span class="built_in">stat</span>=$(awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> <span class="variable">$pid</span>/<span class="built_in">stat</span>)  </span><br><span class="line"><span class="comment"># 每个 pid 目录下都有一个 stat 文件,该文件的第 3 列是该进程的状态信息  </span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$stat</span> <span class="keyword">in</span>  </span><br><span class="line">    R)  </span><br><span class="line">    running=$[running+1]  </span><br><span class="line">    ;;  </span><br><span class="line">    T)  </span><br><span class="line">    stoped=$[stoped+1]  </span><br><span class="line">    ;;  </span><br><span class="line">    S)  </span><br><span class="line">    sleeping=$[sleeping+1]  </span><br><span class="line">    ;;  </span><br><span class="line">    Z)  </span><br><span class="line">     zombie=$[zombie+1]  </span><br><span class="line">     ;;  </span><br><span class="line">    <span class="keyword">esac</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;进程统计信息如下&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;总进程数量为:<span class="variable">$procs</span>&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Running 进程数为:<span class="variable">$running</span>&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Stoped 进程数为:<span class="variable">$stoped</span>&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Sleeping 进程数为:<span class="variable">$sleeping</span>&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Zombie 进程数为:<span class="variable">$zombie</span>&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>75）从键盘读取一个论坛积分,判断论坛用户等级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 从键盘读取一个论坛积分,判断论坛用户等级  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#等级分类如下:  </span></span><br><span class="line"><span class="comment">#  大于等于 90        神功绝世  </span></span><br><span class="line"><span class="comment">#  大于等于 80,小于 90       登峰造极  </span></span><br><span class="line"><span class="comment">#  大于等于 70,小于 80       炉火纯青  </span></span><br><span class="line"><span class="comment">#  大于等于 60,小于 70       略有小成  </span></span><br><span class="line"><span class="comment">#  小于 60               初学乍练  </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入积分(0‐100):&quot;</span> JF  </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$JF</span> -ge 90 ] ; <span class="keyword">then</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$JF</span> 分,神功绝世&quot;</span>  </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$JF</span> -ge 80 ] ; <span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$JF</span> 分,登峰造极&quot;</span>  </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$JF</span> -ge 70 ] ; <span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$JF</span> 分,炉火纯青&quot;</span>  </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$JF</span> -lt 60 ] ; <span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$JF</span> 分,略有小成&quot;</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$JF</span> 分,初学乍练&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br></pre></td></tr></table></figure>

<p>76）判断用户输入的数据类型(字母、数字或其他)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 判断用户输入的数据类型(字母、数字或其他)   </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个字符:&quot;</span> KEY  </span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$KEY</span>&quot;</span> <span class="keyword">in</span>  </span><br><span class="line">  [a‐z]|[A‐Z])  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;字母&quot;</span>   </span><br><span class="line">    ;;  </span><br><span class="line">  [0‐9])  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;数字&quot;</span>   </span><br><span class="line">    ;;  </span><br><span class="line">  *)  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;空格、功能键或其他控制字符&quot;</span>  </span><br><span class="line"><span class="keyword">esac</span>  </span><br></pre></td></tr></table></figure>

<p>77）显示进度条(数字版)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示进度条(数字版)   </span></span><br><span class="line"><span class="comment"># echo 使用‐e 选项后,在打印参数中可以指定 H,设置需要打印内容的 x,y 轴的定位坐标  </span></span><br><span class="line"><span class="comment"># 设置需要打印内容在第几行,第几列  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[6;8H[&quot;</span>  </span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[6;9H<span class="variable">$i</span>%&quot;</span>  </span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[6;13H]&quot;</span>  </span><br><span class="line">    sleep 0.1  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>78）打印斐波那契数列</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印斐波那契数列(该数列的特点是后一个数字,永远都是前 2 个数字之和)   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 斐波那契数列后一个数字永远是前 2 个数字之和  </span></span><br><span class="line"><span class="comment"># 如:0  1  1  2  3  5  8  13 ... ...  </span></span><br><span class="line">list=(0 1)  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 2 11`  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  list[<span class="variable">$i</span>]=`expr <span class="variable">$&#123;list[‐1]&#125;</span> + <span class="variable">$&#123;list[‐2]&#125;</span>`  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list[@]&#125;</span>  </span><br></pre></td></tr></table></figure>

<p>79）判断用户输入的是 Yes 或 NO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 判断用户输入的是 Yes 或 NO   </span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">read</span> -p  <span class="string">&quot;Are you sure?[y/n]:&quot;</span>  sure  </span><br><span class="line"><span class="keyword">case</span>  <span class="variable">$sure</span>  <span class="keyword">in</span>  </span><br><span class="line">  y|Y|Yes|YES)    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;you enter <span class="variable">$a</span>&quot;</span>  </span><br><span class="line">    ;;  </span><br><span class="line">    n|N|NO|no)  </span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;you enter <span class="variable">$a</span>&quot;</span>  </span><br><span class="line">     ;;  </span><br><span class="line">    *)  </span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;error&quot;</span>;;  </span><br><span class="line"><span class="keyword">esac</span>  </span><br></pre></td></tr></table></figure>

<p>80）显示本机 Linux 系统上所有开放的端口列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示本机 Linux 系统上所有开放的端口列表   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 从端口列表中观测有没有没用的端口,有的话可以将该端口对应的服务关闭,防止意外的攻击可能性  </span></span><br><span class="line">ss -nutlp | awk <span class="string">&#x27;&#123;print $1,$5&#125;&#x27;</span> | awk -F<span class="string">&quot;[: ]&quot;</span> <span class="string">&#x27;&#123;print &quot;协议:&quot;$1,&quot;端口号:&quot;$NF&#125;&#x27;</span> | grep <span class="string">&quot;[0‐9]&quot;</span> | uniq  </span><br></pre></td></tr></table></figure>

<p>81）将 Linux 系统中 UID 大于等于 1000 的普通用户都删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将 Linux 系统中 UID 大于等于 1000 的普通用户都删除   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 先用 awk 提取所有 uid 大于等于 1000 的普通用户名称  </span></span><br><span class="line"><span class="comment"># 再使用 for 循环逐个将每个用户删除即可  </span></span><br><span class="line">user=$(awk -F: <span class="string">&#x27;$3&gt;=1000&#123;print $1&#125;&#x27;</span> /etc/passwd)  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$user</span>  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">     userdel -r <span class="variable">$i</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>82）使用脚本开启关闭虚拟机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用脚本开启关闭虚拟机   </span></span><br><span class="line"><span class="comment"># 脚本通过调用virsh命令实现对虚拟机的管理,如果没有该命令,需要安装 libvirt‐client 软件包  </span></span><br><span class="line"><span class="comment"># $1是脚本的第1个参数,$2是脚本的第2个参数  </span></span><br><span class="line"><span class="comment"># 第1个参数是你希望对虚拟机进行的操作指令,第2个参数是虚拟机名称  </span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span>  </span><br><span class="line">  list)  </span><br><span class="line">    virsh list --all  </span><br><span class="line">    ;;  </span><br><span class="line">  start)  </span><br><span class="line">    virsh start <span class="variable">$2</span>  </span><br><span class="line">    ;;  </span><br><span class="line">  stop)  </span><br><span class="line">    virsh destroy <span class="variable">$2</span>  </span><br><span class="line">    ;;  </span><br><span class="line">  <span class="built_in">enable</span>)  </span><br><span class="line">    virsh autostart <span class="variable">$2</span>  </span><br><span class="line">    ;;  </span><br><span class="line">  <span class="built_in">disable</span>)  </span><br><span class="line">    virsh autostart --<span class="built_in">disable</span> <span class="variable">$2</span>  </span><br><span class="line">    ;;  </span><br><span class="line">  *)  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage:<span class="variable">$0</span> list&quot;</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage:<span class="variable">$0</span> [start|stop|enable|disable]  VM_name&quot;</span>  </span><br><span class="line">    cat &lt;&lt; <span class="string">EOF  </span></span><br><span class="line"><span class="string">    #list      显示虚拟机列表  </span></span><br><span class="line"><span class="string">    #start     启动虚拟机  </span></span><br><span class="line"><span class="string">    #stop      关闭虚拟机  </span></span><br><span class="line"><span class="string">    #enable    设置虚拟机为开机自启  </span></span><br><span class="line"><span class="string">    #disable   关闭虚拟机开机自启功能  </span></span><br><span class="line"><span class="string">    EOF</span>  </span><br><span class="line">    ;;  </span><br><span class="line"><span class="keyword">esac</span>  </span><br></pre></td></tr></table></figure>

<p>83）调整虚拟机内存参数的 shell 脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 调整虚拟机内存参数的 shell 脚本   </span></span><br><span class="line"><span class="comment"># 脚本通过调用 virsh 命令实现对虚拟机的管理,如果没有该命令,需要安装 libvirt‐client 软件包  </span></span><br><span class="line">cat &lt;&lt; <span class="string">EOF  </span></span><br><span class="line"><span class="string">1.调整虚拟机最大内存数值  </span></span><br><span class="line"><span class="string">2.调整实际分配给虚拟机的内存数值  </span></span><br><span class="line"><span class="string">EOF</span>  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请选择[1‐2]:&quot;</span> select  </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$select</span> <span class="keyword">in</span>  </span><br><span class="line">  1)  </span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">&quot;请输入虚拟机名称&quot;</span> name  </span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">&quot;请输入最大内存数值(单位:k):&quot;</span> size  </span><br><span class="line">      virsh setmaxmem <span class="variable">$name</span> --size <span class="variable">$size</span> --config  </span><br><span class="line">      ;;  </span><br><span class="line">  2)  </span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">&quot;请输入虚拟机名称&quot;</span> name  </span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">&quot;请输入实际分配内存数值(单位:k):&quot;</span> size  </span><br><span class="line">      virsh setmem <span class="variable">$name</span> <span class="variable">$size</span>  </span><br><span class="line">      ;;  </span><br><span class="line">  *)  </span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Error&quot;</span>  </span><br><span class="line">      ;;  </span><br><span class="line"><span class="keyword">esac</span>  </span><br></pre></td></tr></table></figure>

<p>84）查看 KVM 虚拟机中的网卡信息(不需要进入启动或进入虚拟机)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 查看 KVM 虚拟机中的网卡信息(不需要进入启动或进入虚拟机)   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 该脚本使用 guestmount 工具,可以将虚拟机的磁盘系统挂载到真实机文件系统中  </span></span><br><span class="line"><span class="comment"># Centos7.2 中安装 libguestfs‐tools‐c 可以获得 guestmount 工具  </span></span><br><span class="line"><span class="comment"># 虚拟机可以启动或者不启动都不影响该脚本的使用  </span></span><br><span class="line"><span class="comment"># 将虚拟机磁盘文件挂载到文件系统后,就可以直接读取磁盘文件中的网卡配置文件中的数据  </span></span><br><span class="line">clear  </span><br><span class="line">mountpoint=<span class="string">&quot;/media/virtimage&quot;</span>  </span><br><span class="line">[ ! -d <span class="variable">$mountpoint</span> ] &amp;&amp; mkdir <span class="variable">$mountpoint</span>  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入虚拟机名称:&quot;</span> name  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请稍后...&quot;</span>  </span><br><span class="line"><span class="comment"># 如果有设备挂载到该挂载点,则先 umount 卸载  </span></span><br><span class="line"><span class="keyword">if</span> mount | grep -q <span class="string">&quot;<span class="variable">$mountpoint</span>&quot;</span> ;<span class="keyword">then</span>  </span><br><span class="line">  umount <span class="variable">$mountpoint</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="comment"># 只读的方式,将虚拟机的磁盘文件挂载到特定的目录下,这里是/media/virtimage 目录  </span></span><br><span class="line">guestmount -r -d <span class="variable">$name</span> -i <span class="variable">$mountpoint</span>  </span><br><span class="line"><span class="built_in">echo</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[32m<span class="variable">$name</span> 虚拟机中网卡列表如下:\033[0m&quot;</span>  </span><br><span class="line">dev=$(ls /media/virtimage/etc/sysconfig/network‐scripts/ifcfg-* |awk -F<span class="string">&quot;[/‐]&quot;</span> <span class="string">&#x27;&#123;print $9&#125;&#x27;</span>)  </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$dev</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span>  </span><br><span class="line"><span class="built_in">echo</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;+++++++++++++++++++++++++++++++++++++++++++&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[32m 网卡 IP 地址信息如下:\033[0m&quot;</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$dev</span>  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$i</span>:&quot;</span>  </span><br><span class="line">  grep -q <span class="string">&quot;IPADDR&quot;</span> /media/virtimage/etc/sysconfig/network‐scripts/ifcfg-<span class="variable">$i</span> || <span class="built_in">echo</span> <span class="string">&quot;未配置 IP地址&quot;</span>  </span><br><span class="line">  awk -F= <span class="string">&#x27;/IPADDR/&#123;print $2&#125;&#x27;</span> /media/virtimage/etc/sysconfig/network-scripts/ifcfg-<span class="variable">$i</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;+++++++++++++++++++++++++++++++++++++++++++&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>85）不登陆虚拟机,修改虚拟机网卡 IP 地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 不登陆虚拟机,修改虚拟机网卡 IP 地址   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 该脚本使用 guestmount 工具,Centos7.2 中安装 libguestfs‐tools‐c 可以获得 guestmount 工具  </span></span><br><span class="line"><span class="comment"># 脚本在不登陆虚拟机的情况下,修改虚拟机的 IP 地址信息  </span></span><br><span class="line"><span class="comment"># 在某些环境下,虚拟机没有 IP 或 IP 地址与真实主机不在一个网段  </span></span><br><span class="line"><span class="comment"># 真实主机在没有 virt‐manger 图形的情况下,远程连接虚拟机很麻烦  </span></span><br><span class="line"><span class="comment"># 该脚本可以解决类似的问题  </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入虚拟机名称:&quot;</span> name  </span><br><span class="line"><span class="keyword">if</span> virsh domstate <span class="variable">$name</span> | grep -q running ;<span class="keyword">then</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;修改虚拟机网卡数据,需要关闭虚拟机&quot;</span>  </span><br><span class="line">  virsh destroy <span class="variable">$name</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">mountpoint=<span class="string">&quot;/media/virtimage&quot;</span>  </span><br><span class="line">[ ! -d <span class="variable">$mountpoint</span> ] &amp;&amp; mkdir <span class="variable">$mountpoint</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请稍后...&quot;</span>  </span><br><span class="line"><span class="keyword">if</span> mount | grep -q <span class="string">&quot;<span class="variable">$mountpoint</span>&quot;</span> ;<span class="keyword">then</span>  </span><br><span class="line">  umount <span class="variable">$mountpoint</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">guestmount  -d <span class="variable">$name</span> -i <span class="variable">$mountpoint</span>  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入需要修改的网卡名称:&quot;</span> dev  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入 IP 地址:&quot;</span> addr  </span><br><span class="line"><span class="comment"># 判断原本网卡配置文件中是否有 IP 地址,有就修改该 IP,没有就添加一个新的 IP 地址  </span></span><br><span class="line"><span class="keyword">if</span> grep -q <span class="string">&quot;IPADDR&quot;</span>  <span class="variable">$mountpoint</span>/etc/sysconfig/network‐scripts/ifcfg‐<span class="variable">$dev</span> ;<span class="keyword">then</span>  </span><br><span class="line">  sed -i <span class="string">&quot;/IPADDR/s/=.*/=<span class="variable">$addr</span>/&quot;</span>  <span class="variable">$mountpoint</span>/etc/sysconfig/network‐scripts/ifcfg‐<span class="variable">$dev</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;IPADDR=<span class="variable">$addr</span>&quot;</span> &gt;&gt; <span class="variable">$mountpoint</span>/etc/sysconfig/network‐scripts/ifcfg‐<span class="variable">$dev</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="comment"># 如果网卡配置文件中有客户配置的 IP 地址,则脚本提示修改 IP 完成  </span></span><br><span class="line">awk -F= -v x=<span class="variable">$addr</span> <span class="string">&#x27;$2==x&#123;print &quot;完成...&quot;&#125;&#x27;</span>  <span class="variable">$mountpoint</span>/etc/sysconfig/network‐scripts/ifcfg-<span class="variable">$dev</span>  </span><br></pre></td></tr></table></figure>

<p>86）破解虚拟机密码,无密码登陆虚拟机系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 破解虚拟机密码,无密码登陆虚拟机系统   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 该脚本使用 guestmount 工具,Centos7.2 中安装 libguestfs‐tools‐c 可以获得 guestmount 工具  </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入虚拟机名称:&quot;</span> name  </span><br><span class="line"><span class="keyword">if</span> virsh domstate <span class="variable">$name</span> | grep -q running ;<span class="keyword">then</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;破解,需要关闭虚拟机&quot;</span>  </span><br><span class="line">  virsh destroy <span class="variable">$name</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">mountpoint=<span class="string">&quot;/media/virtimage&quot;</span>  </span><br><span class="line">[ ! -d <span class="variable">$mountpoint</span> ] &amp;&amp; mkdir <span class="variable">$mountpoint</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请稍后...&quot;</span>  </span><br><span class="line"><span class="keyword">if</span> mount | grep -q <span class="string">&quot;<span class="variable">$mountpoint</span>&quot;</span> ;<span class="keyword">then</span>  </span><br><span class="line">  umount <span class="variable">$mountpoint</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">guestmount -d <span class="variable">$name</span> -i <span class="variable">$mountpoint</span>  </span><br><span class="line"><span class="comment"># 将 passwd 中密码占位符号 x 删除,该账户即可实现无密码登陆系统  </span></span><br><span class="line">sed -i <span class="string">&quot;/^root/s/x//&quot;</span> <span class="variable">$mountpoint</span>/etc/passwd  </span><br></pre></td></tr></table></figure>

<p>87）Shell 脚本对信号的处理,执行脚本后,按键盘 Ctrl+C 无法终止的脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Shell 脚本对信号的处理,执行脚本后,按键盘 Ctrl+C 无法终止的脚本   </span></span><br><span class="line"><span class="comment"># 使用 trap 命令可以拦截用户通过键盘或 kill 命令发送过来的信号  </span></span><br><span class="line"><span class="comment"># 使用 kill ‐l 可以查看 Linux 系统中所有的信号列表,其中 2 代表 Ctrl+C  </span></span><br><span class="line"><span class="comment"># trap 当发现有用户 ctrl+C 希望终端脚本时,就执行 echo &quot;暂停 10s&quot;;sleep 10 这两条命令  </span></span><br><span class="line"><span class="comment"># 另外用户使用命令:[ kill ‐2 脚本的 PID ] 也可以中断脚本和 Ctrl+C 一样的效果,都会被 trap 拦截  </span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&#x27;echo &quot;暂停 10s&quot;;sleep 10&#x27;</span> 2  </span><br><span class="line"><span class="keyword">while</span> :  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;go go go&quot;</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>88）一键部署 memcached</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 一键部署 memcached   </span></span><br><span class="line"><span class="comment"># 脚本用源码来安装 memcached 服务器  </span></span><br><span class="line"><span class="comment"># 注意:如果软件的下载链接过期了,请更新 memcached 的下载链接  </span></span><br><span class="line">wget http://www.memcached.org/files/memcached-1.5.1.tar.gz  </span><br><span class="line">yum -y install gcc  </span><br><span class="line">tar -xf  memcached‐1.5.1.tar.gz  </span><br><span class="line"><span class="built_in">cd</span> memcached‐1.5.1  </span><br><span class="line">./configure  </span><br><span class="line">make  </span><br><span class="line">make install  </span><br></pre></td></tr></table></figure>

<p>89）一键配置 VNC 远程桌面服务器(无密码版本)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 一键配置 VNC 远程桌面服务器(无密码版本)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 脚本配置的 VNC 服务器,客户端无需密码即可连接  </span></span><br><span class="line"><span class="comment"># 客户端仅有查看远程桌面的权限,没有鼠标和键盘的操作权限  </span></span><br><span class="line">  </span><br><span class="line">rpm --quiet -q tigervnc‐server  </span><br><span class="line"><span class="keyword">if</span> [  $? -ne  0 ];<span class="keyword">then</span>  </span><br><span class="line">  yum  -y  tigervnc‐server  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">x0vncserver AcceptKeyEvents=0 AlwaysShared=1 \  </span><br><span class="line">AcceptPointerEvents=0 SecurityTypes=None  rfbport=5908  </span><br></pre></td></tr></table></figure>

<p>90）关闭 SELinux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 关闭 SELinux   </span></span><br><span class="line">  </span><br><span class="line">sed -i  <span class="string">&#x27;/^SELINUX/s/=.*/=disabled/&#x27;</span> /etc/selinux/config  </span><br><span class="line">setenforce 0  </span><br></pre></td></tr></table></figure>

<p>91）查看所有虚拟机磁盘使用量以及CPU使用量信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 查看所有虚拟机磁盘使用量以及CPU使用量信息   </span></span><br><span class="line">  </span><br><span class="line">virt‐df  </span><br><span class="line"><span class="built_in">read</span> -n1 <span class="string">&quot;按任意键继续&quot;</span> key  </span><br><span class="line">virt‐top  </span><br></pre></td></tr></table></figure>

<p>92）使用 shell 脚本打印图形</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用 shell 脚本打印如下图形:   </span></span><br><span class="line"><span class="comment"># 打印第一组图片  </span></span><br><span class="line"><span class="comment"># for(())为类 C 语言的语法格式,也可以使用 for i  in;do  ;done 的格式替换  </span></span><br><span class="line"><span class="comment"># for((i=1;i&lt;=9;i++))循环会执行 9 次,i 从 1 开始到 9,每循环一次 i 自加 1  </span></span><br><span class="line">clear  </span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=9; i++ ))  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  <span class="keyword">for</span> (( j=1; j&lt;=i; j++ ))  </span><br><span class="line">  <span class="keyword">do</span>  </span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$i</span>&quot;</span>  </span><br><span class="line">  <span class="keyword">done</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&quot;</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="built_in">read</span>  -n1  <span class="string">&quot;按任意键继续&quot;</span>  key  </span><br><span class="line"><span class="comment">#打印第二组图片  </span></span><br><span class="line">clear  </span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=5; i++ ))   </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  <span class="keyword">for</span> (( j=1; j&lt;=i; j++ ))  </span><br><span class="line">  <span class="keyword">do</span>  </span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot; |&quot;</span>  </span><br><span class="line">  <span class="keyword">done</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;_ &quot;</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="built_in">read</span>  -n1  <span class="string">&quot;按任意键继续&quot;</span>  key  </span><br><span class="line"><span class="comment">#打印第三组图片  </span></span><br><span class="line">clear  </span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=5; i++ ))  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  <span class="keyword">for</span> (( j=1; j&lt;=i; j++ ))  </span><br><span class="line">  <span class="keyword">do</span>  </span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot; *&quot;</span>  </span><br><span class="line">  <span class="keyword">done</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&quot;</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="keyword">for</span> (( i=5; i&gt;=1; i‐‐ ))  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  <span class="keyword">for</span> (( j=1; j&lt;=i; j++ ))  </span><br><span class="line">  <span class="keyword">do</span>  </span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot; *&quot;</span>  </span><br><span class="line">  <span class="keyword">done</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&quot;</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br></pre></td></tr></table></figure>

<p>93）根据计算机当前时间,返回问候语,可以将该脚本设置为开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 根据计算机当前时间,返回问候语,可以将该脚本设置为开机启动   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 00‐12 点为早晨,12‐18 点为下午,18‐24 点为晚上  </span></span><br><span class="line"><span class="comment"># 使用 date 命令获取时间后,if 判断时间的区间,确定问候语内容  </span></span><br><span class="line">tm=$(date +%H)  </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$tm</span> -le 12 ];<span class="keyword">then</span>  </span><br><span class="line">  msg=<span class="string">&quot;Good Morning <span class="variable">$USER</span>&quot;</span>  </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$tm</span> -gt 12 -a <span class="variable">$tm</span> -le 18 ];<span class="keyword">then</span>  </span><br><span class="line">    msg=<span class="string">&quot;Good Afternoon <span class="variable">$USER</span>&quot;</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">    msg=<span class="string">&quot;Good Night <span class="variable">$USER</span>&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前时间是:<span class="subst">$(date +<span class="string">&quot;%Y‐%m‐%d %H:%M:%S&quot;</span>)</span>&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[34m<span class="variable">$msg</span>\033[0m&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>94）读取用户输入的账户名称,将账户名写入到数组保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 读取用户输入的账户名称,将账户名写入到数组保存   </span></span><br><span class="line"><span class="comment"># 定义数组名称为 name,数组的下标为 i,小标从 0 开始,每输入一个账户名,下标加 1,继续存下一个账户  </span></span><br><span class="line"><span class="comment"># 最后,输入 over,脚本输出总结性信息后脚本退出  </span></span><br><span class="line">i=0  </span><br><span class="line"><span class="keyword">while</span> :  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">&quot;请输入账户名,输入 over 结束:&quot;</span> key  </span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$key</span> == <span class="string">&quot;over&quot;</span> ];<span class="keyword">then</span>   </span><br><span class="line">    <span class="built_in">break</span>  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    name[<span class="variable">$i</span>]=<span class="variable">$key</span>  </span><br><span class="line">    <span class="built_in">let</span> i++  </span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;总账户名数量:<span class="variable">$&#123;#name[*]&#125;</span>&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;name[@]&#125;</span>&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>95）判断文件或目录是否存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 判断文件或目录是否存在   </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ] ;<span class="keyword">then</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;未输入任何参数,请输入参数&quot;</span>  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;用法:<span class="variable">$0</span> [文件名|目录名]&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$1</span> ];<span class="keyword">then</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;该文件,存在&quot;</span>  </span><br><span class="line">  ls -l <span class="variable">$1</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;没有该文件&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">if</span> [ -d  <span class="variable">$1</span> ];<span class="keyword">then</span>  </span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;该目录,存在&quot;</span>  </span><br><span class="line">     ls -ld  <span class="variable">$2</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;没有该目录&quot;</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br></pre></td></tr></table></figure>

<p>96）打印各种格式的时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印各种时间格式   </span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;显示星期简称(如:Sun)&quot;</span>  </span><br><span class="line">date +%a  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;显示星期全称(如:Sunday)&quot;</span>  </span><br><span class="line">date +%A  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;显示月份简称(如:Jan)&quot;</span>  </span><br><span class="line">date +%b  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;显示月份全称(如:January)&quot;</span>  </span><br><span class="line">date +%B  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;显示数字月份(如:12)&quot;</span>  </span><br><span class="line">date +%m  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;显示数字日期(如:01 号)&quot;</span>  </span><br><span class="line">date +%d  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;显示数字年(如:01 号)&quot;</span>  </span><br><span class="line">date +%Y <span class="built_in">echo</span> <span class="string">&quot;显示年‐月‐日&quot;</span>  </span><br><span class="line">date +%F  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;显示小时(24 小时制)&quot;</span>  </span><br><span class="line">date +%H  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;显示分钟(00..59)&quot;</span>  </span><br><span class="line">date +%M  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;显示秒&quot;</span>  </span><br><span class="line">date +%S  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;显示纳秒&quot;</span>  </span><br><span class="line">date +%N  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;组合显示&quot;</span>  </span><br><span class="line">date +<span class="string">&quot;%Y%m%d %H:%M:%S&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>97）使用 egrep 过滤 MAC 地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用 egrep 过滤 MAC 地址   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># MAC 地址由 16 进制组成,如 AA:BB:CC:DD:EE:FF  </span></span><br><span class="line"><span class="comment"># [0‐9a‐fA‐F]&#123;2&#125;表示一段十六进制数值,&#123;5&#125;表示连续出现5组前置:的十六进制  </span></span><br><span class="line">egrep <span class="string">&quot;[0‐9a‐fA‐F]&#123;2&#125;(:[0‐9a‐fA‐F]&#123;2&#125;)&#123;5&#125;&quot;</span> <span class="variable">$1</span>  </span><br></pre></td></tr></table></figure>

<p>98）统计双色球各个数字的中奖概率</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 统计双色球各个数字的中奖概率   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 往期双色球中奖号码如下:  </span></span><br><span class="line"><span class="comment"># 01 04 11 28 31 32  16  </span></span><br><span class="line"><span class="comment"># 04 07 08 18 23 24  02  </span></span><br><span class="line"><span class="comment"># 02 05 06 16 28 29  04  </span></span><br><span class="line"><span class="comment"># 04 19 22 27 30 33  01  </span></span><br><span class="line"><span class="comment"># 05 10 18 19 30 31  03  </span></span><br><span class="line"><span class="comment"># 02 06 11 12 19 29  06  </span></span><br><span class="line"><span class="comment"># 统计篮球和红球数据出现的概率次数(篮球不分顺序,统计所有篮球混合在一起的概率)  </span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $1&quot;\n&quot;$2&quot;\n&quot;$3&quot;\n&quot;$4&quot;\n&quot;$5&quot;\n&quot;$6&#125;&#x27;</span> 1.txt | sort | uniq -c | sort  </span><br><span class="line">awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> 1.txt | sort | uniq -c | sort  </span><br></pre></td></tr></table></figure>

<p>99）生成签名私钥和证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 生成签名私钥和证书   </span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入存放证书的目录:&quot;</span> dir  </span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$dir</span> ];<span class="keyword">then</span>  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;该目录不存在&quot;</span>  </span><br><span class="line">  <span class="built_in">exit</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入密钥名称:&quot;</span> name  </span><br><span class="line"><span class="comment"># 使用 openssl 生成私钥  </span></span><br><span class="line">openssl genrsa -out <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;name&#125;</span>.key  </span><br><span class="line"><span class="comment"># 使用 openssl 生成证书 #subj 选项可以在生成证书时,非交互自动填写 Common Name 信息  </span></span><br><span class="line">openssl req -new -x509 -key <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;name&#125;</span>.key -subj <span class="string">&quot;/CN=common&quot;</span> -out <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;name&#125;</span>.crt  </span><br></pre></td></tr></table></figure>

<p>100）使用awk编写的wc程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用awk编写的wc程序   </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 自定义变量 chars 变量存储字符个数,自定义变量 words 变量存储单词个数  </span></span><br><span class="line"><span class="comment"># awk 内置变量 NR 存储行数  </span></span><br><span class="line"><span class="comment"># length()为 awk 内置函数,用来统计每行的字符数量,因为每行都会有一个隐藏的$,所以每次统计后都+1  </span></span><br><span class="line"><span class="comment"># wc 程序会把文件结尾符$也统计在内,可以使用 cat ‐A 文件名,查看该隐藏字符  </span></span><br><span class="line">awk <span class="string">&#x27;&#123;chars+=length($0)+1;words+=NF&#125; END&#123;print NR,words,chars&#125;&#x27;</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>彻底搞定乱码-自定义过滤器（filter）-3</title>
    <url>/2020/06/04/java-web/%E5%BD%BB%E5%BA%95%E6%90%9E%E5%AE%9A%E4%B9%B1%E7%A0%81-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8%EF%BC%88filter%EF%BC%89-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>彻底解决get/post中文乱码</strong></p>
<h1 id="1-包装模式过滤器"><a href="#1-包装模式过滤器" class="headerlink" title="1.包装模式过滤器"></a>1.包装模式过滤器</h1><ul>
<li><p>spring boot 中使用@Component 或者@Configuration</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dancer4code.actuator.filter;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 19:45</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;&#x2F;@Component</span><br><span class="line">&#x2F;&#x2F;@WebFilter</span><br><span class="line">&#x2F;&#x2F;@Configuration</span><br><span class="line">&#x2F;&#x2F;@Order(value &#x3D; 15)</span><br><span class="line">public class MyCharacterEncodingFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest,</span><br><span class="line">                         ServletResponse servletResponse, FilterChain filterChain)</span><br><span class="line">            throws IOException, ServletException &#123;</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;----------------MyCharacterEncordingFilter------doFilter-----------------&quot;);</span><br><span class="line">        HttpServletRequest request &#x3D; (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response &#x3D; (HttpServletResponse) servletResponse;</span><br><span class="line">        request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);</span><br><span class="line">        filterChain.doFilter(new MyRequest(request), response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">     * 1.写一个类实现与被增强对象相同的接口</span><br><span class="line">     * 2.定义一个变量，记住被增强的对象</span><br><span class="line">     * 3.定义一个构造方法，接受被增强对象</span><br><span class="line">     * 4.覆盖想增强的方法</span><br><span class="line">     * 5.对于不想增强的方法，直接调用被增强对象（目标对象）的方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    class MyRequest extends HttpServletRequestWrapper &#123;</span><br><span class="line">        private HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">        public MyRequest(HttpServletRequest request) &#123;</span><br><span class="line">            super(request);</span><br><span class="line">            this.request &#x3D; request;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String getParameter(String name) &#123;</span><br><span class="line">            String value &#x3D; this.request.getParameter(name);</span><br><span class="line">            if (!request.getMethod().equalsIgnoreCase(&quot;get&quot;)) &#123;</span><br><span class="line">                return value;</span><br><span class="line">            &#125;</span><br><span class="line">            if (value &#x3D;&#x3D; null) &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                return new String(value.getBytes(&quot;UTF-8&quot;),</span><br><span class="line">                        request.getCharacterEncoding());</span><br><span class="line"></span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                throw new RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;---MyCharacterEncordingFilter-----init-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;---MyCharacterEncordingFilter-----destroy-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>spring boot中使用@WebFilter+@ServletComponentScan(可自定义过滤路径)</p>
</li>
<li><p>spring mvc中使用web.xml中配置（可自定义过滤路径）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;MyCharacterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;com.dancer4code.actuator.filter.MyCharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">&lt;&#x2F;filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">     &lt;filter-name&gt;MyCharacterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">     &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>spring mvc中使用@WebFilter注解</p>
</li>
</ul>
<h1 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2.动态代理"></a>2.动态代理</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dancer4code.actuator.filter;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;5 15:15</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">public class MyCharacterEncodingProxyFilter implements Filter &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;----------MyCharacterEncodingProxyFilter---doFilter--------------------&quot;);</span><br><span class="line">        final HttpServletRequest request &#x3D; (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response &#x3D; (HttpServletResponse) res;</span><br><span class="line">        &#x2F;&#x2F;POST的乱码解决方案</span><br><span class="line">        request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;返回数据的乱码解决方案</span><br><span class="line">        response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;用动态代理拦截,增强getParameter()后,放行</span><br><span class="line">        chain.doFilter((ServletRequest) Proxy.newProxyInstance(MyCharacterEncodingProxyFilter.class.getClassLoader(), request.getClass().getInterfaces(),</span><br><span class="line">                new InvocationHandler() &#123; &#x2F;&#x2F;直接实现接口</span><br><span class="line">                    @Override</span><br><span class="line">                    public Object invoke(Object proxy, Method method, Object[] args)</span><br><span class="line">                            throws Throwable &#123;</span><br><span class="line">                        &#x2F;&#x2F;如果请求方式是POST,则不用增强,直接调用目标对象的方法</span><br><span class="line">                        if (request.getMethod().equalsIgnoreCase(&quot;POST&quot;)) &#123;</span><br><span class="line">                            return method.invoke(request, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        String methodName &#x3D; method.getName();</span><br><span class="line">                        &#x2F;&#x2F;如果传递进来的方法不是getParameter(),则不用增强</span><br><span class="line">                        if (!methodName.equals(&quot;getParameter&quot;)) &#123;</span><br><span class="line">                            return method.invoke(request, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        &#x2F;&#x2F;为GET,并且是getParameter(),...</span><br><span class="line">                        String value &#x3D; (String) method.invoke(request, args);</span><br><span class="line">                        if (value !&#x3D; null) &#123;</span><br><span class="line">                            value &#x3D; new String(value.getBytes(&quot;iso8859-1&quot;), &quot;utf-8&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        return value;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;), response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;----------MyCharacterEncodingProxyFilter---destroy--------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void init(FilterConfig fConfig) throws ServletException &#123;</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;----------MyCharacterEncodingProxyFilter---init--------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其他配置方式与上面相同</p>
<p>引用自<br><a href="https://blog.csdn.net/zhangao0086/article/details/6240379">彻底解决全站乱码</a><br><a href="https://blog.csdn.net/weixin_41092717/article/details/82755601">Filter使用全站解决中文乱码问题</a></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ-Idea-常用快捷键-列表</title>
    <url>/2020/06/02/idea/IntelliJ-Idea-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE-%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-自动代码"><a href="#1-自动代码" class="headerlink" title="1.自动代码"></a>1.自动代码</h1><p>常用的有<code>fori/sout/psvm+Tab</code>即可生成循环、<code>System.out、main</code>方法等<code>boilerplate</code>样板代码?<br>例如要输入<code>for(User user : users)</code>只需输入<code>user.for+Tab</code><br>再比如，要输入<code>Date birthday = user.getBirthday();</code>只需输入<code>user.getBirthday().var+Tab</code>即可。代码标签输入完成后，按<code>Tab</code>，生成代码。</p>
<ul>
<li>Ctrl+Alt+O 优化导入的类和包</li>
<li>Alt+Insert 生成代码(如get,set方法,构造函数等) ? 或者右键（Generate）</li>
<li>fori/sout/psvm + Tab</li>
<li>Ctrl+Alt+T+[home]生成try catch 或者 Alt+enter</li>
<li>CTRL+ALT+T ?把选中的代码放在 TRY{} IF{} ELSE{} 里</li>
<li>Ctrl + O 重写方法</li>
<li>Ctrl + I 实现方法</li>
<li>Ctr+shift+U 大小写转化</li>
<li>ALT+回车 导入包,自动修正</li>
<li>ALT+/  代码提示</li>
<li>CTRL+J 自动代码</li>
<li>Ctrl+Shift+J，整合两行为一行</li>
<li>CTRL+空格  代码提示</li>
<li>CTRL+SHIFT+SPACE 自动补全代码</li>
<li>CTRL+ALT+L 格式化代码</li>
<li>CTRL+ALT+I 自动缩进</li>
<li>CTRL+ALT+O 优化导入的类和包</li>
<li>ALT+INSERT 生成代码(如GET,SET方法,构造函数等)</li>
<li>CTRL+E 最近更改的代码</li>
<li>CTRL+ALT+SPACE类名或接口名提示</li>
<li>CTRL+P 方法参数提示</li>
<li>CTRL+Q，可以看到当前方法的声明</li>
<li>Shift+F6重构-重命名 (包、类、方法、变量、甚至注释等)</li>
<li>Ctrl+Alt+V 提取变量</li>
</ul>
<h1 id="2-查询快捷键"><a href="#2-查询快捷键" class="headerlink" title="2.查询快捷键"></a>2.查询快捷键</h1><ul>
<li>Ctrl＋Shift＋Backspace可以跳转到上次编辑的地</li>
<li>CTRL+ALT+ left/right 前后导航编辑过的地方</li>
<li>ALT+7 靠左窗口显示当前文件的结构</li>
<li>Ctrl+F12 浮动显示当前文件的结构</li>
<li>ALT+F7 找到你的函数或者变量或者类的所有引用到的地方</li>
<li>CTRL+ALT+F7 ?找到你的函数或者变量或者类的所有引用到的地方</li>
<li>Ctrl+Shift+Alt+N 查找类中的方法或变量</li>
<li>双击SHIFT 在项目的所有目录查找文件</li>
<li>Ctrl+N 查找类</li>
<li>Ctrl+Shift+N 查找文件</li>
<li>CTRL+G  定位行</li>
<li>CTRL+F 在当前窗口查找文本</li>
<li>CTRL+SHIFT+F 在指定窗口查找文本</li>
<li>CTRL+R 在 当前窗口替换文本</li>
<li>CTRL+SHIFT+R 在指定窗口替换文本</li>
<li>ALT+SHIFT+C 查找修改的文件</li>
<li>CTRL+E 最近打开的文件</li>
<li>F3 向下查找关键字出现位置</li>
<li>SHIFT+F3 向上一个关键字出现位置</li>
<li>选中文本，按Alt+F3 ，高亮相同文本，F3逐个往下查找相同文本</li>
<li>F4 查找变量来源</li>
<li>CTRL+SHIFT+O 弹出显示查找内容</li>
<li>Ctrl+W 选中代码，连续按会有其他效果</li>
<li>F2 或Shift+F2 高亮错误或警告快速定位</li>
<li>Ctrl+Up/Down 光标跳转到第一行或最后一行下</li>
<li>Ctrl+B 快速打开光标处的类或方法</li>
<li>CTRL+ALT+B 找所有的子类</li>
<li>CTRL+SHIFT+B 找变量的类</li>
<li>Ctrl+Shift+上下键 上下移动代码</li>
<li>Ctrl+Alt+ left/right 返回至上次浏览的位置</li>
<li>Ctrl+X 删除行</li>
<li>Ctrl+D 复制行</li>
<li>Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/<em>…</em>/ ）</li>
<li>Ctrl+H 显示类结构图</li>
<li>Ctrl+Q 显示注释文档</li>
<li>Alt+F1 查找代码所在位置</li>
<li>Alt+1 快速打开或隐藏工程面板</li>
<li>Alt+ left/right 切换代码视图</li>
<li>ALT+ ↑/↓ 在方法间快速移动定位</li>
<li>CTRL+ALT+ left/right 前后导航编辑过的地方</li>
<li>Ctrl＋Shift＋Backspace可以跳转到上次编辑的地</li>
<li>Alt+6 查找TODO</li>
</ul>
<h1 id="3-其他快捷键"><a href="#3-其他快捷键" class="headerlink" title="3.其他快捷键"></a>3.其他快捷键</h1><ul>
<li>SHIFT+ENTER 另起一行</li>
<li>CTRL+Z  倒退(撤销)</li>
<li>CTRL+SHIFT+Z 向前(取消撤销)</li>
<li>CTRL+ALT+F12 资源管理器打开文件夹</li>
<li>ALT+F1 查找文件所在目录位置</li>
<li>SHIFT+ALT+INSERT 竖编辑模式</li>
<li>CTRL+F4 关闭当前窗口</li>
<li>Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义</li>
<li>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</li>
</ul>
<h1 id="4-svn快捷键"><a href="#4-svn快捷键" class="headerlink" title="4.svn快捷键"></a>4.svn快捷键</h1><ul>
<li>ctrl+k 提交代码到SVN?</li>
<li>ctrl+t 更新代码?</li>
</ul>
<h1 id="5-调试快捷键"><a href="#5-调试快捷键" class="headerlink" title="5.调试快捷键"></a>5.调试快捷键</h1><p>其实常用的 就是<code>F8 F7 F9 </code>最值得一提的 就是<code>Drop Frame </code>可以让运行过的代码从头再来</p>
<ul>
<li>alt+F8，debug时选中查看值</li>
<li>Alt+Shift+F9，选择 Debug</li>
<li>Alt+Shift+F10，选择 Run</li>
<li>Ctrl+Shift+F9，编译</li>
<li>Ctrl+Shift+F8，查看断点</li>
<li>F7，步入</li>
<li>Shift+F7，智能步入</li>
<li>Alt+Shift+F7，强制步入</li>
<li>F8，步过</li>
<li>Shift+F8，步出</li>
<li>Alt+Shift+F8，强制步过</li>
<li>Alt+F9，运行至光标处</li>
<li>Ctrl+Alt+F9，强制运行至光标处</li>
<li>F9，恢复程序</li>
<li>Alt+F10，定位到断点</li>
</ul>
<h1 id="6-重构"><a href="#6-重构" class="headerlink" title="6.重构"></a>6.重构</h1><ul>
<li>Ctrl+Alt+Shift+T，弹出重构菜单</li>
<li>Shift+F6，重命名</li>
<li>F6，移动</li>
<li>F5，复制</li>
<li>Alt+Delete，安全删除</li>
<li>Ctrl+Alt+N，内联</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-c7999eea241ad457.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="idea默认快捷键.png"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>linux学习笔记</title>
    <url>/2020/07/07/linux/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>whoami</code>当前用户名<br><code>who am i</code>当前用户名  登陆的终端 当前的日期和时间<br><code>who</code>哪些用户在系统上工作<br><code>w 比who</code>更全面</p>
<hr>
<p><code>users</code> 所有用户<br><code>tty</code> 目前登陆系统所使用的终端</p>
<hr>
<p><code>uname --help</code>查看所有uname命令命令<br><code>uname --version</code><br><code>uname [-a|--all]</code>所有信息<br><code>uname [-n|--nodename]</code>所使用系统的主机名<br><code>uname [-s|--kernel-name]</code>操作系统名<br><code>uname [-r|--kernel-release]</code>操作系统发布版本信息<br><code>uname [-v|--kernel-version]</code><br><code>uname [-m|--machine]</code>machine hardware name<br><code>uname [-p|--processor]</code>processor type<br><code>uname [-i|--hardware-platform]</code><br><code>uname [-o|--operating-system]</code></p>
<hr>
<p> <code>date </code>显示系统日期和时间<br> <code>cal</code> 显示本月日历（calendar）<br> <code>cal 7 2019</code> 显示2019年7月日历<br><code>cal 2019</code>显示2019年日历</p>
<p><code>clear</code>清除终端窗口中的显示</p>
<p><code>不能用root用户直接telnet操作</code></p>
<p><code>#root</code>用户提示符<br><code>$</code>普通用户提示符<br><code>su命令（switch user）</code><br><code>su  - root </code>切换root用户<br><code>su - </code>默认切换到root<br><code>exit </code>退出超级用户</p>
<hr>
<p><code>passwd </code>修改密码命令<code>password</code></p>
<p><code>whatis who</code>  命令<code>who</code>的作用概括<br>或<br><code>man -f who</code></p>
<p><code>who --help </code><br>或<br><code>man who</code> 查看<code>who</code>命令帮助<code>man</code>(<code>manual</code>手册)</p>
<p><code>info who</code>  帮助更易理解</p>
<hr>
<p><code>/etc </code>系统主要配置文件<br><code>/tmp</code> 临时文件<br><code>/boot</code> 系统内核文件<br><code>/usr (unix sysytm resources)</code>系统应用程序和与命令相关的系统数据<br><code>/dev</code> 系统设备<br><code>Lost+Found </code>系统异常崩溃错误 ，系统将一些遗失的片段放入其中，系统自动过生成。<br><code>/var </code>存放系统运行时经常变化的文件，如<code>log ,mail</code><br><code>/srv</code>存放的所有与服务器相关的服务，即一些服务启动后，这些服务需要访问的目录。<br><code>/proc</code> 虚拟文件系统，常驻内存中不占磁盘空间，存放系统运行所需的信息。<br><code>/lib 、usr/lib、usr/local/lib </code>系统使用的函数库。程序运行中需要调用的库函数</p>
<hr>
<p><code>cd</code>命令(<code>change directory</code>)<br><code>cd</code>进入目录<br><code>cd . </code>当前目录<br><code>cd ..</code>上一层目录<br><code>cd /</code>根目录<br><code>cd </code>或<code>cd ~ </code>或<code>cd $HOME </code>切换到用户家目录<br><code>cd -</code>切换到用户之前的工作目录</p>
<hr>
<p><code>pwd</code><br>打印当前工作目录（<code>print working directory</code>）</p>
<p><code>ls(list)</code><br><code>ls -a</code>列举所有文件及文件夹包括隐藏<code>-a(all)</code><br><code>ls -l </code> 列出非隐藏文件细节<code>-l（long）</code><br><code>ls -R </code>列出本目录及子目录内容<br><code>ls -F</code> 列出目录中文件（可执行文件（*），目录（/）,超链（@））</p>
<hr>
<p><code>mkdir(make directory)</code>创建文件夹</p>
<p><code>&gt;</code> 重新创建创建文件</p>
<p><code>touch</code>创建文件，如果不存在则创建，如果存在则更新时间戳</p>
<p><code>mkdir aa</code> 创建文件夹aa<br><code>mkir -p aa/bb/cc</code>不存在就创建<br><code>-p(parents)</code><br><code>&gt;bb.txt </code>每次都是重新创建创建文件bb.txt</p>
<p><code>ls -l /lib &gt;cc.txt</code> 创建文件cc.txt并把列举lib下所有文件信息写入</p>
<p><code>ls -lh</code>文件大小变为熟悉方式<code> -h(human)</code></p>
<hr>
<p><code>cp(copy)</code></p>
<p><code>cp [options] [sources] [target]</code></p>
<p><code>cp -i|-r|-p|-f aa /home</code>复制aa文件夹道home下<br><code>-i(interactive交互的)</code>覆盖时有提示信息<br><code>-r(recursive递归的)</code>复制该目录及该目录下的全部内容<br><code>-p(preserve维持)</code>保留一些属性如时间戳<br><code>-f(force强制)</code>存在即直接覆盖</p>
<p><code>普通用户cp -f</code>强制覆盖<br><code>root用户cp -i</code>提示信息</p>
<hr>
<p><code>mv(move)</code>移动目录及其目录下的内容</p>
<p><code>mv aa.txt bb.txt</code></p>
<p><code>rm(remove)删除</code></p>
<p><code>rm -i|-r|-f </code><br><code>rm -r aa</code>删除aa及aa下的文件及目录<br><code>rmdir</code>只能删除当前空文件夹</p>
<hr>
<p><code>yum install vsftpd</code><br>安装<code>vsftpd</code></p>
<p><code>service vsftpd status </code><br><code>systemctl status vsftpd</code> 查看<code>vsftpd</code>服务状态</p>
<p><code>service sftpd start</code><br><code>systemctl enable vsftpd</code>开启服务</p>
<hr>
<p><code>ftp </code>主机名|ip端口<br><code>ftp&gt;</code><br><code>bye</code>或<code>quit</code>退出</p>
<p><code>lcd </code>查看和改变本地路径<br><code>cd ls</code>查看改变linux路径</p>
<p><code>open </code>主机|ip端口 建立一个新连接<br>切换模式<br><code>ascii </code>纯文本模式<br><code>bin </code>二进制模式</p>
<p><code>put filename </code>传输一个文件<br><code>mput file1 file2</code> 传输多个文件</p>
<p><code>prompt</code>开启/关闭交互信息</p>
<p><code>get file</code><br><code>mget file1 file2</code>从linux到windows</p>
<hr>
<p><code>file </code>查看文件类型，linux扩展名并不代表文件类型</p>
<p><code>file aa</code><br><code>file</code> 与<code>ls -F</code>类似，只不过更详细</p>
<hr>
<p><code>cat</code>浏览文件内容（<code>concatenate</code>）</p>
<p><code>cat -A|-s|-b file1 file2</code> 把file1和file连接到一起显示<br><code>-A</code>显示换行符<br><code>-s</code>压缩多个空行为一行<br><code>-b</code>显示行号</p>
<p><code>cat&gt;file</code><br><code>you can to create a new file to use cat &gt; command</code><br>创建一个file并写入you can to create a new file to use cat &gt; command 用<code>ctrl+D</code>保存结束</p>
<hr>
<p><code>head -n|--line 10 file </code>查看file的前10行<br>或者<br><code>head -10 file</code>与上一样</p>
<hr>
<p><code>tail -n|--line 10 file</code> 查看文件最后10行<br><code>tail -10 file</code> </p>
<p><code>tail -f|--follow file</code>动态监控文件变化是显示在屏幕上<br><code>tail -f log </code>监控log文件</p>
<p><code>wc (word count)</code>查看文件行数、单词数、字符数<br><code>wc -l|-w|-c  -l line  -w word -c character</code></p>
<hr>
<p><code>more </code>如果一个文件较大用more查看<br><code>空格键</code>:向下移动一屏幕<br><code>enter键</code>:一次移动一行<br><code>B</code>:向上移动一屏幕<br><code>H</code>:帮助<br><code>/字符串</code>：向下搜索这个字符串<br><code>N</code>:字符串下一次出现<br><code>Q</code>:退出more命令<br><code>V</code>:在当前行启动vi</p>
<hr>
<p><code>type -t|-a|-P ls</code><br><code>-t file</code>为外部命令 alias为别名 builtin为bash内置命令<br><code>-a</code>列出包含指定命令的命令包括别名<br><code>-P</code>显示完整的文件名（外部命令），或者为内部命令</p>
<hr>
<p>linux中的通配符</p>
<p><code>*</code>：匹配0个或多个字符<br><code>？</code>：匹配一个字符<br><code>[a-z]</code>:匹配a<del>z范围内的字符<br><code>[^a-z]</code>:匹配a</del>z之外的字符<br><code>[abc]</code>:匹配括号中的任意字符<br><code>[^abc]</code>：匹配不包含括号内的字符</p>
<hr>
<p><code>~ 符号</code><br><code>~后面没跟用户</code> 代表当前用户家目录<br><code>~跟了用户名</code> 这个用户的家目录</p>
<hr>
<p><code>history </code>查看执行命令的历史<br> <code>！行号</code> 执行该命 令</p>
<p><code>bash变量和&#123;&#125;用法</code></p>
<p><code>$PATH</code>执行命令时要搜索的路径，即一个命令如果存储在PATH的预定义变量用户可以只输入变量名来执行命令<br><code>echo $PATH</code><br><code>$HOME</code>用户家路径</p>
<p><code>&#123;&#125;</code><br><code>touch a.&#123;b,c&#125;.&#123;txt,jpg&#125;</code><br>则会创建 a.b.txt a.b.jpg a.c.txt a.c.jpg四个文件 其他命令使用{}也变得更方便。</p>
<hr>
<p>讲一个命令的输出作为另一个命令的参数<br><code>hostname</code> 主机名</p>
<p><code>echo &quot;this is </code>hostname<code>&quot;</code><br><code>echo &quot;this is $(hostname)&quot;</code><br><code>echo &quot;Today is </code>date<code>&quot;</code><br><code>echo &quot;Today is $(date)&quot;</code></p>
<hr>
<p>linux 命令数学运算</p>
<p>a=10;b=5,c=3</p>
<p><code>echo $[$a+$b]</code><br><code>echo $[$a-$b]</code><br><code>echo $[$a*$b]</code><br><code>echo $[$a/$b]</code><br><code>echo $[$a%$b]</code><br><code>echo $[$a**$c]</code> 10的三次方</p>
<hr>
<p><code>反斜杠\用法</code></p>
<p><code>\$a</code>不作为一个变量输出$a<br><code>\*</code>不作为通配符输出*<br>命令行最后使用\表示命令下一行继续。</p>
<p><code>单引号（&#39;）与双引号（&quot;）</code><br>1.单引号：禁止所有命令行扩展功能<br>2.禁止除下面意外的命令行扩展功能<br>   美元符号$<br>   倒引号 `<br>   反斜杠 /<br>   感叹号 !</p>
<hr>
<p><code>文件描述符</code><br><code>fd(file descriptor)</code></p>
<p>0:标准命令输入 <code>stdin</code><br>1:标准命令输出 <code>stdout</code><br>2:标准命令错误 <code>stderr</code></p>
<p><code>ls -l /dev/std*</code> 文件描述符与缩写对应关系查询</p>
<hr>
<p><code>使用find搜索文件和目录</code><br><code>find pathnames expressions actions</code><br><code>pathnames</code>:搜索起始绝对路径或相对路径<br><code>expressions</code>：由一个或多个选项第一的搜索条件 多个选项关系时逻辑与（and）<br>    <code> -name</code>:文件名，使用通配符时最好放入””内<br>    <code> -size [+|-]n</code>: 大小大于 +n  小于 -n 或等于 n ,n代表512字节大小数据块的个数。<br>     <code>-atime [+|-]n</code>:查找访问时间超过天数 +n  低于 -n ,等于 n<br>     <code>-mtime [+|-]n</code>:查找更新时间超过天数 +n  低于 -n ,等于 n<br>    <code> -user loginID</code>:查找属于loginID(用户)的所有文件。<br>     <code>-type</code>：查找么某一类文件如f(文件)或d(目录)<br>     <code>-perm</code>:查找所有具有某些特定的访问许可位的文件</p>
<p><code>actions</code>:当文件被定位之后需要进行的操作 默认将满足条件的所有路径打印在屏幕上。<br>    <code> -exec</code> 命令 {} ; :在每一个所定位的文件上运行指定的命令。大括号{}表明文件名将传给前面表达式所表示的命令。<br>        一个空格、一个反斜线和一个分号表示命令的结束。在反斜杠和大括号之间必须有一个空格。<br>     <code>-ok 命令 &#123;&#125; \; </code>:在每个定位文件执行命令之前需要确认。实际就是-exec 命令的交互方式。<br>     <code>-print</code>:打印路径，默认方式<br>    <code> -ls</code>: 显示当前路径名和相关的统计信息，如i节点（inode）数、以K字节为单位的大小（尺寸）、保护模式、硬连接和用户。</p>
<p><code>find / -name &quot;java*&quot; -ls </code>查询根路径下的所有java开头的文件或路径的详细信息</p>
<hr>
<p>将输出重定向到文件中<br><code>&gt;</code>:覆盖原来的内容。<br><code>&gt;&gt;</code>:在原文件之后追加内容。</p>
<p><code>切换普通用户演示</code><br><code>find /etc -name passwd 1&gt;stdout.txt</code><br>相同<br><code>find /etc -name passwd &gt;stdout.txt</code></p>
<p><code>find /etc -name passwd 2&gt;errout.txt</code>输出错误信息到errout.txt</p>
<p><code>find /etc -name passwd &gt;allout.txt 2&gt;&amp;1 </code>标准输出和错误输出合并到一个文件<br><code>find /etc -name passwd &amp;&gt;allout.txt  </code>&amp;代表了所有文件描述符号</p>
<hr>
<p>输入重定向及tr命令<br><code>tr (translate)</code>:转换、压缩和/或删除来自标准输入的字符并将结果写到标准输出上<br>tr命令不接受文件名形式的参数，该命令要求他的输入被重定向为某个地方。</p>
<p>aa.txt<br>内容AAAAA</p>
<p><code>tr &#39;A-Z&#39; &#39;a-z&#39; &lt;aa.txt &gt;bb.txt </code>替换文件aa.txt中的大写字母为小写字母到bb.txt</p>
<p><code>windows 换行</code>（回车符”\r”+换行符（”\n”））<br><code>linux 换行 </code>（换行符（”\n”））</p>
<p><code>tr -d &quot;\r&quot; &lt;aa.txt&gt;cc.txt删除（-d）回车符（\r）</code><br>tr命令的参数部分也是可以使用ascii码字符的八进制表示的数字如 \015 表示\r<br><code>man ascii</code>查看ascii对应信息</p>
<hr>
<p><code>cut 剪切命令</code></p>
<p><code>cut -f|-d|-d file </code><br><code>-f</code>:字段（列）<br><code>-c</code>：要剪切的字符<br><code>-d</code>:字段分隔符（默认Tab）<br><code>cut -f3 bb.txt</code>列出第三个字段<br><code>cut -f2 -d, bb.txt l</code>列出第二个字段以,分隔符  默认分隔符Tab字符</p>
<p><code>cut -c1-3 bb.txt</code>从第一个字符取到第三个字符（按行取）</p>
<hr>
<p><code>paste 粘帖命令</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user.txt</span><br><span class="line">zlq,11,anhui</span><br><span class="line">fsd,22,anhui</span><br><span class="line">llx,33,fujian</span><br><span class="line">koo,44,guangdong</span><br><span class="line"></span><br><span class="line">[zlq@localhost test]$ cut -f1 -d, &lt;user.txt &gt;name.txt</span><br><span class="line">[zlq@localhost test]$ ls</span><br><span class="line">name.txt  user.txt</span><br><span class="line">[zlq@localhost test]$ cat name.txt </span><br><span class="line">zlq</span><br><span class="line">fsd</span><br><span class="line">ssh</span><br><span class="line">jjg</span><br><span class="line">[zlq@localhost test]$ cut -f2 -d, &lt;user.txt &gt;age.txt</span><br><span class="line">[zlq@localhost test]$ ls</span><br><span class="line">age.txt  name.txt  user.txt</span><br><span class="line">[zlq@localhost test]$ cat age.txt </span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">33</span><br><span class="line">44</span><br><span class="line">[zlq@localhost test]$ cut -f3 -d, &lt;user.txt &gt;addr.txt</span><br><span class="line">[zlq@localhost test]$ ls</span><br><span class="line">addr.txt  age.txt  name.txt  user.txt </span><br><span class="line">[zlq@localhost test]$ cat addr.txt </span><br><span class="line">anhui</span><br><span class="line">anhui</span><br><span class="line">hebei</span><br><span class="line">beijing</span><br><span class="line"></span><br><span class="line">[zlq@localhost test]$ paste name.txt addr.txt &gt;nameaddr.txt</span><br><span class="line">paste name.txt addr.txt &gt;&gt;nameaddr.txt区别</span><br><span class="line">[zlq@localhost test]$ ls</span><br><span class="line">addr.txt  age.txt  nameaddr.txt  name.txt  user.txt</span><br><span class="line">[zlq@localhost test]$ cat nameaddr.txt </span><br><span class="line">zlq	anhui</span><br><span class="line">fsd	anhui</span><br><span class="line">ssh	hebei</span><br><span class="line">jjg	beijing</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">&#96;col将tab替换成空格&#96;</span><br></pre></td></tr></table></figure>
<p>[zlq@localhost test]$ cat -A user1.txt<br>zlq^I11^Ianhui$<br>fsd^I22^Ianhui$<br>ssh^I33^Ihebei$<br>jjg^I44^Ibeijing$<br>[zlq@localhost test]$ col -x &lt;user1.txt&gt;user2.txt<br>[zlq@localhost test]$ cat -A user2.txt<br>zlq     11      anhui$<br>fsd     22      anhui$<br>ssh     33      hebei$<br>jjg     44      beijing$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;sort命令进行排序&#96;</span><br></pre></td></tr></table></figure>
<p>sort [options] [filename]<br>-r: 反向排序（降序) reverse<br>-f:忽略字符大小写 folds<br>-n:以数字顺序进行排序 numeric<br>-u:去掉重复行 unique<br>-t: -tc表示以字符c作为分隔符<br>-k: kN表示按第N个字段排序 k N1,N2先按N1排序，如果重复按N2排序</p>
<p>sort -r name.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;uniq命令去掉文件中相邻的重复行&#96;</span><br><span class="line"></span><br><span class="line">&gt;-c:行前显示该行出现的次数</span><br><span class="line">-d:只显示重复行</span><br><span class="line">-i:忽略字符大小写</span><br><span class="line">-u:只显示出现一次的行。</span><br><span class="line"></span><br><span class="line">sort -cid aa.txt 忽略大小写显示重复行。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;管道（|）操作&#96;</span><br><span class="line"></span><br><span class="line">&#96;命令1|命令2|.....&#96;</span><br><span class="line">命令1的输出作为命令2的输入</span><br><span class="line"></span><br><span class="line">&#96;cut -f1 -d: &#x2F;etc&#x2F;passwd |sort -r |more&#96; 查看linux系统所有用户名</span><br></pre></td></tr></table></figure>
<p>[root@localhost test]# ls<br>1.txt  3.jpg  4.txt  4.zip<br>[root@localhost test]# cat&gt;delete_lists<br>1.txt<br>3.jpg<br>4.txt<br>4.zip<br>[root@localhost test]# cat delete_lists<br>1.txt<br>3.jpg<br>4.txt<br>4.zip<br>[root@localhost test]# cat delete_lists |xargs rm -f<br>[root@localhost test]# ls<br>delete_lists</p>
<pre><code>`cat命令列出delete_lists`文件名 xargs命令将由管道得来的文件名转换成rm -f的参数列表

使用`tee`命令分流输出
`cut -f1 -d: /etc/passwd |tee passwd.cut |sort -r |tee passwd.sort |more`


`mail` 发送电子邮件
`mail -s &quot;hello&quot; `用户或邮箱
`-s subject`

`ls -l |mail -s &quot;list all&quot; root `列出本目录下的文件发送给root用户</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础-java反射</title>
    <url>/2020/07/01/java%E5%9F%BA%E7%A1%80/java%E5%9F%BA%E7%A1%80-java%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h1><blockquote>
<p>JAVA反射机制是在运行状态中，对于任意一个实体类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p>
</blockquote>
<h1 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h1><blockquote>
<p>反射机制(Reflection)是Java提供的一项较为高级的功能，它提供了一种动态功能，而此功能的体现在于通过反射机制相关的API就可以获取任何Java类的包括属性、方法、构造器、修饰符等信息。元素不必在JⅧ运行时进行确定，反射可以使得它们在运行时动态地进行创建或调用。反射技术在中间件领域应用得较多。</p>
</blockquote>
<p>#3. 反射相关的一些类<br><code>java.lang.Class</code> 类和接口<br><code>java.lang.reflect.Field</code> 类的成员变量<br><code>java.lang.reflect.Constructor</code> 类的构造方法<br><code>java.lang.reflect.Method</code> 类的方法</p>
<hr>
<p><strong>获取Class对象三种方式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;方式一 通过对象获取</span><br><span class="line">Person person &#x3D; new Person();</span><br><span class="line">Class personClass1 &#x3D; person.getClass();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式二 通过类名获取</span><br><span class="line">Class personClass2 &#x3D; Person.class;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式三 通过类名的全限定名字符串获取</span><br><span class="line">Class personClass3 &#x3D; Class.forName(&quot;com.d4c.reflection.demo.Person&quot;);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><ul>
<li>  <strong>获得类相关的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>asSubclass(Class<U> clazz)</td>
<td>把传递的类的对象转换成代表其子类的对象</td>
</tr>
<tr>
<td>Cast</td>
<td>把对象转换成代表类或是接口的对象</td>
</tr>
<tr>
<td>getClassLoader()</td>
<td>获得类的加载器</td>
</tr>
<tr>
<td>getClasses()</td>
<td>返回一个数组，数组中包含该类中所有公共类和接口类的对象</td>
</tr>
<tr>
<td>getDeclaredClasses()</td>
<td>返回一个数组，数组中包含该类中所有类和接口类的对象</td>
</tr>
<tr>
<td>forName(String className)</td>
<td>根据类名返回类的对象</td>
</tr>
<tr>
<td>getName()</td>
<td>获得类的完整路径名字</td>
</tr>
<tr>
<td>newInstance()</td>
<td>创建类的实例</td>
</tr>
<tr>
<td>getPackage()</td>
<td>获得类的包</td>
</tr>
<tr>
<td>getSimpleName()</td>
<td>获得类的名字</td>
</tr>
<tr>
<td>getSuperclass()</td>
<td>获得当前类继承的父类的名字</td>
</tr>
<tr>
<td>getInterfaces()</td>
<td>获得当前类实现的类或是接口</td>
</tr>
</tbody></table>
<ul>
<li>  <strong>获得类中属性相关的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>getField(String name)</td>
<td>获得某个公有的属性对象</td>
</tr>
<tr>
<td>getFields()</td>
<td>获得所有公有的属性对象</td>
</tr>
<tr>
<td>getDeclaredField(String name)</td>
<td>获得某个属性对象</td>
</tr>
<tr>
<td>getDeclaredFields()</td>
<td>获得所有属性对象</td>
</tr>
</tbody></table>
<ul>
<li>  <strong>获得类中注解相关的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>getAnnotation(Class<A> annotationClass)</td>
<td>返回该类中与参数类型匹配的公有注解对象</td>
</tr>
<tr>
<td>getAnnotations()</td>
<td>返回该类所有的公有注解对象</td>
</tr>
<tr>
<td>getDeclaredAnnotation(Class<A> annotationClass)</td>
<td>返回该类中与参数类型匹配的所有注解对象</td>
</tr>
<tr>
<td>getDeclaredAnnotations()</td>
<td>返回该类所有的注解对象</td>
</tr>
</tbody></table>
<ul>
<li>  <strong>获得类中构造器相关的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>getConstructor(Class…&lt;?&gt; parameterTypes)</td>
<td>获得该类中与参数类型匹配的公有构造方法</td>
</tr>
<tr>
<td>getConstructors()</td>
<td>获得该类的所有公有构造方法</td>
</tr>
<tr>
<td>getDeclaredConstructor(Class…&lt;?&gt; parameterTypes)</td>
<td>获得该类中与参数类型匹配的构造方法</td>
</tr>
<tr>
<td>getDeclaredConstructors()</td>
<td>获得该类所有构造方法</td>
</tr>
</tbody></table>
<ul>
<li>  <strong>获得类中方法相关的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>getMethod(String name, Class…&lt;?&gt; parameterTypes)</td>
<td>获得该类某个公有的方法</td>
</tr>
<tr>
<td>getMethods()</td>
<td>获得该类所有公有的方法</td>
</tr>
<tr>
<td>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td>
<td>获得该类某个方法</td>
</tr>
<tr>
<td>getDeclaredMethods()</td>
<td>获得该类所有方法</td>
</tr>
</tbody></table>
<ul>
<li>  <strong>类中其他重要的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>isAnnotation()</td>
<td>如果是注解类型则返回true</td>
</tr>
<tr>
<td>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</td>
<td>如果是指定类型注解类型则返回true</td>
</tr>
<tr>
<td>isAnonymousClass()</td>
<td>如果是匿名类则返回true</td>
</tr>
<tr>
<td>isArray()</td>
<td>如果是一个数组类则返回true</td>
</tr>
<tr>
<td>isEnum()</td>
<td>如果是枚举类则返回true</td>
</tr>
<tr>
<td>isInstance(Object obj)</td>
<td>如果obj是该类的实例则返回true</td>
</tr>
<tr>
<td>isInterface()</td>
<td>如果是接口类则返回true</td>
</tr>
<tr>
<td>isLocalClass()</td>
<td>如果是局部类则返回true</td>
</tr>
<tr>
<td>isMemberClass()</td>
<td>如果是内部类则返回true</td>
</tr>
</tbody></table>
<h1 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h1><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Field">Field</a>代表类的成员变量（成员变量也称为类的属性）。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>equals(Object obj)</td>
<td>属性与obj相等则返回true</td>
</tr>
<tr>
<td>get(Object obj)</td>
<td>获得obj中对应的属性值</td>
</tr>
<tr>
<td>set(Object obj, Object value)</td>
<td>设置obj中对应属性值</td>
</tr>
</tbody></table>
<h1 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h1><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Method">Method</a>代表类的方法。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>invoke(Object obj, Object… args)</td>
<td>传递object对象及参数调用该对象对应的方法</td>
</tr>
</tbody></table>
<h1 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类"></a>Constructor类</h1><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Constructor">Constructor</a>代表类的构造方法。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>newInstance(Object… initargs)</td>
<td>根据传递的参数创建类的对象</td>
</tr>
</tbody></table>
<h1 id="4-优点"><a href="#4-优点" class="headerlink" title="4. 优点"></a>4. 优点</h1><p>灵活性高。因为反射属于动态编译，即只有到运行时才动态创建 &amp;获取对象实例。</p>
<p>编译方式说明：</p>
<p>静态编译：在编译时确定类型 &amp; 绑定对象。如常见的使用new关键字创建对象<br>动态编译：运行时确定类型 &amp; 绑定对象。动态编译体现了Java的灵活性、多态特性 &amp; 降低类之间的藕合性</p>
<h1 id="5-缺点"><a href="#5-缺点" class="headerlink" title="5. 缺点"></a>5. 缺点</h1><p>执行效率低<br>因为反射的操作 主要通过JVM执行，所以时间成本会 高于 直接执行相同操作<br>因为接口的通用性，Java的invoke方法是传object和object[]数组的。基本类型参数需要装箱和拆箱，产生大量额外的对象和内存开销，频繁促发GC。<br>编译器难以对动态调用的代码提前做优化，比如方法内联。<br>反射需要按名检索类和方法，有一定的时间开销。<br>容易破坏类结构<br>因为反射操作饶过了源码，容易干扰类原有的内部逻辑#</p>
<h1 id="6-应用场景"><a href="#6-应用场景" class="headerlink" title="6. 应用场景"></a>6. 应用场景</h1><p>动态获取 类文件结构信息（如变量、方法等） &amp; 调用对象的方法<br>常用的需求场景有：动态代理、工厂模式优化、Java JDBC数据库操作等</p>
<p>#7.访问权限问题<br>反射机制的默认行为受限于Java的访问控制，无法访问（ private ）私有的方法、字段。Java安全机制只允许查看任意对象有哪些域，而不允许读它们的值，若强制读取，将抛出异常。</p>
<p><strong>解决方法</strong><br>脱离Java程序中安全管理器的控制、屏蔽Java语言的访问检查，从而脱离访问控制<br><strong>具体实现手段</strong>：使用Field类、Method类 &amp; Constructor类对象的setAccessible()</p>
<ul>
<li><p><code>void setAccessible(boolean flag)   </code><br>作用：为反射对象设置可访问标志<br>规则：flag = true时 ，表示已屏蔽Java语言的访问检查，使得可以访问 &amp; 修改对象的私有属性</p>
</li>
<li><p>  <code>boolean isAccessible()  </code><br>返回反射对象的可访问标志的值</p>
</li>
<li><p><code>static void setAccessible(AccessibleObject[] array, boolean flag)</code><br>设置对象数组可访问标志</p>
</li>
</ul>
<p><code>例子：</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.reflection.demo;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Created with IntelliJ IDEA.</span><br><span class="line"> * @author: liangqing.zhao(zlq)</span><br><span class="line"> * @date: 2019&#x2F;10&#x2F;12 22:35</span><br><span class="line"> * @Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ReflectDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;方式一 通过对象获取</span><br><span class="line">        Person person &#x3D; new Person();</span><br><span class="line">        Class personClass1 &#x3D; person.getClass();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;方式二 通过类名获取</span><br><span class="line">        Class personClass2 &#x3D; Person.class;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;方式三 通过类名的全限定名字符串获取</span><br><span class="line">        Class personClass3 &#x3D; Class.forName(&quot;com.d4c.reflection.demo.Person&quot;);</span><br><span class="line"></span><br><span class="line">        Class studentClass &#x3D; Class.forName(&quot;com.d4c.reflection.demo.Student&quot;);</span><br><span class="line">        Student student &#x3D; new Student(&quot;zlq&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;getFields 能够获取public修饰的field和父类中public修饰的field</span><br><span class="line">        Field[] fields &#x3D; studentClass.getFields();</span><br><span class="line">        for (Field field : fields) &#123;</span><br><span class="line">            System.out.println(&quot;field.getName() &#x3D; &quot; + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;--------------------------------------&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;getDeclaredFields 能够获取类中所有的field，但父类中的field获取不了</span><br><span class="line">        Field[] declaredfields &#x3D; studentClass.getDeclaredFields();</span><br><span class="line">        for (Field declaredfield : declaredfields) &#123;</span><br><span class="line">            System.out.println(&quot;declaredfield.getName() &#x3D; &quot; + declaredfield.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;--------------------------------------&quot;);</span><br><span class="line"></span><br><span class="line">        Field age &#x3D; personClass3.getDeclaredField(&quot;age&quot;);</span><br><span class="line">        &#x2F;&#x2F;为反射对象设置可访问标志,使得可以访问 &amp; 修改对象的私有属性</span><br><span class="line">        age.setAccessible(true);</span><br><span class="line">        System.out.println(&quot;before age:&quot; + age.get(person));</span><br><span class="line">        age.set(person, 100);</span><br><span class="line">        System.out.println(&quot;after age:&quot; + age.get(person));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;--------------------------------------&quot;);</span><br><span class="line"></span><br><span class="line">        Field[] declaredFields &#x3D; studentClass.getDeclaredFields();</span><br><span class="line">        &#x2F;&#x2F;批量给访问权限</span><br><span class="line">        AccessibleObject.setAccessible(declaredFields, true);</span><br><span class="line">        </span><br><span class="line">        for (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(&quot;declaredField.get(student) &#x3D; &quot; + declaredField.get(student));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="8-利用反射获取和设置值"><a href="#8-利用反射获取和设置值" class="headerlink" title="8 利用反射获取和设置值"></a>8 利用反射获取和设置值</h1><ul>
<li><p>利用反射获取类的属性 &amp; 赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.reflection.demo;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Created with IntelliJ IDEA.</span><br><span class="line"> * @author: liangqing.zhao(zlq)</span><br><span class="line"> * @date: 2019&#x2F;10&#x2F;12 22:20</span><br><span class="line"> * @Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">public class PersonDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        &#x2F;&#x2F; 获取Person类的Class对象</span><br><span class="line">        Class personClass &#x3D; Person.class;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 通过Class对象创建Person类的对象</span><br><span class="line">        Object person &#x3D; personClass.newInstance();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 通过Class对象获取Person类的nage属性</span><br><span class="line">        Field field &#x3D; personClass.getDeclaredField(&quot;age&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 设置私有访问权限</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 对新创建的person对象设置age值</span><br><span class="line">        field.set(person, 99);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取新创建person对象的的age属性 &amp; 输出</span><br><span class="line">        System.out.println(field.get(person));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用反射调用类的构造函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;  获取Person类的Class对象</span><br><span class="line">Class personClass &#x3D; Person.class;</span><br><span class="line">&#x2F;&#x2F;通过Class对象获取Constructor类对象，从而调用无参构造方法</span><br><span class="line">&#x2F;&#x2F;构造函数的调用实际上是在newInstance()，而不是在getConstructor()中调用</span><br><span class="line">Object obj1 &#x3D; personClass.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过Class对象获取Constructor类对象（传入参数类型），从而调用有参构造方法</span><br><span class="line">Object obj2 &#x3D; personClass.getConstructor(String.class).newInstance(&quot;Carson&quot;);</span><br><span class="line"></span><br><span class="line">Object obj3 &#x3D; personClass.getConstructor(Integer.class, String.class, String.class).newInstance(99, &quot;zlq&quot;, &quot;hello world&quot;);</span><br></pre></td></tr></table></figure></li>
<li><p>利用反射调用类对象的方法</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;  获取Person类的Class对象</span><br><span class="line">Class personClass3 &#x3D; Person.class;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过Class对象创建Person类的对象</span><br><span class="line">Object  person3 &#x3D; personClass3.newInstance();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过Class对象获取方法getSay的Method对象:需传入方法名</span><br><span class="line">Method getSayMethod &#x3D; personClass3.getMethod(&quot;getSay&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过Method对象调用getSay()：需传入创建的实例</span><br><span class="line">getSayMethod.invoke(person3);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过Class对象获取方法setSay 的Method对象:需传入方法名 &amp; 参数类型</span><br><span class="line">Method setSayMethod &#x3D; personClass3.getMethod(&quot;setSay&quot;,String.class);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过Method对象调用setSay 需传入创建的实例 &amp; 参数值</span><br><span class="line">setSayMethod.invoke(person3,&quot;oop&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://link.jianshu.com/?t=http://blog.qiji.tech/archives/4374">认识反射机制（Reflection）</a><br><a href="http://www.cnblogs.com/mengdd/archive/2013/01/26/2877972.html">Java 反射机制</a><br><a href="http://blog.csdn.net/ljphhj/article/details/12858767">一个例子让你了解Java反射机制</a><br><a href="https://link.jianshu.com/?t=http://www.cnblogs.com/crazypebble/archive/2011/04/13/2014582.html">Java反射机制的原理及在Android下的简单应用</a><br><a href="https://link.jianshu.com/?t=http://zlb1986.iteye.com/blog/937781">java中的反射机制</a><br><a href="https://link.jianshu.com/?t=http://efany.github.io/2016/04/02/Android%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/">Android注解与反射机制</a><br><a href="https://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn">java.lang.reflect.Method</a></p>
<hr>
<p><a href="https://www.jianshu.com/p/356e1d7a9d11">Java反射：这是一份全面 &amp; 详细的 Java反射机制 学习指南</a><br><a href="https://www.jianshu.com/p/9be58ee20dee">Java高级特性——反射</a><br><a href="https://www.jianshu.com/p/607ff4e79a13">Java反射完全解析</a></p>
<p><a href="https://www.cnblogs.com/jiangzhaowei/p/9364330.html">Java反射机制的适用场景及其利与弊 </a><br> <a href="https://www.cnblogs.com/vielat/p/10246596.html">Java各种反射性能对比</a><br><a href="https://www.cnblogs.com/yonyong/p/9429079.html">深入解析Java反射</a><br><a href="https://baijiahao.baidu.com/s?id=1619604957177623053&wfr=spider&for=pc">Java编程中基础反射详细解析</a><br><a href="https://blog.csdn.net/a745233700/article/details/82893076">Java基础篇：反射机制详解</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK5，6，7，8，9，10，11，12，13特性</title>
    <url>/2020/07/04/java%E5%9F%BA%E7%A1%80/JDK5%EF%BC%8C6%EF%BC%8C7%EF%BC%8C8%EF%BC%8C9%EF%BC%8C10%EF%BC%8C11%EF%BC%8C12%EF%BC%8C13%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="JDK5"><a href="#JDK5" class="headerlink" title="JDK5"></a>JDK5</h3><h4 id="1-泛型-Generics"><a href="#1-泛型-Generics" class="headerlink" title="1.泛型 (Generics)"></a>1.泛型 (Generics)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br></pre></td></tr></table></figure>

<h4 id="2-增强循环（Enhanced-for-Loop）"><a href="#2-增强循环（Enhanced-for-Loop）" class="headerlink" title="2.增强循环（Enhanced for Loop）"></a>2.增强循环（Enhanced for Loop）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i : array) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>

<h4 id="3-自动封箱拆箱-Autoboxing-Unboxing"><a href="#3-自动封箱拆箱-Autoboxing-Unboxing" class="headerlink" title="3.自动封箱拆箱(Autoboxing/Unboxing )"></a>3.自动封箱拆箱(Autoboxing/Unboxing )</h4><p>八大基本类型和它们的包装类能够自动的相互转换。</p>
<table>
<thead>
<tr>
<th>简单类型</th>
<th>boolean</th>
<th>byte</th>
<th>char</th>
<th>short</th>
<th>Int</th>
<th>long</th>
<th>float</th>
<th>double</th>
<th>void</th>
</tr>
</thead>
<tbody><tr>
<td>二进制位数</td>
<td>1</td>
<td>8</td>
<td>16</td>
<td>16</td>
<td>32</td>
<td>64</td>
<td>32</td>
<td>64</td>
<td>–</td>
</tr>
<tr>
<td>封装器类</td>
<td>Boolean</td>
<td>Byte</td>
<td>Character</td>
<td>Short</td>
<td>Integer</td>
<td>Long</td>
<td>Float</td>
<td>Double</td>
<td>Void</td>
</tr>
</tbody></table>
<h4 id="4-枚举-Typesafe-Enums"><a href="#4-枚举-Typesafe-Enums" class="headerlink" title="4.枚举(Typesafe Enums)"></a>4.枚举(Typesafe Enums)</h4><p>ps:枚举是一种实现线程安全的单例模式的好方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TestEnum</span></span>&#123;</span><br><span class="line">        one,</span><br><span class="line">        two;</span><br><span class="line">        TestEnum() &#123;</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-可变参数-Varargs"><a href="#5-可变参数-Varargs" class="headerlink" title="5.可变参数 (Varargs)"></a>5.可变参数 (Varargs)</h4><ul>
<li>语法：(type… arguments)<br>可变参数本质仍然是用一个数组存储参数，只是java隐藏了这一过程。需要注意的是如果一个方法声明中含有可变参数，那必须放在最后一个位置。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 可变参数测试</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testVarargs</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//本质就是个数组</span></span><br><span class="line">    System.out.println(args[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">        System.out.println(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-静态导入（Static-Import）"><a href="#6-静态导入（Static-Import）" class="headerlink" title="6.静态导入（Static Import）"></a>6.静态导入（Static Import）</h4><p>通过import类来使用类里的静态变量或方法（直接通过名字，不需要加上类名.）,简化了代码的书写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单个导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"><span class="comment">//批量导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br></pre></td></tr></table></figure>

<p>ps:过去的版本中只能通过继承类或实现接口才能使用。</p>
<h4 id="7-注解（Annotations）-关键字-interface"><a href="#7-注解（Annotations）-关键字-interface" class="headerlink" title="7.注解（Annotations）,关键字@interface"></a>7.注解（Annotations）,关键字@interface</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注释注解的注解又叫做元注解</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotations &#123;</span><br><span class="line">    <span class="comment">//注解内可以添加方法，也可以不添加</span></span><br><span class="line">    <span class="comment">//注解方法的返回值只能是基本类型，String，Class类,枚举,注解,可以有默认值。</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;whh&quot;</span>;</span><br><span class="line">    <span class="function">Class <span class="title">classType</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">TestEnum <span class="title">enumType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-新的线程模型和并发库（java-util-concurrent"><a href="#8-新的线程模型和并发库（java-util-concurrent" class="headerlink" title="8.新的线程模型和并发库（java.util.concurrent)"></a>8.新的线程模型和并发库（java.util.concurrent)</h4><h3 id="JDK6"><a href="#JDK6" class="headerlink" title="JDK6"></a>JDK6</h3><h4 id="1-集合框架增强"><a href="#1-集合框架增强" class="headerlink" title="1.集合框架增强"></a>1.集合框架增强</h4><ul>
<li>为了更好的支持双向访问集合。添加了许多新的类和接口。</li>
<li>新的数组拷贝方法。Arrays.copyOf和Arrays.copyOfRange</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下为添加的新接口和类</span></span><br><span class="line">Deque,BlockingDeque,NavigableSet,NavigableMap,ConcurrentNavigableMap，ArrayDeque， ConcurrentSkipListSet ,ConcurrentSkipListMap,ConcurrentSkipListMap ,AbstractMap.SimpleEntry ,AbstractMap.SimpleImmutableEntry</span><br></pre></td></tr></table></figure>

<h4 id="2-Scripting"><a href="#2-Scripting" class="headerlink" title="2.Scripting"></a>2.Scripting</h4><p>可以让其他语言在java平台上运行。 java6包含了一个基于Mozilla Rhino实现的javascript脚本引擎。</p>
<h4 id="3-支持JDBC4-0规范"><a href="#3-支持JDBC4-0规范" class="headerlink" title="3.支持JDBC4.0规范"></a>3.支持JDBC4.0规范</h4><h3 id="JDK7"><a href="#JDK7" class="headerlink" title="JDK7"></a>JDK7</h3><h4 id="1-二进制前缀0b或者0B"><a href="#1-二进制前缀0b或者0B" class="headerlink" title="1.二进制前缀0b或者0B"></a>1.二进制前缀0b或者0B</h4><p>整型（byte, short, int, long）可以直接用二进制表示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二进制字面值前缀0b 或0B</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0b010</span>;<span class="comment">//10进制值为2</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0B010</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-字面常量数字的下划线"><a href="#2-字面常量数字的下划线" class="headerlink" title="2.字面常量数字的下划线"></a>2.字面常量数字的下划线</h4><p>用下划线连接整数提升其可读性，自身无含义，不可用在数字的起始和末尾。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数字间的下划线不影响实际值</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1_1</span>;<span class="comment">//值为11</span></span><br></pre></td></tr></table></figure>

<h4 id="3-switch-支持String类型"><a href="#3-switch-支持String类型" class="headerlink" title="3.switch 支持String类型"></a>3.switch 支持String类型</h4><h4 id="4-泛型实例化类型自动推断"><a href="#4-泛型实例化类型自动推断" class="headerlink" title="4.泛型实例化类型自动推断"></a>4.泛型实例化类型自动推断</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; myMap = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;(); <span class="comment">// 之前</span></span><br><span class="line">Map&lt;String, List&lt;String&gt;&gt; myMap = <span class="keyword">new</span> HashMap&lt;&gt;();   <span class="comment">// 现在</span></span><br></pre></td></tr></table></figure>

<h4 id="5-try-with-resources语句"><a href="#5-try-with-resources语句" class="headerlink" title="5.try-with-resources语句"></a>5.try-with-resources语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 声明在try括号中的对象称为资源，在方法执行完毕后会被自动关闭,相对与之前必须在finally关闭资源，这一      *特性大大提高了代码的简洁性。</span></span><br><span class="line"><span class="comment">* 所有实现java.lang.AutoCloseable接口的类都作为资源被自动关闭。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(String src, String dst)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">         OutputStream out = <span class="keyword">new</span> FileOutputStream(dst)) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">while</span> ((n = in.read(buff)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            out.write(buff, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-单个catch中捕获多个异常类型"><a href="#6-单个catch中捕获多个异常类型" class="headerlink" title="6.单个catch中捕获多个异常类型"></a>6.单个catch中捕获多个异常类型</h4><p>（用| 分割）并通过改进的类型检查重新抛出异常</p>
<h3 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h3><h4 id="1-lambada表达式-Lambda-Expressions"><a href="#1-lambada表达式-Lambda-Expressions" class="headerlink" title="1.lambada表达式(Lambda Expressions)"></a>1.lambada表达式(Lambda Expressions)</h4><p>Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中)。</p>
<h4 id="2-方法引用（Method-references）"><a href="#2-方法引用（Method-references）" class="headerlink" title="2.方法引用（Method references）"></a>2.方法引用（Method references）</h4><p>方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，可以使语言的构造更紧凑简洁，减少冗余代码。</p>
<h4 id="3-默认方法（Default-methods）"><a href="#3-默认方法（Default-methods）" class="headerlink" title="3.默认方法（Default methods）"></a>3.默认方法（Default methods）</h4><p>默认方法允许将新功能添加到库的接口中，并确保兼容实现老版本接口的旧有代码。接口新增：默认方法与静态方法</p>
<h4 id="4-重复注解（Repeating-Annotations）"><a href="#4-重复注解（Repeating-Annotations）" class="headerlink" title="4.重复注解（Repeating Annotations）"></a>4.重复注解（Repeating Annotations）</h4><p>重复注解提供了在同一声明或类型中多次应用相同注解类型的能力。</p>
<h4 id="5-类型注解（Type-Annotation）"><a href="#5-类型注解（Type-Annotation）" class="headerlink" title="5.类型注解（Type Annotation）"></a>5.类型注解（Type Annotation）</h4><p>在任何地方都能使用注解，而不是在声明的地方。</p>
<h4 id="6-类型推断增强"><a href="#6-类型推断增强" class="headerlink" title="6.类型推断增强"></a>6.类型推断增强</h4><h4 id="7-方法参数反射（Method-Parameter-Reflection）"><a href="#7-方法参数反射（Method-Parameter-Reflection）" class="headerlink" title="7.方法参数反射（Method Parameter Reflection）"></a>7.方法参数反射（Method Parameter Reflection）</h4><h4 id="8-Stream-API"><a href="#8-Stream-API" class="headerlink" title="8.Stream API"></a>8.Stream API</h4><p>新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。Stream API集成到了Collections API里。</p>
<h4 id="9-HashMap改进"><a href="#9-HashMap改进" class="headerlink" title="9.HashMap改进"></a>9.HashMap改进</h4><p>在键值哈希冲突时能有更好表现。</p>
<h4 id="10-Date-Time-API"><a href="#10-Date-Time-API" class="headerlink" title="10.Date Time API"></a>10.Date Time API</h4><p>加强对日期和时间的处理。</p>
<h4 id="11-java-util-包下的改进"><a href="#11-java-util-包下的改进" class="headerlink" title="11.java.util 包下的改进"></a>11.java.util 包下的改进</h4><p>提供了几个实用的工具类。</p>
<ul>
<li>并行数组排序。</li>
<li>标准的Base64编解码。</li>
<li>支持无符号运算。</li>
</ul>
<h4 id="12-java-util-concurrent-包下增加了新的类和方法"><a href="#12-java-util-concurrent-包下增加了新的类和方法" class="headerlink" title="12.java.util.concurrent 包下增加了新的类和方法"></a>12.java.util.concurrent 包下增加了新的类和方法</h4><ul>
<li>java.util.concurrent.ConcurrentHashMap 类添加了新的方法以支持新的StreamApi和lambada表达式。</li>
<li>java.util.concurrent.atomic 包下新增了类以支持可伸缩可更新的变量。</li>
<li>java.util.concurrent.ForkJoinPool类新增了方法以支持 common pool。</li>
<li>新增了java.util.concurrent.locks.StampedLock类，为控制读/写访问提供了一个基于性能的锁，且有三种模式可供选择。</li>
</ul>
<h4 id="13-HotSpot"><a href="#13-HotSpot" class="headerlink" title="13.HotSpot"></a>13.HotSpot</h4><ul>
<li>删除了 永久代（PermGen）,取代它的是Metaspace（JEP 122）元空间</li>
<li>方法调用的字节码指令支持默认方法。</li>
</ul>
<h3 id="JDK9"><a href="#JDK9" class="headerlink" title="JDK9"></a>JDK9</h3><h4 id="1-java模块系统-（Java-Platform-Module-System）。"><a href="#1-java模块系统-（Java-Platform-Module-System）。" class="headerlink" title="1.java模块系统 （Java Platform Module System）。"></a>1.java模块系统 （Java Platform Module System）。</h4><h4 id="2-新的版本号格式"><a href="#2-新的版本号格式" class="headerlink" title="2.新的版本号格式"></a>2.新的版本号格式</h4><p>MAJOR.MAJOR.<em>M<strong>A</strong>J<strong>O</strong>R</em>.MINOR.SECURITY.SECURITY.<em>S<strong>E</strong>C<strong>U</strong>R<strong>I</strong>T**Y</em>.PATCH</p>
<h4 id="3-java-shell"><a href="#3-java-shell" class="headerlink" title="3.java shell"></a>3.java shell</h4><p>JShell 工具 jShell命令 ,交互式命令行控制台</p>
<h4 id="4-在private-instance-methods方法上可以使用-SafeVarargs注解。"><a href="#4-在private-instance-methods方法上可以使用-SafeVarargs注解。" class="headerlink" title="4.在private instance methods方法上可以使用@SafeVarargs注解。"></a>4.在private instance methods方法上可以使用@SafeVarargs注解。</h4><h4 id="5-diamond语法与匿名内部类结合使用"><a href="#5-diamond语法与匿名内部类结合使用" class="headerlink" title="5.diamond语法与匿名内部类结合使用"></a>5.diamond语法与匿名内部类结合使用</h4><p>钻石操作符升级 可以有{} </p>
<h4 id="6-下划线不能用在变量名中"><a href="#6-下划线不能用在变量名中" class="headerlink" title="6.下划线不能用在变量名中"></a>6.下划线不能用在变量名中</h4><h4 id="7-支持私有接口方法"><a href="#7-支持私有接口方法" class="headerlink" title="7.支持私有接口方法"></a>7.支持私有接口方法</h4><p>在接口中 jdk7 只能声明全名常量和抽象方法 jdk8 添加了静态方法和默认方法 jdk9添加了私有方法,可以使用diamond语法与匿名内部类结合使用。</p>
<h4 id="8-Javadoc"><a href="#8-Javadoc" class="headerlink" title="8.Javadoc"></a>8.Javadoc</h4><ul>
<li>简化Doclet API。</li>
<li>支持生成HTML5格式。</li>
<li>加入了搜索框,使用这个搜索框可以查询程序元素、标记的单词和文档中的短语。</li>
<li>支持新的模块系统。</li>
</ul>
<h4 id="9-JVM"><a href="#9-JVM" class="headerlink" title="9.JVM"></a>9.JVM</h4><ul>
<li>增强了Garbage-First(G1)并用它替代Parallel GC成为默认的垃圾收集器。</li>
<li>统一了JVM 日志，为所有组件引入了同一个日志系统。</li>
<li>删除了JDK 8中弃用的GC组合。（DefNew + CMS，ParNew + SerialOld，Incremental CMS）。</li>
</ul>
<h4 id="10-properties文件支持UTF-8编码"><a href="#10-properties文件支持UTF-8编码" class="headerlink" title="10.properties文件支持UTF-8编码"></a>10.properties文件支持UTF-8编码</h4><p>之前只支持ISO-8859-1。</p>
<h4 id="11-支持Unicode-8-0"><a href="#11-支持Unicode-8-0" class="headerlink" title="11.支持Unicode 8.0"></a>11.支持Unicode 8.0</h4><p>在JDK8中是Unicode 6.2。</p>
<h4 id="12-目录结构"><a href="#12-目录结构" class="headerlink" title="12.目录结构"></a>12.目录结构</h4><h4 id="13-多版本兼容jar包"><a href="#13-多版本兼容jar包" class="headerlink" title="13.多版本兼容jar包"></a>13.多版本兼容jar包</h4><h4 id="14-异常处理try升级"><a href="#14-异常处理try升级" class="headerlink" title="14.异常处理try升级"></a>14.异常处理try升级</h4><h4 id="15-String底层存储结构的变更"><a href="#15-String底层存储结构的变更" class="headerlink" title="15.String底层存储结构的变更"></a>15.String底层存储结构的变更</h4><p>char数组变成byte字节数组</p>
<h4 id="16-增强了Stream-API"><a href="#16-增强了Stream-API" class="headerlink" title="16.增强了Stream API"></a>16.增强了Stream API</h4><p>在java8基础上，新增加4个方法</p>
<h4 id="17-引入httpClient-api"><a href="#17-引入httpClient-api" class="headerlink" title="17.引入httpClient api"></a>17.引入httpClient api</h4><p>代替原有的HttpURLConnection </p>
<h3 id="Java10"><a href="#Java10" class="headerlink" title="Java10"></a>Java10</h3><h4 id="1-局部变量类型推断（Local-Variable-Type-Inference）"><a href="#1-局部变量类型推断（Local-Variable-Type-Inference）" class="headerlink" title="1.局部变量类型推断（Local-Variable Type Inference）"></a>1.局部变量类型推断（Local-Variable Type Inference）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//之前的代码格式</span></span><br><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://www.oracle.com/&quot;</span>); </span><br><span class="line">URLConnection conn = url.openConnection(); </span><br><span class="line">Reader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream()))</span><br><span class="line"><span class="comment">//java10中用var来声明变量</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="keyword">new</span> URL(<span class="string">&quot;http://www.oracle.com/&quot;</span>); </span><br><span class="line"><span class="keyword">var</span> conn = url.openConnection(); </span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream()));</span><br></pre></td></tr></table></figure>

<p>var是一个保留类型名称，而不是关键字。所以之前使用var作为变量、方法名、包名的都没问题，但是如果作为类或接口名，那么这个类和接口就必须重命名了。</p>
<p>var的使用场景主要有以下四种：</p>
<ul>
<li>本地变量初始化。</li>
<li>增强for循环中。</li>
<li>传统for循环中声明的索引变量。</li>
<li>Try-with-resources 变量。</li>
</ul>
<h4 id="2-Optional类添加了新的方法orElseThrow"><a href="#2-Optional类添加了新的方法orElseThrow" class="headerlink" title="2.Optional类添加了新的方法orElseThrow"></a>2.Optional类添加了新的方法orElseThrow</h4><p>相比于已经存在的get方法，这个方法更推荐使用。</p>
<h4 id="3-GC改进和内存管理"><a href="#3-GC改进和内存管理" class="headerlink" title="3.GC改进和内存管理"></a>3.GC改进和内存管理</h4><h4 id="4-线程本地握手"><a href="#4-线程本地握手" class="headerlink" title="4.线程本地握手"></a>4.线程本地握手</h4><h4 id="5-备用内存设备上的堆分配"><a href="#5-备用内存设备上的堆分配" class="headerlink" title="5.备用内存设备上的堆分配"></a>5.备用内存设备上的堆分配</h4><h4 id="6-其他Unicode语言-标记扩展"><a href="#6-其他Unicode语言-标记扩展" class="headerlink" title="6.其他Unicode语言 - 标记扩展"></a>6.其他Unicode语言 - 标记扩展</h4><h4 id="7-基于Java的实验性JIT编译器"><a href="#7-基于Java的实验性JIT编译器" class="headerlink" title="7.基于Java的实验性JIT编译器"></a>7.基于Java的实验性JIT编译器</h4><h4 id="8-开源根证书"><a href="#8-开源根证书" class="headerlink" title="8.开源根证书"></a>8.开源根证书</h4><h4 id="9-根证书颁发认证（CA）"><a href="#9-根证书颁发认证（CA）" class="headerlink" title="9.根证书颁发认证（CA）"></a>9.根证书颁发认证（CA）</h4><h4 id="10-将JDK生态整合单个存储库"><a href="#10-将JDK生态整合单个存储库" class="headerlink" title="10.将JDK生态整合单个存储库"></a>10.将JDK生态整合单个存储库</h4><h4 id="11-删除工具javah"><a href="#11-删除工具javah" class="headerlink" title="11.删除工具javah"></a>11.删除工具javah</h4><h3 id="Java11"><a href="#Java11" class="headerlink" title="Java11"></a>Java11</h3><h4 id="1-支持Unicode-10-0"><a href="#1-支持Unicode-10-0" class="headerlink" title="1.支持Unicode 10.0"></a>1.支持Unicode 10.0</h4><p>在jdk10中是8.0。</p>
<h4 id="2-标准化HTTP-Client"><a href="#2-标准化HTTP-Client" class="headerlink" title="2.标准化HTTP Client"></a>2.标准化HTTP Client</h4><h4 id="3-编译器线程的延迟分配"><a href="#3-编译器线程的延迟分配" class="headerlink" title="3.编译器线程的延迟分配"></a>3.编译器线程的延迟分配</h4><p>添加了新的命令-XX:+UseDynamicNumberOfCompilerThreads动态控制编译器线程的数量。</p>
<h4 id="4-新的垃圾收集器—ZGC"><a href="#4-新的垃圾收集器—ZGC" class="headerlink" title="4.新的垃圾收集器—ZGC"></a>4.新的垃圾收集器—ZGC</h4><p>ZGC: A Scalable Low-Latency Garbage Collector（一种可伸缩的低延迟垃圾收集器(实验性)）</p>
<h4 id="5-Epsilon"><a href="#5-Epsilon" class="headerlink" title="5.Epsilon"></a>5.Epsilon</h4><p>一款新的实验性无操作垃圾收集器。Epsilon GC 只负责内存分配，不实现任何内存回收机制。这对于性能测试非常有用，可用于与其他GC对比成本和收益。</p>
<h4 id="6-Lambda参数的局部变量语法"><a href="#6-Lambda参数的局部变量语法" class="headerlink" title="6.Lambda参数的局部变量语法"></a>6.Lambda参数的局部变量语法</h4><p>java10中引入的var字段得到了增强，现在可以用在lambda表达式的声明中。如果lambda表达式的其中一个形式参数使用了var，那所有的参数都必须使用var。</p>
<h4 id="7-嵌套类可见性控制"><a href="#7-嵌套类可见性控制" class="headerlink" title="7.嵌套类可见性控制"></a>7.嵌套类可见性控制</h4><h4 id="8-动态文件常量"><a href="#8-动态文件常量" class="headerlink" title="8.动态文件常量"></a>8.动态文件常量</h4><h4 id="9-改进-Aarch64-Intrinsics"><a href="#9-改进-Aarch64-Intrinsics" class="headerlink" title="9.改进 Aarch64 Intrinsics"></a>9.改进 Aarch64 Intrinsics</h4><h4 id="10-删除-Java-EE-和-CORBA-模块"><a href="#10-删除-Java-EE-和-CORBA-模块" class="headerlink" title="10.删除 Java EE 和 CORBA 模块"></a>10.删除 Java EE 和 CORBA 模块</h4><h4 id="11-Curve25519-和-Curve448-算法的密钥协议"><a href="#11-Curve25519-和-Curve448-算法的密钥协议" class="headerlink" title="11.Curve25519 和 Curve448 算法的密钥协议"></a>11.Curve25519 和 Curve448 算法的密钥协议</h4><h4 id="12-Flight-Recorder-飞行记录器"><a href="#12-Flight-Recorder-飞行记录器" class="headerlink" title="12.Flight Recorder(飞行记录器)"></a>12.Flight Recorder(飞行记录器)</h4><h4 id="13-haCha20-和-Poly1305-加密算法支持"><a href="#13-haCha20-和-Poly1305-加密算法支持" class="headerlink" title="13.haCha20 和 Poly1305 加密算法支持"></a>13.haCha20 和 Poly1305 加密算法支持</h4><h4 id="14-Launch-Single-File-Source-Code-Programs（启动单一文件的源代码程序）"><a href="#14-Launch-Single-File-Source-Code-Programs（启动单一文件的源代码程序）" class="headerlink" title="14.Launch Single-File Source-Code Programs（启动单一文件的源代码程序）"></a>14.Launch Single-File Source-Code Programs（启动单一文件的源代码程序）</h4><h4 id="15-低开销的-Heap-Profiling"><a href="#15-低开销的-Heap-Profiling" class="headerlink" title="15.低开销的 Heap Profiling"></a>15.低开销的 Heap Profiling</h4><h4 id="16-TLS-1-3支持"><a href="#16-TLS-1-3支持" class="headerlink" title="16.TLS 1.3支持"></a>16.TLS 1.3支持</h4><h4 id="17-弃用-Nashorn-JavaScript-引擎"><a href="#17-弃用-Nashorn-JavaScript-引擎" class="headerlink" title="17.弃用 Nashorn JavaScript 引擎"></a>17.弃用 Nashorn JavaScript 引擎</h4><h4 id="18-弃用-Pack200-工具和-API"><a href="#18-弃用-Pack200-工具和-API" class="headerlink" title="18.弃用 Pack200 工具和 API"></a>18.弃用 Pack200 工具和 API</h4><h3 id="jdk12"><a href="#jdk12" class="headerlink" title="jdk12"></a>jdk12</h3><h4 id="1-Switch-Expressions"><a href="#1-Switch-Expressions" class="headerlink" title="1.Switch Expressions"></a>1.Switch Expressions</h4><p>这是一个为开发者准备的特性，我们可以利用具体代码快速了解一下，下面是传统 statement 形式的 switch 语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">        <span class="keyword">case</span> MONDAY:</span><br><span class="line">        <span class="keyword">case</span> FRIDAY:</span><br><span class="line">        <span class="keyword">case</span> SUNDAY:</span><br><span class="line">            System.out.println(<span class="number">6</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TUESDAY:</span><br><span class="line">            System.out.println(<span class="number">7</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> THURSDAY:</span><br><span class="line">        <span class="keyword">case</span> SATURDAY:</span><br><span class="line">            System.out.println(<span class="number">8</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WEDNESDAY:</span><br><span class="line">            System.out.println(<span class="number">9</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p>如果有编码经验，你一定知道，switch 语句如果漏写了一个 break，那么逻辑往往就跑偏了，这种方式既繁琐，又容易出错。如果换成 switch 表达式，Pattern Matching 机制能够自然地保证只有单一路径会被执行，请看下面的代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line"><span class="keyword">case</span> MONDAY, FRIDAY, SUNDAY -&gt; System.out.println(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">case</span> TUESDAY -&gt; System.out.println(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">case</span> THURSDAY, SATURDAY -&gt; System.out.println(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">case</span> WEDNESDAY -&gt; System.out.println(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>更进一步，下面的表达式，为我们提供了优雅地表达特定场合计算逻辑的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> numLetters = <span class="keyword">switch</span> (day) &#123;</span><br><span class="line"><span class="keyword">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class="number">6</span>;</span><br><span class="line"><span class="keyword">case</span> TUESDAY -&gt; <span class="number">7</span>;</span><br><span class="line"><span class="keyword">case</span> THURSDAY, SATURDAY -&gt; <span class="number">8</span>;</span><br><span class="line"><span class="keyword">case</span> WEDNESDAY -&gt; <span class="number">9</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>Switch Expressions 或者说起相关的 Pattern Matching 特性，为我们提供了勾勒出了 Java 语法进化的一个趋势，将开发者从复杂繁琐的低层次抽象中逐渐解放出来，以更高层次更优雅的抽象，既降低代码量，又避免意外编程错误的出现，进而提高代码质量和开发效率。</p>
<h4 id="2-Shenandoah-GC"><a href="#2-Shenandoah-GC" class="headerlink" title="2.Shenandoah GC"></a>2.Shenandoah GC</h4><p>新增了一个名为 Shenandoah 的 GC 算法，通过与正在运行的 Java 线程同时进行 evacuation 工作来减少 GC 暂停时间。使用 Shenandoah 的暂停时间与堆大小无关，这意味着无论堆是 200 MB 还是 200 GB，都将具有相同的暂停时间。</p>
<h3 id="JDK13"><a href="#JDK13" class="headerlink" title="JDK13"></a>JDK13</h3><p>JDK13于9月17日正式发布。目前该版本包含的特性已经全部固定，主要包含以下五个：</p>
<p>下面来逐一介绍下这五个重要的特性。</p>
<h4 id="1-Dynamic-CDS-Archives"><a href="#1-Dynamic-CDS-Archives" class="headerlink" title="1.Dynamic CDS Archives"></a>1.Dynamic CDS Archives</h4><p>这一特性是在JEP310：Application Class-Data Sharing基础上扩展而来的，Dynamic CDS Archives中的CDS指的就是Class-Data Sharing。</p>
<p>那么，这个JEP310是个啥东西呢？</p>
<p>我们知道在同一个物理机／虚拟机上启动多个JVM时，如果每个虚拟机都单独装载自己需要的所有类，启动成本和内存占用是比较高的。所以Java团队引入了CDS的概念，通过把一些核心类在每个JVM间共享，每个JVM只需要装载自己的应用类，启动时间减少了，另外核心类是共享的，所以JVM的内存占用也减少了。</p>
<p>CDS 只能作用于 Boot Class Loader 加载的类，不能作用于 App Class Loader 或者自定义的 Class Loader 加载的类。</p>
<p>在 Java 10 中，则将 CDS 扩展为 AppCDS，顾名思义，AppCDS 不止能够作用于 Boot Class Loader了，App Class Loader 和自定义的 Class Loader 也都能够起作用，大大加大了 CDS 的适用范围。也就说开发自定义的类也可以装载给多个JVM共享了。</p>
<p>Java 10中包含的JEP310的通过跨不同Java进程共享公共类元数据来减少了内存占用和改进了启动时间。</p>
<p>但是，JEP310中，使用AppCDS的过程还是比较复杂的，需要有三个步骤：</p>
<p>这一次的JDK 13中的JEP 350 ，在JEP310的基础上，又做了一些扩展。允许在Java应用程序执行结束时动态归档类，归档类将包括默认的基础层 CDS（class data-sharing）存档中不存在的所有已加载的应用程序类和库类。</p>
<p>也就是说，在Java 13中再使用AppCDS的时候，就不在需要这么复杂了。</p>
<h4 id="2-ZGC-Uncommit-Unused-Memory"><a href="#2-ZGC-Uncommit-Unused-Memory" class="headerlink" title="2.ZGC: Uncommit Unused Memory"></a>2.ZGC: Uncommit Unused Memory</h4><p>在讨论这个问题之前，想先问一个问题，JVM的GC释放的内存会还给操作系统吗？</p>
<p>GC后的内存如何处置，其实是取决于不同的垃圾回收器的。因为把内存还给OS，意味着要调整JVM的堆大小，这个过程是比较耗费资源的。</p>
<p>在JDK 11中，Java引入了ZGC，这是一款可伸缩的低延迟垃圾收集器，但是当时只是实验性的。并且，ZGC释放的内存是不会还给操作系统的。</p>
<p>而在Java 13中，JEP 351再次对ZGC做了增强，本次 ZGC 可以将未使用的堆内存返回给操作系统。之所以引入这个特性，是因为如今有很多场景中内存是比较昂贵的资源，在以下情况中，将内存还给操作系统还是很有必要的：</p>
<p>1、那些需要根据使用量付费的容器</p>
<p>2、应用程序可能长时间处于空闲状态并与许多其他应用程序共享或竞争资源的环境。</p>
<p>3、应用程序在执行期间可能有非常不同的堆空间需求。例如，启动期间所需的堆可能大于稍后在稳定状态执行期间所需的堆。</p>
<h4 id="3-Reimplement-the-Legacy-Socket-API"><a href="#3-Reimplement-the-Legacy-Socket-API" class="headerlink" title="3.Reimplement the Legacy Socket API"></a>3.Reimplement the Legacy Socket API</h4><p>使用易于维护和调试的更简单、更现代的实现替换 java.net.Socket 和 java.net.ServerSocket API。</p>
<p>java.net.Socket和java.net.ServerSocket的实现非常古老，这个JEP为它们引入了一个现代的实现。现代实现是Java 13中的默认实现，但是旧的实现还没有删除，可以通过设置系统属性jdk.net.usePlainSocketImpl来使用它们。</p>
<p>运行一个实例化Socket和ServerSocket的类将显示这个调试输出。这是默认的(新的).</p>
<p>上面输出的sun.nio.ch.NioSocketImpl就是新提供的实现。</p>
<p>如果使用旧的实现也是可以的（指定参数jdk.net.usePlainSocketImpl）：</p>
<p>上面的结果中，旧的实现java.net.PlainSocketImpl被用到了。</p>
<h4 id="4-Switch-Expressions-Preview"><a href="#4-Switch-Expressions-Preview" class="headerlink" title="4.Switch Expressions (Preview)"></a>4.Switch Expressions (Preview)</h4><p>在JDK 12中引入了Switch表达式作为预览特性。JEP 354修改了这个特性，它引入了yield语句，用于返回值。这意味着，switch表达式(返回值)应该使用yield, switch语句(不返回值)应该使用break。</p>
<p>在以前，我们想要在switch中返回内容，还是比较麻烦的，一般语法如下：</p>
<p>在JDK13中使用以下语法：</p>
<p>或者</p>
<p>在这之后，switch中就多了一个关键字用于跳出switch块了，那就是yield，他用于返回一个值。和return的区别在于：return会直接跳出当前循环或者方法，而yield只会跳出当前switch块。</p>
<h4 id="5-Text-Blocks-Preview"><a href="#5-Text-Blocks-Preview" class="headerlink" title="5.Text Blocks (Preview)"></a>5.Text Blocks (Preview)</h4><p>在JDK 12中引入了Raw String Literals特性，但在发布之前就放弃了。这个JEP在引入多行字符串文字（text block）在意义上是类似的。</p>
<p>text block，文本块，是一个多行字符串文字，它避免了对大多数转义序列的需要，以可预测的方式自动格式化字符串，并在需要时让开发人员控制格式。</p>
<p>我们以前从外部copy一段文本串到Java中，会被自动转义，如有一段以下字符串：</p>
<p>将其复制到Java的字符串中，会展示成以下内容：</p>
<p>使用“”“作为文本块的开始符合结束符，在其中就可以放置多行的字符串，不需要进行任何转义。看起来就十分清爽了。</p>
<p>如常见的SQL语句：</p>
<p>看起来就比较直观，清爽了。</p>
<p>JDK13中包含的5个特性，能够改变开发者的编码风格的主要有Text Blocks和Switch Expressions两个新特性，但是这两个特性还处于预览阶段。</p>
<p>而且，JDK13并不是LTS（长期支持）版本，如果你正在使用Java 8（LTS）或者Java 11（LTS），暂时可以不必升级到Java 13.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础-代理模式</title>
    <url>/2020/07/03/java%E5%9F%BA%E7%A1%80/java%E5%9F%BA%E7%A1%80-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1.代理模式"></a>1.代理模式</h1><blockquote>
<p>为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。（结构型模式）</p>
</blockquote>
<p>#2.优缺点<br><strong>优点:</strong></p>
<ol>
<li>代理模式能将代理对象与真实对象被调用的目标对象分离。</li>
<li>一定程度上降低了系统的耦合度，扩展性好。</li>
<li>保护目标对象。</li>
<li>增强目标对象。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>代理模式会造成系统设计中类的数目的增加。</li>
<li>在客户端和目标对象增加一个代理对象，会造成请求处理速度变慢</li>
<li>增加了系统的复杂度。</li>
</ol>
<p>#3.代理模式分类</p>
<ul>
<li>静态代理</li>
<li>JDK动态代理</li>
<li>CGLIB动态代理</li>
</ul>
<h1 id="4-简单实现例子"><a href="#4-简单实现例子" class="headerlink" title="4.简单实现例子"></a>4.简单实现例子</h1><blockquote>
<p><strong>静态代理</strong></p>
</blockquote>
<p>用歌手，经纪人的例子举例：<br><img src="https://upload-images.jianshu.io/upload_images/19382524-ccafaefa877cfd07.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="静态代理.jpg"></p>
<p>静态代理必须实现同一个接口</p>
<p><strong>代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Sing &#123;</span><br><span class="line">    void singSongs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;歌手</span><br><span class="line">public class Singer implements Sing &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void singSongs() &#123;</span><br><span class="line">        System.out.println(&quot;singer can sing songs&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;经纪人</span><br><span class="line">public class Agent implements Sing &#123;</span><br><span class="line">    private Sing sing &#x3D; null;</span><br><span class="line">    @Override</span><br><span class="line">    public void singSongs() &#123;</span><br><span class="line">        sing.singSongs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Agent(Sing sing) &#123;</span><br><span class="line">        this.sing &#x3D; sing;</span><br><span class="line">        System.out.println(&quot;代理人接收到唱歌邀请&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;判断是否能去，金钱，时间安排，对歌手有没影响&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;邀请单位给出评价，相约下次合作&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>演出开始</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Performance &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Singer singer &#x3D; new Singer();</span><br><span class="line">        Agent agent &#x3D; new Agent(singer);</span><br><span class="line"></span><br><span class="line">        agent.before();</span><br><span class="line">        agent.singSongs();</span><br><span class="line">        agent.after();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>result</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代理人接收到唱歌邀请</span><br><span class="line">判断是否能去，金钱，时间安排，对歌手有没影响</span><br><span class="line">singer can sing songs</span><br><span class="line">邀请单位给出评价，相约下次合作</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong><br>从上面的代码中可以看出静态代理类,将代码写死了,如果需要这个代理类代理多个类那么就需要为每个类编写代码,这样做不利于程序的扩展</p>
<blockquote>
<p><strong>JDK动态代理</strong></p>
</blockquote>
<p><code>JDKAgent</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class JDKAgent implements InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    private Object target;</span><br><span class="line"></span><br><span class="line">    public JDKAgent(Object target) &#123;</span><br><span class="line">        this.target &#x3D; target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object creatAgent()&#123;</span><br><span class="line">        &#x2F;&#x2F; 1.得到目标对象的类加载器</span><br><span class="line">        ClassLoader classLoader &#x3D; target.getClass().getClassLoader();</span><br><span class="line">        &#x2F;&#x2F; 2.得到目标对象的实现接口</span><br><span class="line">        Class&lt;?&gt;[] interfaces &#x3D; target.getClass().getInterfaces();</span><br><span class="line">        &#x2F;&#x2F; 3.第三个参数需要一个实现invocationHandler接口的对象</span><br><span class="line">        Object newProxyInstance &#x3D; Proxy.newProxyInstance(classLoader, interfaces, this);</span><br><span class="line">        return newProxyInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 第一个参数:代理对象.一般不使用</span><br><span class="line">    &#x2F;&#x2F; 第二个参数:需要增强的方法</span><br><span class="line">    &#x2F;&#x2F; 第三个参数:方法中的参数</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        before();</span><br><span class="line">        Object invoke &#x3D; method.invoke(target, args);</span><br><span class="line">        after();</span><br><span class="line">        return invoke;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;判断此次演出准备工作是否到位&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;演出是否完美收官&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>测试类</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class JDKDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Singer singer &#x3D; new Singer();</span><br><span class="line">        JDKAgent jdkAgent &#x3D; new JDKAgent(singer);</span><br><span class="line"></span><br><span class="line">        Sing sing &#x3D; (Sing)jdkAgent.creatAgent();</span><br><span class="line">        sing.singSongs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>result</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">判断此次演出准备工作是否到位</span><br><span class="line">singer can sing songs</span><br><span class="line">演出是否完美收官</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ul>
<li><p>Interface：对于JDK Proxy,业务类是需要一个Interface的，这是一个缺陷；</p>
</li>
<li><p> Proxy：Proxy类是动态产生的，这个类在调用Proxy.newProxyInstance()方法之后，产生一个Proxy类的实力。实际上，这个Proxy类也是存在的，不仅仅是类的实例，这个Proxy类可以保存在硬盘上；</p>
</li>
<li><p>Method：对于业务委托类的每个方法，现在Proxy类里面都不用静态显示出来</p>
</li>
<li><p>InvocationHandler：这个类在业务委托类执行时，会先调用invoke方法。invoke方法在执行想要的代理操作，可以实现对业务方法的再包装。</p>
</li>
</ul>
<blockquote>
<p><strong>CGLIB动态代理</strong></p>
</blockquote>
<blockquote>
<p>CGLIB(Code Generation Library)是一个开源项目,是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。CGLIB包的底层是通过使用一个小而快的字节码处理框架ASM，来转换字节码并生成新的类.如果你要单独使用CGLIB，那么需要导入cglib的jar包还需要一个asm相关jar包，但是spring框架的spring-core.jar包中已经集成了cglib与asm.<br>CGLib是针对类来实现代理的，他的原理是对指定的目标生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理.</p>
</blockquote>
<p><strong>注意:</strong><br>jdk的动态代理只可以为接口去完成操作，而cglib它可以为没有实现接口的类去做代理，也可以为实现接口的类去做代理</p>
<p><code>Dancer</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Dancer &#123;</span><br><span class="line">    public void dance()&#123;</span><br><span class="line">        System.out.println(&quot;dancer can dance&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>代理类</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CglibAgent implements MethodInterceptor &#123;</span><br><span class="line">    &#x2F;&#x2F;得到目标对象</span><br><span class="line">    private Object target;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;使用构造方法传递目标对象</span><br><span class="line">    public CglibAgent(Object target) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.target &#x3D; target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建代理对象</span><br><span class="line">    public Object createProxy()&#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建Enhancer</span><br><span class="line">        Enhancer enhancer &#x3D; new Enhancer();</span><br><span class="line">        &#x2F;&#x2F;2.传递目标对象的class</span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        &#x2F;&#x2F;3.设置回调操作</span><br><span class="line">        enhancer.setCallback(this);</span><br><span class="line"></span><br><span class="line">        return enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    &#x2F;&#x2F;参数一:代理对象;参数二:需要增强的方法;参数三:需要增强方法的参数;参数四:需要增强的方法的代理</span><br><span class="line">    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F; 增强前</span><br><span class="line">        System.out.println(&quot;这是增强方法前......&quot;);</span><br><span class="line">        Object invoke &#x3D; methodProxy.invoke(target, args);</span><br><span class="line">        &#x2F;&#x2F; 增强后</span><br><span class="line">        System.out.println(&quot;这是增强方法后......&quot;);</span><br><span class="line">        return invoke;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>测试</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CglibDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Singer singer &#x3D; new Singer();</span><br><span class="line">        CglibAgent cglibAgent &#x3D; new CglibAgent(singer);</span><br><span class="line">        Sing sing &#x3D; (Sing)cglibAgent.createProxy();</span><br><span class="line">        sing.singSongs();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;--------separator--------&quot;);</span><br><span class="line"></span><br><span class="line">        Dancer dancer &#x3D; new Dancer();</span><br><span class="line">        CglibAgent dancerAgent &#x3D; new CglibAgent(dancer);</span><br><span class="line">        Dancer proxy &#x3D; (Dancer) dancerAgent.createProxy();</span><br><span class="line">        proxy.dance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>result</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是增强方法前......</span><br><span class="line">singer can sing songs</span><br><span class="line">这是增强方法后......</span><br><span class="line">--------separator--------</span><br><span class="line">这是增强方法前......</span><br><span class="line">dancer can dance</span><br><span class="line">这是增强方法后......</span><br></pre></td></tr></table></figure>


<p><strong>总结</strong><br>|方式|优点|缺点|<br>|—|—|–|<br>|静态代理|简单，需实现统一接口|扩展性差，性能|<br>|JDK动态代理|耦合低，需实现统一接口|性能|<br>|CGLIB动态代理|不需实现统一接口，代理类不能是final|性能|</p>
<p>代码 <a href="https://gitee.com/dancer4code/spring-boot-lab/tree/master/proxy-demo">proxy-demo</a></p>
<p>参考<br><a href="https://blog.csdn.net/happy_write/article/details/81235096">静态代理、JDK动态代理和CGLIB动态代理之间的区别?</a><br><a href="https://www.jianshu.com/p/6991491be81a">代理模式</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java设计模式-1工厂模式</title>
    <url>/2020/07/03/java%E5%9F%BA%E7%A1%80/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#1.什么是工厂模式</p>
<blockquote>
<p>用工厂方法代替了new操作, 将选择实现类, 创建对象统一管理和控制.从而将调用者(Client)与实现类进行解耦.实现了创建者与调用者分离;</p>
</blockquote>
<h1 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2.使用场景"></a>2.使用场景</h1><ul>
<li>JDK中Calendar的getInstance方法;</li>
<li>JDBC中Connection对象的获取;</li>
<li>MyBatis中SqlSessionFactory创建SqlSession;</li>
<li>SpringIoC容器创建并管理Bean对象;</li>
<li>反射Class对象的newInstance;</li>
<li>。。。。。。</li>
</ul>
<p>#3.三种方式</p>
<ul>
<li>静态工厂模式</li>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
</ul>
<p>#4.具体用法<br>**<em>静态工厂模式**</em></p>
<blockquote>
<p>静态工厂模式是工厂模式中最简单的一种，他可以用比较简单的方式隐藏创建对象的细节，一般只需要告诉工厂类所需要的类型，工厂类就会返回需要的产品类，而客户端看到的也只是产品的抽象对象(interface)，因此无需关心到底是返回了哪个子类</p>
</blockquote>
<p>例如生产不同产品的例子类图结构如下：<br><img src="https://upload-images.jianshu.io/upload_images/19382524-ebc792482eb45acc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="简单工厂模式1.jpg"></p>
<p>具体代码如下：<br><code>1.定义一个产品接口</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Product &#123;</span><br><span class="line">    void produce();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>2.实现类</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ProductA implements Product&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void produce() &#123;</span><br><span class="line">        System.out.println(&quot;生产出了产品A&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ProductB implements Product&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void produce() &#123;</span><br><span class="line">        System.out.println(&quot;生产出了产品B&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ProductC implements Product&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void produce() &#123;</span><br><span class="line">        System.out.println(&quot;生产出了产品C&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ProductD implements Product&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void produce() &#123;</span><br><span class="line">        System.out.println(&quot;生产出了产品D&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ProductDefault implements Product&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void produce() &#123;</span><br><span class="line">        System.out.println(&quot;生产出了产品-default&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>3.工厂类</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ProductFactory &#123;</span><br><span class="line">    public static Product getProduct(String name)&#123;</span><br><span class="line">        switch (name)&#123;</span><br><span class="line">            case &quot;A&quot; :</span><br><span class="line">                return new ProductA();</span><br><span class="line">            case &quot;B&quot;:</span><br><span class="line">                return new ProductB();</span><br><span class="line">            default:</span><br><span class="line">                return new ProductDefault();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>4.测试类</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ProductProduceDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;硬编码</span><br><span class="line">        ProductFactory.getProduct(&quot;A&quot;).produce();</span><br><span class="line">        ProductFactory.getProduct(&quot;B&quot;).produce();</span><br><span class="line">        ProductFactory.getProduct(&quot;ggg&quot;).produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优点</strong></p>
<blockquote>
<p>隐藏了对象创建的细节，将产品的实例化过程放到了工厂中实现。<br>客户端基本不用关心使用的是哪个产品，只需要知道用工厂的那个方法(或传入什么参数)就行了.<br>方便添加新的产品子类，每次只需要修改工厂类传递的类型值就行了。<br>遵循了依赖倒转原则。</p>
</blockquote>
<p><strong>缺点</strong></p>
<blockquote>
<p>适用于产品子类型差不多, 使用的方法名都相同的情况.<br>每添加一个产品子类，都必须在工厂类中添加一个判断分支(或一个方法)，这违背了OCP(开放-封闭原则)。</p>
</blockquote>
<hr>
<p><strong><em>工厂方法模式</em></strong></p>
<blockquote>
<p>由于静态工厂方法模式不满足OCP, 因此就出现了工厂方法模式; 工厂方法模式和静态工厂模式最大的不同在于: 静态工厂模式只有一个(对于一个项目/独立模块)只有一个工厂类, 而工厂方法模式则有一组实现了相同接口的工厂类.</p>
</blockquote>
<p>工厂方法模式就是与静态工厂的差异就是把原来偶合的一个工厂根据业务逻辑分成独立的工厂，这样在增加新的业务时就不需要反复修改同一个工厂类，更符合开闭原则。</p>
<p><strong>代码：</strong><br><code>1.增加抽象工厂接口</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Factory &#123;</span><br><span class="line">    Product getProduct();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>2.每个产品都实现相应工厂</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ProductAFactory implements Factory &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Product getProduct() &#123;</span><br><span class="line">        return new ProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ProductBFactory implements Factory &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Product getProduct() &#123;</span><br><span class="line">        return new ProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ProductCFactory implements Factory &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Product getProduct() &#123;</span><br><span class="line">        return new ProductC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想要增加一个新的产品ProductD</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ProductD implements Product &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void produce() &#123;</span><br><span class="line">        System.out.println(&quot;生产出了产品D&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需增加一个产品D的工厂类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ProductDFactory implements Factory &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Product getProduct() &#123;</span><br><span class="line">        return new ProductD();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>与静态工厂相比似乎实现相应的功能，似乎代码量增加了。但是，相比而言耦合度降低了，更利于程序的扩展。</p>
<p><code>总结</code><br><strong>优点</strong> </p>
<blockquote>
<p>基本与静态工厂模式一致，多的一点优点就是遵循了开放-封闭原则，使得模式的灵活性更强。</p>
</blockquote>
<p><strong>缺点</strong></p>
<blockquote>
<p>与静态工厂模式差不多, 但是增加了类组织的复杂性;</p>
</blockquote>
<blockquote>
<p>虽然根据理论原则, 需要使用工厂方法模式, 但实际上是用静态工厂模式还是工厂方法模式还是更具实际情况考虑。</p>
</blockquote>
<hr>
<p><strong><em>抽象工厂模式</em></strong></p>
<blockquote>
<p>抽象工厂模式: 提供一个创建一系列相关或相互依赖对象的接口, 而无需指定他们具体的类.</p>
</blockquote>
<p>抽象工厂模式与工厂方法模式的区别:<br>抽象工厂模式是工厂方法模式的升级版本，他用来创建一组相关或者相互依赖的对象。他与工厂方法模式的区别就在于，工厂方法模式针对的是一个产品等级结构；而抽象工厂模式则是针对的多个产品等级结构. 在编程中，通常一个产品结构，表现为一个接口或者抽象类，也就是说，工厂方法模式提供的所有产品都是衍生自同一个接口或抽象类，而抽象工厂模式所提供的产品则是衍生自不同的接口或抽象类(如下面的Engine,  Seat).<br>在抽象工厂模式中，提出了产品族的概念：所谓的产品族，是指位于不同产品等级结构中功能相关联的产品组成的家族(如Engine,  Seat)。抽象工厂模式所提供的一系列产品就组成一个产品族；而工厂方法提供的一系列产品称为一个等级结构.</p>
<p><strong>示例:</strong><br>现在我们要生产两款车: 高档(LuxuryCar)与低档(LowCar), 他们分别配有高端引擎(LuxuryEngine),低端引擎(LowEngine),  高端座椅(LuxurySeat)和低端座椅(LowSeat),  下面我们用抽象工厂实现它:<br>LuxuryCarFactory与LowCarFactory分别代表一类产品族的两款产品, 类似于数据库产品族中有MySQL, Oracle, SqlServer</p>
<p><code>Engine</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Engine &#123;</span><br><span class="line"></span><br><span class="line">    void start();</span><br><span class="line"></span><br><span class="line">    void run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class LowEngine implements Engine &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;启动慢 ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;转速慢 ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class LuxuryEngine implements Engine &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;启动快 ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;转速快 ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Seat</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Seat &#123;</span><br><span class="line">    void message();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class LowSeat implements Seat &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void message() &#123;</span><br><span class="line">        System.out.println(&quot;不能按摩 ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class LuxurySeat implements Seat &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void message() &#123;</span><br><span class="line">        System.out.println(&quot;可提供按摩 ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>产品族Factory</code></p>
<p><code>Factory</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface CarFactory &#123;</span><br><span class="line"></span><br><span class="line">    Engine createEngine();</span><br><span class="line"></span><br><span class="line">    Seat createSeat();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>LuxuryCarFactory</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LuxuryCarFactory implements CarFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Engine createEngine() &#123;</span><br><span class="line">        return new LuxuryEngine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Seat createSeat() &#123;</span><br><span class="line">        return new LuxurySeat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>LowCarFactory</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LowCarFactory implements CarFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Engine createEngine() &#123;</span><br><span class="line">        return new LowEngine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Seat createSeat() &#123;</span><br><span class="line">        return new LowSeat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Client</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CarTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        CarFactory factory &#x3D; new LowCarFactory();</span><br><span class="line">        Engine engine &#x3D; factory.createEngine();</span><br><span class="line">        engine.start();</span><br><span class="line">        engine.run();</span><br><span class="line">        Seat seat &#x3D; factory.createSeat();</span><br><span class="line">        seat.message();</span><br><span class="line">        System.out.println(&quot;---------------separator--------------&quot;);</span><br><span class="line"></span><br><span class="line">        CarFactory factory2 &#x3D; new LuxuryCarFactory();</span><br><span class="line">        Engine engine2 &#x3D; factory.createEngine();</span><br><span class="line">        engine2.start();</span><br><span class="line">        engine2.run();</span><br><span class="line">        Seat seat2 &#x3D; factory.createSeat();</span><br><span class="line">        seat2.message();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>总结</code></p>
<p><strong>优点</strong> </p>
<blockquote>
<p>封装了产品的创建，使得不需要知道具体是哪种产品，只需要知道是哪个工厂就行了。<br>可以支持不同类型的产品，使得模式灵活性更强。<br>可以非常方便的使用一族中间的不同类型的产品。</p>
</blockquote>
<p><strong>缺点</strong><br>结构太过臃肿，如果产品类型比较多，或者产品族类比较多，就会非常难于管理。<br>每次如果添加一组产品，那么所有的工厂类都必须添加一个方法，这样违背了开放-封闭原则。所以一般适用于产品组合产品族变化不大的情况。</p>
<hr>
<p><strong><em>使用静态工厂优化抽象工厂+反射+配置文件</em></strong></p>
<p>由于抽象工厂模式存在结构臃肿以及改动复杂的缺点(比如我们每次需要构造Car, 都需要进行CarFactory factory = new XxxCarFactory(),而一般一个项目中只会生产一种Car, 如果我们需要更改生产的车的类型, 那么客户端的每一处调用都需要修改), 因此我们可以使用静态工厂对其进行改造, 我们使用CarCreator来统一创建一个产品族不同产品, 这样如果我们的工厂将来更改了产品路线, 改为生产高端车时, 我们仅需改变CAR_TYEP的值就可以了:</p>
<p><code>CarCreator</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CarCreator &#123;</span><br><span class="line">    private static final String CAR_TYPE &#x3D; &quot;low&quot;;</span><br><span class="line">    private static final String CAR_TYPE_LOW &#x3D; &quot;low&quot;;</span><br><span class="line">    private static final String CAR_TYPE_LUXURY &#x3D; &quot;luxury&quot;;</span><br><span class="line"></span><br><span class="line">    public static Engine createEngine() &#123;</span><br><span class="line">        Engine engine &#x3D; null;</span><br><span class="line">        switch (CAR_TYPE) &#123;</span><br><span class="line">            case CAR_TYPE_LOW:</span><br><span class="line">                engine &#x3D; new LowEngine();</span><br><span class="line">                break;</span><br><span class="line">            case CAR_TYPE_LUXURY:</span><br><span class="line">                engine &#x3D; new LuxuryEngine();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Seat createSeat() &#123;</span><br><span class="line">        Seat seat &#x3D; null;</span><br><span class="line">        switch (CAR_TYPE) &#123;</span><br><span class="line">            case CAR_TYPE_LOW:</span><br><span class="line">                seat &#x3D; new LowSeat();</span><br><span class="line">                break;</span><br><span class="line">            case CAR_TYPE_LUXURY:</span><br><span class="line">                seat &#x3D; new LuxurySeat();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return seat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>CarCreatorReflection</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CarCreatorReflection &#123;</span><br><span class="line">    private static String packName;</span><br><span class="line">    private static String carType;</span><br><span class="line">    private static String engine;</span><br><span class="line">    private static String seat;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 读取配置文件内容并判断赋值，初始化变量值</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            URL resource &#x3D; Object.class.getResource(&quot;&#x2F;car.json&quot;);</span><br><span class="line">            File file &#x3D; new File(resource.getFile());</span><br><span class="line">            BufferedReader bufferedReader &#x3D; new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF-8&quot;));</span><br><span class="line">            StringBuffer config &#x3D; new StringBuffer();</span><br><span class="line">            String s &#x3D; null;</span><br><span class="line">            while ((s &#x3D; bufferedReader.readLine()) !&#x3D; null) &#123;</span><br><span class="line">                config.append(s);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedReader.close();</span><br><span class="line"></span><br><span class="line">            JSONObject jsonObject &#x3D; JSON.parseObject(config.toString());</span><br><span class="line">            packName &#x3D; jsonObject.getString(&quot;packName&quot;);</span><br><span class="line">            carType &#x3D; jsonObject.getString(&quot;carType&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;判断赋值</span><br><span class="line">        switch (carType) &#123;</span><br><span class="line">            case &quot;Low&quot;:</span><br><span class="line">                engine &#x3D; &quot;LowEngine&quot;;</span><br><span class="line">                seat &#x3D; &quot;LowSeat&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;Luxury&quot;:</span><br><span class="line">                engine &#x3D; &quot;LuxuryEngine&quot;;</span><br><span class="line">                seat &#x3D; &quot;LuxurySeat&quot;;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                engine &#x3D; &quot;LuxuryEngine&quot;;</span><br><span class="line">                seat &#x3D; &quot;LuxurySeat&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Engine createEngine() throws Exception &#123;</span><br><span class="line">        String className &#x3D; packName + &quot;.&quot; + engine;</span><br><span class="line">        return (Engine) Class.forName(className).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Seat createSeat() throws Exception &#123;</span><br><span class="line">        String className &#x3D; packName + &quot;.&quot; + seat;</span><br><span class="line">        return (Seat) Class.forName(className).newInstance();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>配置文件car.json</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;packName&quot;: &quot;com.d4c.demo.factory.abstract1&quot;,</span><br><span class="line">  &quot;carType&quot;: &quot;Luxury&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>测试</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CarTest2 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        Engine engine &#x3D; CarCreator.createEngine();</span><br><span class="line">        engine.run();</span><br><span class="line">        engine.start();</span><br><span class="line">        Seat seat &#x3D; CarCreator.createSeat();</span><br><span class="line">        seat.message();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;-----------separator-----------&quot;);</span><br><span class="line"></span><br><span class="line">        Engine engine2 &#x3D; CarCreatorReflection.createEngine();</span><br><span class="line">        engine2.run();</span><br><span class="line">        engine2.start();</span><br><span class="line">        Seat seat2 &#x3D; CarCreatorReflection.createSeat();</span><br><span class="line">        seat2.message();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>result</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">转速慢 ...</span><br><span class="line">启动慢 ...</span><br><span class="line">不能按摩 ...</span><br><span class="line">-----------separator-----------</span><br><span class="line">转速快 ...</span><br><span class="line">启动快 ...</span><br><span class="line">可提供按摩 ...</span><br></pre></td></tr></table></figure>

<p><code>总结</code><br>|分类    |说明|<br>|–|–|<br>|静态工厂模式    |用来生成同一等级结构中的任意产品, 对于增加新的产品, 需要修改已有代码<br>|工厂方法模式|    用来生成同一等级结构的固定产品, 支持增加任意产品;<br>|抽象工厂模式    |用来生成不同产品族的全部产品, 对于增加新的产品无能为力;</p>
<p><strong>源码</strong>  <a href="https://gitee.com/dancer4code/spring-boot-lab/tree/master/factory-demo">gitee</a></p>
<p>文章大部分参考(转载)<br><a href="https://blog.csdn.net/zjf280441589/article/details/50282773">工厂模式</a><br><a href="https://www.jianshu.com/p/e55fbddc071c">简单工厂模式（SimpleFactoryPattern）- 最易懂的设计模式解</a><br><a href="https://blog.51cto.com/zero01/2067822">设计模式之工厂方法模式</a><br><a href="https://blog.51cto.com/zero01/2070033">设计模式之抽象工厂模式</a><br><a href="http://www.cnblogs.com/cxjchen/p/3143633.html">三种工厂模式的分析以及C++实现</a> <br><a href="http://book.douban.com/subject/2334288/">大话设计模式</a> <br><a href="http://www.bjsxt.com/2014/down_0425/34.html">高淇讲设计模式</a> <br><a href="http://www.cnblogs.com/dolphin0520/p/3919839.html">设计模式之六大原则</a> <br> <a href="http://blog.csdn.net/zhengzhb/article/details/7359385">23种设计模式(3) - 抽象工厂模式</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/07/05/java%E5%9F%BA%E7%A1%80/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般实现单例模式的几种思路<br><strong>懒汉和饿汉</strong></p>
<ul>
<li>饿汉式：在类加载时就完成了初始化，所以类加载比较慢，但获取对象的速度快。</li>
<li>懒汉式：在类加载时不初始化，等到第一次被使用时才初始化。</li>
</ul>
<p>##1.饿汉式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.example;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 饿汉式</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SingletonHungry &#123;</span><br><span class="line">    private final static SingletonHungry SINGLETON_HUNGRY &#x3D; new SingletonHungry();</span><br><span class="line"></span><br><span class="line">    private SingletonHungry() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static SingletonHungry getInstance() &#123;</span><br><span class="line">        return SINGLETON_HUNGRY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>优点：在类加载的时候就完成了实例化，避免了多线程的同步问题。</li>
<li>缺点：因为类加载时就实例化了，没有达到Lazy Loading (懒加载) 的效果，如果该实例没被使用，内存就浪费了。</li>
</ul>
<p>##2.懒汉式（同步方法）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.example;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 懒汉式</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SingletonLazy &#123;</span><br><span class="line">    </span><br><span class="line">    private static SingletonLazy singletonLazy &#x3D; null;</span><br><span class="line"></span><br><span class="line">    private SingletonLazy() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized SingletonLazy getInstance() &#123;</span><br><span class="line">        if (singletonLazy &#x3D;&#x3D; null) &#123;</span><br><span class="line">            singletonLazy &#x3D; new SingletonLazy();</span><br><span class="line">        &#125;</span><br><span class="line">        return singletonLazy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>优点:对getInstance()加了锁的处理，保证了同一时刻只能有一个线程访问并获得实例.</li>
<li>缺点:也很明显，因为synchronized是修饰整个方法，每个线程访问都要进行同步，而其实这个方法只执行一次实例化代码就够了，每次都同步方法显然效率低下，为了改进这种写法，就有了下面的双重检查懒汉式。</li>
</ul>
<h2 id="3-懒汉式（双重校验锁）"><a href="#3-懒汉式（双重校验锁）" class="headerlink" title="3.懒汉式（双重校验锁）"></a>3.懒汉式（双重校验锁）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.example;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 懒汉式（DBL）</span><br><span class="line"> * volatile关键字修饰，防止指令重排</span><br><span class="line"> * Double Check Lock（DCL） 双重锁校验</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SingletonLazyDBL &#123;</span><br><span class="line"></span><br><span class="line">    private static volatile SingletonLazyDBL singletonLazy &#x3D; null;</span><br><span class="line"></span><br><span class="line">    private SingletonLazyDBL() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static SingletonLazyDBL getInstance() &#123;</span><br><span class="line">        if (singletonLazy &#x3D;&#x3D; null) &#123;</span><br><span class="line">            synchronized (SingletonLazyDBL.class) &#123;</span><br><span class="line">                if (singletonLazy &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    singletonLazy &#x3D; new SingletonLazyDBL();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return singletonLazy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>优点：用了两个if判断，也就是Double-Check，并且同步的不是方法，而是代码块，效率较高。</li>
</ul>
<blockquote>
<p>为什么要做两次判断呢？这是为了线程安全考虑，还是那个场景，对象还没实例化，两个线程A和B同时访问静态方法并同时运行到第一个if判断语句，这时线程A先进入同步代码块中实例化对象，结束之后线程B也进入同步代码块，如果没有第二个if判断语句，那么线程B也同样会执行实例化对象的操作了。</p>
</blockquote>
<h2 id="4-静态内部类方式"><a href="#4-静态内部类方式" class="headerlink" title="4.静态内部类方式"></a>4.静态内部类方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.example;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 懒汉式（内部类方式）</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SingletonInnerType &#123;</span><br><span class="line"></span><br><span class="line">    private SingletonInnerType() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class SingletonHolder &#123;</span><br><span class="line">        public static volatile SingletonInnerType SINGLETON_INNER_TYPE &#x3D; new SingletonInnerType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static SingletonInnerType getInstance() &#123;</span><br><span class="line">        return SingletonHolder.SINGLETON_INNER_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>似乎静态内部类看起来已经是最完美的方法了，其实不是，可能还存在反射攻击或者反序列化攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">       SingletonInnerType singleton &#x3D; SingletonInnerType.getInstance();</span><br><span class="line">       Constructor&lt;SingletonInnerType&gt; constructor &#x3D; SingletonInnerType.class.getDeclaredConstructor();</span><br><span class="line">       constructor.setAccessible(true);</span><br><span class="line">       SingletonInnerType newSingleton &#x3D; constructor.newInstance();</span><br><span class="line">       System.out.println(singleton &#x3D;&#x3D; newSingleton);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>或者引入反序列化后，也不是单例的了。</p>
<p>反序列化须引入依赖（方便操作）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.8.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">      SingletonInnerType instance &#x3D; SingletonInnerType.getInstance();</span><br><span class="line">      System.out.println(&quot;instance &#x3D; &quot; + instance);</span><br><span class="line">      byte[] serialize &#x3D; SerializationUtils.serialize(instance);</span><br><span class="line">      SingletonInnerType newInstance &#x3D; SerializationUtils.deserialize(serialize);</span><br><span class="line">      System.out.println(&quot;newInstance &#x3D; &quot; + newInstance);</span><br><span class="line">      System.out.println(instance &#x3D;&#x3D; newInstance);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>所以，反射攻击或者反序列化都导致单例失败。</p>
<p>解决方法，禁止反射就可以了。<br><strong>优化后</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.example;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 懒汉式（内部类方式）</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SingletonInnerType &#123;</span><br><span class="line"></span><br><span class="line">    private SingletonInnerType() &#123;</span><br><span class="line">        throw new RuntimeException(&quot;破解错误！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class SingletonHolder &#123;</span><br><span class="line">        public static volatile SingletonInnerType SINGLETON_INNER_TYPE &#x3D; new SingletonInnerType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static SingletonInnerType getInstance() &#123;</span><br><span class="line">        return SingletonHolder.SINGLETON_INNER_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        SingletonInnerType singleton &#x3D; SingletonInnerType.getInstance();</span><br><span class="line">        Constructor&lt;SingletonInnerType&gt; constructor &#x3D; SingletonInnerType.class.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(true);</span><br><span class="line">        SingletonInnerType newSingleton &#x3D; constructor.newInstance();</span><br><span class="line">        System.out.println(singleton &#x3D;&#x3D; newSingleton);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>优点：线程安全，调用效率高，可以延时加载</li>
</ul>
<blockquote>
<p>这是很多开发者推荐的一种写法，这种静态内部类方式在SingletonInnerType 类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonHolder 类，从而完成对象的实例化。同时，因为类的静态属性只会在第一次加载类的时候初始化，也就保证了SingletonHolder 中的对象只会被实例化一次，并且这个过程也是线程安全的。</p>
</blockquote>
<p>##5.枚举方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package com.d4c.example;</span><br><span class="line"></span><br><span class="line">public enum SingletonEnum &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 实例化对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    private Singleton instance &#x3D; null;</span><br><span class="line"></span><br><span class="line">    SingletonEnum() &#123;</span><br><span class="line">        instance &#x3D; new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Singleton getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class Singleton &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这种写法在《Effective JAVA》中大为推崇，它可以解决两个问题：</p>
<ul>
<li><p>1）线程安全问题。因为Java虚拟机在加载枚举类的时候会使用ClassLoader的方法，这个方法使用了同步代码块来保证线程安全。</p>
</li>
<li><p>2）避免反序列化破坏对象，因为枚举的反序列化并不通过反射实现。<br>好了，单例模式的几种写法就介绍到这了，最后简单总结一下单例模式的优缺点</p>
</li>
<li><p>缺点：不能延时加载。</p>
</li>
</ul>
<p><strong>总结：</strong></p>
<blockquote>
<p>匿名内部类的方式和单元素的枚举类型能够防住反射或反序列化的攻击，其他几种则不行。所以推荐这两种方式创建单例。</p>
</blockquote>
<p><strong>引用文章</strong><br><a href="https://juejin.im/post/6844903849581346823">设计模式：单例模式 (关于饿汉式和懒汉式)</a><br><a href="https://juejin.im/post/6844904168566554638">【一起学系列】之单例模式：只推荐三种~</a><br><a href="https://blog.csdn.net/yy254117440/article/details/52305175">Java 利用枚举实现单例模式</a><br><a href="https://www.cnblogs.com/happy4java/p/11206105.html">Java单例模式：为什么我强烈推荐你用枚举来实现单例模式</a><br><a href="https://blog.csdn.net/qq_34203492/article/details/84336492">Java单例—反射攻击破坏单例和解决方法</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>logging日志-log4j、log4j-2、logback、commons-logging和slf4j的区别联系以及简单用法</title>
    <url>/2020/07/08/logging/logging%E6%97%A5%E5%BF%97-log4j%E3%80%81log4j-2%E3%80%81logback%E3%80%81commons-logging%E5%92%8Cslf4j%E7%9A%84%E5%8C%BA%E5%88%AB%E8%81%94%E7%B3%BB%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><ul>
<li><p><em>commons-logging:</em> Apache基金会所属最早提供的日志的门面接口。之前叫Jakarta Commons Logging，后更名为Commons Logging.避免和具体的日志方案直接耦合。类似于JDBC 的api 接口，具体的的JDBC driver 实现由各数据库提供商实现。通过统一接口解耦，不过其内部也实现了一些简单日志方案。</p>
</li>
<li><p><em>Slf4j:</em> 全称为Simple Logging Facade for JAVA：java简单日志门面。 是对不同日志框架提供的一个门面封装。可以在部署的时候不修改任何配置即可接入一种日志实现方案。和commons-loging 应该有一样的初衷。设计上更好一些，没有commons 那么多潜规则。</p>
</li>
<li><p> <em>Jul:</em>  (Java Util Logging)自Java1.4以来的官方日志实现。可参考这里<a href="https://www.jianshu.com/p/a072c2c5ac0a">使用步骤</a></p>
</li>
</ul>
<ul>
<li><p><em>Log4j:</em>  Apache Log4j是一个基于Java的日志记录工具。它是由Ceki Gülcü首创的，现在则是Apache软件基金会的一个项目。 Log4j是几种Java日志框架之一。</p>
</li>
<li><p>*Logback:*一套日志组件的实现(Slf4j阵营)。</p>
</li>
<li><p> <em>Log4j 2:</em> Apache Log4j 2是apache开发的一款Log4j的升级产品。log4j属于1.x.x, log4j 2属于2.x.x.   <a href="http://logging.apache.org/log4j/2.x/">Apache官网地址</a> | <a href="https://github.com/apache/logging-log4j2">github地址</a></p>
</li>
</ul>
<ul>
<li><ul>
<li> <strong><em>log4j优点</em></strong></li>
<li>能支持多个参数，并通过{} 占位符进行替换，避免老写logger.isXXXEnabled 这种无奈的判断，带来性能提升</li>
<li>OSGI 机制更好兼容支持</li>
</ul>
</li>
</ul>
<p>$\color{red}{总结粗略可以看成：} $<br><em>日志接口：</em> commons-logging、Slf4j<br><em>日志实现：</em> log4j、logback、log4j2</p>
<p> 推荐使用slf4j+X(log4j/logback/log4j 2)这种方式,而不是直接使用log4j/logback/log4j 2。具体原因可参考：<a href="https://www.jianshu.com/p/ec508c929c61">为什么要用 SLF4J</a></p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-a1821ba7ca2f3a6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="slf4j日志相关.png"></p>
<hr>
<h1 id="2-简单用法-测试环境针对java，web环境没测"><a href="#2-简单用法-测试环境针对java，web环境没测" class="headerlink" title="2. 简单用法(测试环境针对java，web环境没测)"></a>2. 简单用法(测试环境针对java，web环境没测)</h1><h2 id="2-1-slf4j-log4j"><a href="#2-1-slf4j-log4j" class="headerlink" title="2.1 slf4j+log4j"></a>2.1 slf4j+log4j</h2><p><em>maven依赖</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.7.26&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p><em>配置文件位置classpath下名称 log4j.properties</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log4j.rootLogger&#x3D;ALL, Console ,File </span><br><span class="line"></span><br><span class="line">#Console</span><br><span class="line">log4j.appender.Console&#x3D;org.apache.log4j.ConsoleAppender </span><br><span class="line">log4j.appender.Console.layout&#x3D;org.apache.log4j.PatternLayout </span><br><span class="line">log4j.appender.Console.layout.ConversionPattern&#x3D;%d [%t] %-5p [%c] - %m%n</span><br><span class="line"></span><br><span class="line">#File</span><br><span class="line">log4j.appender.File &#x3D; org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.File.File &#x3D; D:&#x2F;&#x2F;log4j2.log</span><br><span class="line">log4j.appender.File.layout &#x3D; org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.File.layout.ConversionPattern &#x3D;%d [%t] %-5p [%c] - %m%n</span><br></pre></td></tr></table></figure>
<p><em>代码测试</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dancer4code.slf4j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;9&#x2F;21 13:24</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">public class Slf4jTest &#123;</span><br><span class="line">    static Logger log &#x3D; LoggerFactory.getLogger(Slf4jTest.class);</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        log.trace(&quot;hello trace&quot;);</span><br><span class="line">        log.debug(&quot;hello debug&quot;);</span><br><span class="line">        log.info(&quot;hello info&quot;);</span><br><span class="line">        log.warn(&quot;hello warn&quot;);</span><br><span class="line">        log.error(&quot;hello error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>输出结果</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-09-21 22:03:14,581 [main] TRACE [com.dancer4code.slf4j.Slf4jTest] - hello trace</span><br><span class="line">2019-09-21 22:03:14,582 [main] DEBUG [com.dancer4code.slf4j.Slf4jTest] - hello debug</span><br><span class="line">2019-09-21 22:03:14,582 [main] INFO  [com.dancer4code.slf4j.Slf4jTest] - hello info</span><br><span class="line">2019-09-21 22:03:14,582 [main] WARN  [com.dancer4code.slf4j.Slf4jTest] - hello warn</span><br><span class="line">2019-09-21 22:03:14,582 [main] ERROR [com.dancer4code.slf4j.Slf4jTest] - hello error</span><br></pre></td></tr></table></figure>

<h2 id="2-2-slf4j-logback"><a href="#2-2-slf4j-logback" class="headerlink" title="2.2 slf4j+logback"></a>2.2 slf4j+logback</h2><p><em>maven依赖</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.2.3&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p><em>配置文件classpath下 logback.xml</em><br>完全来自<a href="https://www.jianshu.com/p/696444e1a352">slf4j+logback的配置及使用</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--scan:</span><br><span class="line">            当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span><br><span class="line">scanPeriod:</span><br><span class="line">            设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</span><br><span class="line">debug:</span><br><span class="line">            当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span><br><span class="line"></span><br><span class="line">configuration 子节点为 appender、logger、root</span><br><span class="line"></span><br><span class="line">            --&gt;</span><br><span class="line">&lt;configuration scan&#x3D;&quot;true&quot; scanPeriod&#x3D;&quot;60 seconds&quot; debug&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    &lt;!--用于区分不同应用程序的记录--&gt;</span><br><span class="line">    &lt;contextName&gt;edu-cloud&lt;&#x2F;contextName&gt;</span><br><span class="line">    &lt;!--日志文件所在目录，如果是tomcat，如下写法日志文件会在则为$&#123;TOMCAT_HOME&#125;&#x2F;bin&#x2F;logs&#x2F;目录下--&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;LOG_HOME&quot; value&#x3D;&quot;logs&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--控制台--&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;stdout&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %logger输出日志的logger名 %msg：日志消息，%n是换行符 --&gt;</span><br><span class="line">            &lt;pattern&gt;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%thread] %-5level %logger&#123;36&#125; : %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">            &lt;!--解决乱码问题--&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--滚动文件--&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;infoFile&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;INFO&lt;&#x2F;level&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;LOG_HOME&#125;&#x2F;log.%d&#123;yyyy-MM-dd&#125;.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;maxHistory&gt;30&lt;&#x2F;maxHistory&gt;&lt;!--保存最近30天的日志--&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;</span><br><span class="line">            &lt;pattern&gt;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%thread] %-5level %logger&#123;36&#125; : %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--滚动文件--&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;errorFile&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;error&lt;&#x2F;level&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;LOG_HOME&#125;&#x2F;error.%d&#123;yyyy-MM-dd&#125;.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;maxHistory&gt;30&lt;&#x2F;maxHistory&gt;&lt;!--保存最近30天的日志--&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;</span><br><span class="line">            &lt;pattern&gt;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%thread] %-5level %logger&#123;36&#125; : %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--将日志输出到logstack--&gt;</span><br><span class="line">    &lt;!--&lt;appender name&#x3D;&quot;logstash&quot; class&#x3D;&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;&gt;</span><br><span class="line">        &lt;destination&gt;47.93.173.81:7002&lt;&#x2F;destination&gt;</span><br><span class="line">        &lt;encoder class&#x3D;&quot;net.logstash.logback.encoder.LogstashEncoder&quot;&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;keepAliveDuration&gt;5 minutes&lt;&#x2F;keepAliveDuration&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--这里如果是info，spring、mybatis等框架则不会输出：TRACE &lt; DEBUG &lt; INFO &lt;  WARN &lt; ERROR--&gt;</span><br><span class="line">    &lt;!--root是所有logger的祖先，均继承root，如果某一个自定义的logger没有指定level，就会寻找</span><br><span class="line">    父logger看有没有指定级别，直到找到root。--&gt;</span><br><span class="line">    &lt;root level&#x3D;&quot;debug&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;stdout&quot;&#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;infoFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;errorFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;logstash&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;root&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--为某个包单独配置logger</span><br><span class="line"></span><br><span class="line">    比如定时任务，写代码的包名为：com.seentao.task</span><br><span class="line">    步骤如下：</span><br><span class="line">    1、定义一个appender，取名为task（随意，只要下面logger引用就行了）</span><br><span class="line">    appender的配置按照需要即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    2、定义一个logger:</span><br><span class="line">    &lt;logger name&#x3D;&quot;com.seentao.task&quot; level&#x3D;&quot;DEBUG&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">      &lt;appender-ref ref&#x3D;&quot;task&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;logger&gt;</span><br><span class="line">    注意：additivity必须设置为false，这样只会交给task这个appender，否则其他appender也会打印com.seentao.task里的log信息。</span><br><span class="line"></span><br><span class="line">    3、这样，在com.seentao.task的logger就会是上面定义的logger了。</span><br><span class="line">    private static Logger logger &#x3D; LoggerFactory.getLogger(Class1.class);</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<p><em>测试代码与上同</em></p>
<p><em>打印信息省略许多logback内部信息</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2019-09-21 22:29:34.941] [main] DEBUG com.dancer4code.slf4j.Slf4jTest : hello debug</span><br><span class="line">[2019-09-21 22:29:34.943] [main] INFO  com.dancer4code.slf4j.Slf4jTest : hello info</span><br><span class="line">[2019-09-21 22:29:34.944] [main] WARN  com.dancer4code.slf4j.Slf4jTest : hello warn</span><br><span class="line">[2019-09-21 22:29:34.945] [main] ERROR com.dancer4code.slf4j.Slf4jTest : hello error</span><br></pre></td></tr></table></figure>
<p><em>参考了</em><br><a href="https://www.cnblogs.com/taiyonghai/p/9290641.html">IDEA项目搭建十——使用slf4j和logback进行日志记录</a><br><a href="https://www.jianshu.com/p/696444e1a352">slf4j+logback的配置及使用</a><br><a href="https://blog.csdn.net/qq_38428623/article/details/82080509">Slf4j日志配置文件 logback.xml</a><br><a href="https://blog.csdn.net/duguxiaobiao/article/details/78988409">日志：slf4j+logback 的配置与使用</a><br><strong><code>谢谢你们(*V*)</code></strong></p>
<h2 id="2-3-slf4j-log4j-2"><a href="#2-3-slf4j-log4j-2" class="headerlink" title="2.3 slf4j+log4j 2"></a>2.3 slf4j+log4j 2</h2><p>(性能优越，不过集成一些流行框架后需要更改有点多。用不用结合自己的项目考虑)<br>请参考<a href="https://www.infoq.cn/article/2014/08/apache-log4j2/">Apache Log4j 2.0 值得升级吗</a></p>
<p><em>maven依赖</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;log4j-slf4j-impl&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.9.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p><em>配置文件classpath下log4j2.xml</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><br><span class="line">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span><br><span class="line">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span><br><span class="line">&lt;configuration status&#x3D;&quot;ERROR&quot; monitorInterval&#x3D;&quot;30&quot;&gt;</span><br><span class="line">    &lt;!--先定义所有的appender--&gt;</span><br><span class="line">    &lt;appenders&gt;</span><br><span class="line">        &lt;!--这个输出控制台的配置--&gt;</span><br><span class="line">        &lt;console name&#x3D;&quot;Console&quot; target&#x3D;&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;!--输出日志的格式--&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%5p] - %l - %m%n&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;console&gt;</span><br><span class="line">        &lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用--&gt;</span><br><span class="line">        &lt;File name&#x3D;&quot;log&quot; fileName&#x3D;&quot;log&#x2F;test.log&quot; append&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;File&gt;</span><br><span class="line">        &lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span><br><span class="line">        &lt;RollingFile name&#x3D;&quot;RollingFileInfo&quot; fileName&#x3D;&quot;$&#123;sys:user.home&#125;&#x2F;logs&#x2F;info.log&quot;</span><br><span class="line">                     filePattern&#x3D;&quot;$&#123;sys:user.home&#125;&#x2F;logs&#x2F;$$&#123;date:yyyy-MM&#125;&#x2F;info-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span><br><span class="line">            &lt;ThresholdFilter level&#x3D;&quot;info&quot; onMatch&#x3D;&quot;ACCEPT&quot; onMismatch&#x3D;&quot;DENY&quot;&#x2F;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;&#x2F;&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy&#x2F;&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;100 MB&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Policies&gt;</span><br><span class="line">        &lt;&#x2F;RollingFile&gt;</span><br><span class="line">        &lt;RollingFile name&#x3D;&quot;RollingFileWarn&quot; fileName&#x3D;&quot;$&#123;sys:user.home&#125;&#x2F;logs&#x2F;warn.log&quot;</span><br><span class="line">                     filePattern&#x3D;&quot;$&#123;sys:user.home&#125;&#x2F;logs&#x2F;$$&#123;date:yyyy-MM&#125;&#x2F;warn-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;ThresholdFilter level&#x3D;&quot;warn&quot; onMatch&#x3D;&quot;ACCEPT&quot; onMismatch&#x3D;&quot;DENY&quot;&#x2F;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;&#x2F;&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy&#x2F;&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;100 MB&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Policies&gt;</span><br><span class="line">            &lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max&#x3D;&quot;20&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;RollingFile&gt;</span><br><span class="line">        &lt;RollingFile name&#x3D;&quot;RollingFileError&quot; fileName&#x3D;&quot;$&#123;sys:user.home&#125;&#x2F;logs&#x2F;error.log&quot;</span><br><span class="line">                     filePattern&#x3D;&quot;$&#123;sys:user.home&#125;&#x2F;logs&#x2F;$$&#123;date:yyyy-MM&#125;&#x2F;error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;ThresholdFilter level&#x3D;&quot;error&quot; onMatch&#x3D;&quot;ACCEPT&quot; onMismatch&#x3D;&quot;DENY&quot;&#x2F;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;&#x2F;&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy&#x2F;&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;100 MB&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Policies&gt;</span><br><span class="line">        &lt;&#x2F;RollingFile&gt;</span><br><span class="line">    &lt;&#x2F;appenders&gt;</span><br><span class="line">    &lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span><br><span class="line">    &lt;loggers&gt;</span><br><span class="line">        &lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&gt;</span><br><span class="line">        &lt;logger name&#x3D;&quot;org.springframework&quot; level&#x3D;&quot;INFO&quot;&gt;&lt;&#x2F;logger&gt;</span><br><span class="line">        &lt;logger name&#x3D;&quot;org.mybatis&quot; level&#x3D;&quot;INFO&quot;&gt;&lt;&#x2F;logger&gt;</span><br><span class="line">        &lt;root level&#x3D;&quot;all&quot;&gt;</span><br><span class="line">            &lt;appender-ref ref&#x3D;&quot;Console&quot;&#x2F;&gt;</span><br><span class="line">            &lt;appender-ref ref&#x3D;&quot;RollingFileInfo&quot;&#x2F;&gt;</span><br><span class="line">            &lt;appender-ref ref&#x3D;&quot;RollingFileWarn&quot;&#x2F;&gt;</span><br><span class="line">            &lt;appender-ref ref&#x3D;&quot;RollingFileError&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;root&gt;</span><br><span class="line">    &lt;&#x2F;loggers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>
<p><em>打印信息</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[23:04:14:602] [TRACE] - com.dancer4code.slf4j.Slf4jTest.main(Slf4jTest.java:17) - hello trace</span><br><span class="line">[23:04:14:605] [DEBUG] - com.dancer4code.slf4j.Slf4jTest.main(Slf4jTest.java:18) - hello debug</span><br><span class="line">[23:04:14:605] [ INFO] - com.dancer4code.slf4j.Slf4jTest.main(Slf4jTest.java:19) - hello info</span><br><span class="line">[23:04:14:606] [ WARN] - com.dancer4code.slf4j.Slf4jTest.main(Slf4jTest.java:20) - hello warn</span><br><span class="line">[23:04:14:607] [ERROR] - com.dancer4code.slf4j.Slf4jTest.main(Slf4jTest.java:21) - hello error</span><br></pre></td></tr></table></figure>
<p><em>参考了</em><br><a href="https://blog.csdn.net/v123411739/article/details/80232005">Log4j2与Slf4j的最佳实践</a><br><a href="https://www.imooc.com/article/78966">浅谈Log4j2日志框架及使用</a><br><a href="https://blog.csdn.net/jdbdh/article/details/88012456">Log4j2</a><br><a href="http://ifeve.com/slf4j-manual/">SLF4J 使用手册</a><br><code>**谢谢上面的博客参考**</code></p>
<h1 id="3-补充"><a href="#3-补充" class="headerlink" title="3.补充"></a>3.补充</h1><p>日志级别共有8个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF.</p>
<p>slf4j日志级别代码中只支持<br> Trace &lt; Debug &lt; Info &lt; Warn &lt; Error</p>
<p>源码gitee地址—-<a href="https://gitee.com/dancer4code/slf4jtest">slf4jtest</a></p>
<p>log4j pattern请参考<br><a href="http://logging.apache.org/log4j/2.x/manual/layouts.html">Apache官方pattern</a><br><a href="https://blog.csdn.net/garfielder007/article/details/82874529">Log4j输出格式控制–log4j的PatternLayout参数含义</a><br> <a href="https://www.cnblogs.com/sagech/p/9278715.html">log4j日志pattern配置</a></p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>logging</tag>
      </tags>
  </entry>
  <entry>
    <title>类的加载过程</title>
    <url>/2020/07/06/java%E5%9F%BA%E7%A1%80/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>查看单例模式时，发现类的加载过程有点忘了（全部都被我当饭吃了，<code>（*_*）</code>）。因此在这里记录下。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.order;</span><br><span class="line"></span><br><span class="line">public class A &#123;</span><br><span class="line">    public static final int staticFiledA &#x3D; 1;</span><br><span class="line">    public final int filedA &#x3D; 2;</span><br><span class="line"></span><br><span class="line">    A() &#123;</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">        System.out.println(&quot;A constructor&quot;);</span><br><span class="line">        System.out.println(&quot;staticFiledA:&quot; + staticFiledA);</span><br><span class="line">        System.out.println(&quot;filedA:&quot; + filedA);</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">        System.out.println(&quot;A static code block&quot;);</span><br><span class="line">        System.out.println(&quot;staticFiledA:&quot; + staticFiledA);</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">        System.out.println(&quot;A code block&quot;);</span><br><span class="line">        System.out.println(&quot;staticFiledA:&quot; + staticFiledA);</span><br><span class="line">        System.out.println(&quot;filedA:&quot; + filedA);</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static final void staticMethodA() &#123;</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">        System.out.println(&quot;A static method&quot;);</span><br><span class="line">        System.out.println(&quot;staticFiledA:&quot; + staticFiledA);</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;-------------------------------------------</span><br><span class="line"></span><br><span class="line">package com.d4c.order;</span><br><span class="line"></span><br><span class="line">public class B extends A&#123;</span><br><span class="line"></span><br><span class="line">    public static final int staticFiled &#x3D; 3;</span><br><span class="line">    public final int filed &#x3D; 4;</span><br><span class="line"></span><br><span class="line">    B() &#123;</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">        System.out.println(&quot;B constructor&quot;);</span><br><span class="line">        System.out.println(&quot;staticFiled:&quot; + staticFiled);</span><br><span class="line">        System.out.println(&quot;filed:&quot; + filed);</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">        System.out.println(&quot;B static code block&quot;);</span><br><span class="line">        System.out.println(&quot;staticFiled:&quot; + staticFiled);</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">        System.out.println(&quot;B code block&quot;);</span><br><span class="line">        System.out.println(&quot;staticFiled:&quot; + staticFiled);</span><br><span class="line">        System.out.println(&quot;filed:&quot; + filed);</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static final void staticMethod() &#123;</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">        System.out.println(&quot;B static method&quot;);</span><br><span class="line">        System.out.println(&quot;staticFiled:&quot; + staticFiled);</span><br><span class="line">        System.out.println(&quot;------------------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        B b &#x3D; new B();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">------------------------------</span><br><span class="line">A static code block</span><br><span class="line">staticFiledA:1</span><br><span class="line">------------------------------</span><br><span class="line">------------------------------</span><br><span class="line">B static code block</span><br><span class="line">staticFiled:3</span><br><span class="line">------------------------------</span><br><span class="line">------------------------------</span><br><span class="line">A code block</span><br><span class="line">staticFiledA:1</span><br><span class="line">filedA:2</span><br><span class="line">------------------------------</span><br><span class="line">------------------------------</span><br><span class="line">A constructor</span><br><span class="line">staticFiledA:1</span><br><span class="line">filedA:2</span><br><span class="line">------------------------------</span><br><span class="line">------------------------------</span><br><span class="line">B code block</span><br><span class="line">staticFiled:3</span><br><span class="line">filed:4</span><br><span class="line">------------------------------</span><br><span class="line">------------------------------</span><br><span class="line">B constructor</span><br><span class="line">staticFiled:3</span><br><span class="line">filed:4</span><br><span class="line">------------------------------</span><br></pre></td></tr></table></figure>

<p><strong>结论：</strong><br><strong>静态变量：</strong></p>
<ul>
<li>可以将静态变量理解为类变量（与对象无关），而实例变量则属于一个特定的对象。</li>
<li>静态变量有两种情况：<ul>
<li>静态变量是基本数据类型，这种情况下在类的外部不必创建该类的实例就可以直接使用</li>
<li>静态变量是一个引用。这种情况比较特殊，主要问题是由于静态变量是一个对象的引用，那么必须初始化这个对象之后才能将引用指向它。因此如果要把一个引用定义成static的，就必须在定义的时候就对其对象进行初始化。</li>
</ul>
</li>
</ul>
<p><strong>静态方法：</strong></p>
<ul>
<li>在内存中只有一份。</li>
<li>静态方法可以直接使用，而实例方法必须在类实例化之后通过对象来调用。</li>
<li>在外部调用静态方法时，可以使用“类名.方法名”或者“对象名.方法名”的形式。</li>
<li>实例方法只能使用这种方式对象名.方法名。</li>
<li>静态方法只允许访问静态成员。而实例方法中可以访问静态成员和实例成员。</li>
<li>静态方法中不能使用this（因为this是与实例相关的）。</li>
</ul>
<p><strong>静态代码块:</strong></p>
<ul>
<li>静态代码块会在类被加载时自动执行。</li>
<li>静态代码块只能定义在类里面，不能定义在方法里面。</li>
<li>静态代码块里的变量都是局部变量，只在块内有效。</li>
<li>一个类中可以定义多个静态代码块，按顺序执行。</li>
<li>静态代码块只能访问类的静态成员，而不允许访问实例成员。</li>
</ul>
<p><strong>顺序</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">父类的静态字段——&gt;父类静态代码块——&gt;子类静态字段——&gt;子类静态代码块——&gt;父类成员变量（非静态字段）——&gt;父类非静态代码块——&gt;父类构造器——&gt;子类成员变量——&gt;子类非静态代码块——&gt;子类构造器</span><br></pre></td></tr></table></figure>


<p><strong>引用参考</strong></p>
<p><a href="https://blog.csdn.net/qq_36522306/article/details/80584595">java中类加载与静态变量、静态方法与静态代码块详解与初始化顺序</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>maven中的dependencies与dependencyManagement的区别</title>
    <url>/2020/07/09/maven/maven%E4%B8%AD%E7%9A%84dependencies%E4%B8%8EdependencyManagement%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实验：结合一个练习项目讲解两者之间的关系"><a href="#实验：结合一个练习项目讲解两者之间的关系" class="headerlink" title="实验：结合一个练习项目讲解两者之间的关系"></a>实验：结合一个练习项目讲解两者之间的关系</h2><h3 id="项目关系图1"><a href="#项目关系图1" class="headerlink" title="项目关系图1"></a>项目关系图1</h3><p><img src="https://upload-images.jianshu.io/upload_images/19382524-11373eb29a00d03b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目关系图1.jpg"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-0e0a821168399283.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目关系图2.jpg"></p>
<h2 id="验证：pom文件"><a href="#验证：pom文件" class="headerlink" title="验证：pom文件"></a>验证：pom文件</h2><h3 id="d4cshiro-parent-pom-xml"><a href="#d4cshiro-parent-pom-xml" class="headerlink" title="d4cshiro-parent pom.xml"></a>d4cshiro-parent pom.xml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.dancer4code.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;d4cshiro-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;chapter1&lt;&#x2F;module&gt;</span><br><span class="line">        &lt;module&gt;chapter2&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;&#x2F;modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;commons.lang3.version&gt;3.8&lt;&#x2F;commons.lang3.version&gt;</span><br><span class="line">        &lt;commons.logging.version&gt;1.2&lt;&#x2F;commons.logging.version&gt;</span><br><span class="line">        &lt;lombok.version&gt;1.18.8&lt;&#x2F;lombok.version&gt;</span><br><span class="line">        &lt;shiro.version&gt;1.4.0&lt;&#x2F;shiro.version&gt;</span><br><span class="line">        &lt;junit.version&gt;4.12&lt;&#x2F;junit.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;commons.logging.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;shiro.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;junit.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;commons.lang3.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;lombok.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>


<h3 id="chapter1-pom-xml"><a href="#chapter1-pom-xml" class="headerlink" title="chapter1 pom.xml"></a>chapter1 pom.xml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.dancer4code.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;d4cshiro-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;!--相对路径，这里默认就是这个路径，不写也行--&gt;</span><br><span class="line">        &lt;relativePath&gt;pom.xml&lt;&#x2F;relativePath&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.dancer4code.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;chapter-1&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>

<h3 id="chapter2-pom-xml"><a href="#chapter2-pom-xml" class="headerlink" title="chapter2 pom.xml"></a>chapter2 pom.xml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;d4cshiro-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.dancer4code.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.dancer4code.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;chapter-2&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>

<h3 id="在idea右侧tab查看最终倒入的相关jar包依赖"><a href="#在idea右侧tab查看最终倒入的相关jar包依赖" class="headerlink" title="在idea右侧tab查看最终倒入的相关jar包依赖"></a>在idea右侧tab查看最终倒入的相关jar包依赖</h3><p><img src="https://upload-images.jianshu.io/upload_images/19382524-8436a778d8b1cb67.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实际倒入的jar包依赖.jpg"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><em>dedependencies:</em> 由此引入的jar包，子项目中不必显示引入。此项通常引入的是公用jar包。（全部继承）</p>
<p><em>dependencyManagement:</em> 由此引入的jar 需在子项目中显示引入，默认不写<version></version>则引入parent的，若声明<version>则引入自己的。（需声明才继承，按需导入）</p>
<p>两者配合实现了项目版本号的统一管理</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>关于@Configuration与@Configurable的比较</title>
    <url>/2020/08/02/spring/@Configuration%E4%B8%8E@Configurable%E7%9A%84%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#@Configuration<br>@Configuration就是以前spring的xml配置文件中的<beans> 的java实现，而@Bean就相当于<bean><br>@Configuration+@Bean就实现了spring以前配置文件中的类的配置加载。</p>
<p>#@Configurable<br>主要是这个注解以前了解的不多。百度了一下，才知道其主要作用</p>
<blockquote>
<p>主要是适用于，某些自己new出来的对象，而new这个对象又必须依赖spring容器里的对象，才能完成一些工作。</p>
</blockquote>
<p>具体怎么运用。</p>
<p>##1.添加依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-aspects&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-instrument&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>##2.具体的类<br><code>Student</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">    public void study()&#123;</span><br><span class="line">        System.out.println(&quot;I am a student,I must to study!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>People</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Configurable;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@Configurable</span><br><span class="line">public class People &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private Student student;</span><br><span class="line"></span><br><span class="line">    public void doSomething()&#123;</span><br><span class="line">        student.study();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>启动类加注解@SpringBootApplication+@EnableSpringConfigured</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.EnableLoadTimeWeaving;</span><br><span class="line">import org.springframework.context.annotation.aspectj.EnableSpringConfigured;</span><br><span class="line"></span><br><span class="line">@ServletComponentScan</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableSpringConfigured</span><br><span class="line">@EnableLoadTimeWeaving</span><br><span class="line">public class CustomBeanApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(CustomBeanApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><code>测试类</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">public class PeopleTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void doSomething() &#123;</span><br><span class="line">        People people &#x3D; new People();</span><br><span class="line">        people.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="配置jvm参数"><a href="#配置jvm参数" class="headerlink" title="配置jvm参数"></a>配置jvm参数</h2><p>不配置是会报错的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-javaagent:E:\maven_repository\org\springframework\spring-instrument\5.1.9.RELEASE\spring-instrument-5.1.9.RELEASE.jar</span><br><span class="line">&#x2F;&#x2F;直接指定spring-instrument.jar的maven本地仓库的地址就行</span><br></pre></td></tr></table></figure>

<p>如图：<br><img src="https://upload-images.jianshu.io/upload_images/19382524-832eae8f346fda47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="OK-，可以了"><a href="#OK-，可以了" class="headerlink" title="OK ，可以了"></a>OK ，可以了</h2>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL相关的一些配置及操作</title>
    <url>/2020/07/15/mysql/MySQL%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-常用配置解释"><a href="#一-常用配置解释" class="headerlink" title="一 .常用配置解释"></a>一 .常用配置解释</h1><p>##基本配置：</p>
<ul>
<li><p>datadir：指定mysql的数据目录位置，用于存放mysql数据库文件、日志文件等。<br>配置示例：datadir=D:/wamp/mysqldata/Data</p>
</li>
<li><p>default-character-set：mysql服务器默认字符集设置。<br>配置示例：default-character-set=utf8</p>
</li>
<li><p>skip-grant-tables：当忘记mysql用户密码的时候，可以在mysql配置文件中配置该参数，跳过权限表验证，不需要密码即可登录mysql。</p>
</li>
</ul>
<p>##日志相关：</p>
<ul>
<li><p>log-error：指定错误日志文件名称，用于记录当mysqld启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。<br>配置示例：log-error=”WJT-PC.err”（默认在mysql数据目录下）</p>
</li>
<li><p>log-bin：指定二进制日志文件名称，用于记录对数据造成更改的所有查询语句。<br>配置示例：log-bin=”WJT-PC-bin.log”（默认在mysql数据目录下）</p>
</li>
<li><p>binlog-do-db：指定将更新记录到二进制日志的数据库，其他所有没有显式指定的数据库更新将被忽略，不记录在日志中。<br>配置示例：binlog-do-db=db_name</p>
</li>
<li><p>binlog-ignore-db：指定不将更新记录到二进制日志的数据库，其他没有显式忽略的数据库都将进行记录。<br>配置示例：binlog-ignore-db=db_name如果想记录或忽略多个数据库，可以对上面两个选项分别使用多次。</p>
</li>
<li><p>sync-binlog：指定多少次写日志后同步磁盘。<br>配置示例：sync-binlog=N</p>
</li>
<li><p>general-log：是否开启查询日志记录。<br>配置示例：general-log=1</p>
</li>
<li><p>general_log_file：指定查询日志文件名，用于记录所有的查询语句。<br>配置示例：general_log_file=”WJT-PC.log”（默认在mysql数据目录下）</p>
</li>
<li><p>slow-query-log：是否开启慢查询日志记录。<br>配置示例：slow-query-log=1</p>
</li>
<li><p>slow_query_log_file：指定慢查询日志文件名称，用于记录消耗时间较长的查询语句。<br>配置示例：slow_query_log_file=”WJT-PC-slow.log”（默认在mysql数据目录下）</p>
</li>
<li><p>long_query_time：设置慢查询的时间，超过这个时间的查询语句才记录日志。<br>配置示例：long_query_time=10（单位：秒）</p>
</li>
<li><p>log-slow-admin-statements：是否将慢管理语句（例如OPTIMIZE TABLE、ANALYZE TABLE和ALTER TABLE）写入慢查询日志。</p>
<p>##存储引擎相关：</p>
</li>
<li><p>default-table-type：设置mysql的默认存储引擎。</p>
</li>
<li><p>innodb_data_home_dir：InnoDB引擎的共享表空间数据文件根目录。若没有设置，则使用mysql的datadir目录作为缺省目录。</p>
</li>
<li><p>innodb_data_file_path：单独指定共享表空间数据文件的路径与大小。数据文件的完整路径由innodb_data_home_dir与这里配置的值组合起来，文件大小以MB单位指定。<br>配置示例：innodb_data_home_dir=innodb_data_file_path=ibdata1:12M;/data/mysql/mysql3306/data1/ibdata2:12M:autoextend<br>如果想为innodb表空间指定不同目录下的文件，必须指定 innodb_data_home_dir =。这个例子中会在datadir下建立ibdata1，在/data/MySQL/mysql3306/data1/目录下创建ibdata2。</p>
</li>
<li><p>innodb_file_per_table：是否开启独立表空间，若开启，InnoDB将使用独立的.idb文件创建新表而不是在共享表空间中创建。<br>配置示例：innodb_file_per_table=1</p>
</li>
<li><p>innodb_autoinc_lock_mode：配置在向有着auto_increment列的表插入数据时，相关锁的行为。该参数有3个取值：</p>
<ul>
<li><p>0：tradition传统，所有的insert语 句开始的时候得到一个表级的auto_inc锁，在语句结束的时候才能释放 这个锁，影响了并发的插入。</p>
<ul>
<li><p>1：consecutive连续，mysql可以一次生成 几个连续的auto_inc的值，auto_inc不需要一直保持到语句结束，只要 语句得到了相应的值后就可以提前释放锁（这也是mysql的默认模式）。</p>
</li>
<li><p>2：interleaved交错，这个模式下已经没有了auto_inc锁，所以性能是最好的，但是对于同一个语句来说它得到的auto_inc的值可能不是连续的。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>配置示例：innodb_autoinc_lock_mode=1</p>
<ul>
<li><p>low_priority_updates：在myisam引擎锁使用中，默认情况下写请求优先于读请求，可以通过将该参数设置为1来使myisam引擎给予读请求优先权限， 所有的insert、update、delete和lock table write语句将等待直到受影响的表没有挂起的select或lock table read。<br>配置示例：low_priority_updates=0（默认配置）</p>
</li>
<li><p>max_write_lock_count：当一个myisam表的写锁定达到这个值后，mysql就暂时 将写请求优先级降低，给部分读请求获得锁的机会。</p>
</li>
<li><p>innodb_lock_wait_timeout：InnoDB锁等待超时参数，若事务在该时间内没有获 得需要的锁，则发生回滚。<br>配置示例：innodb_lock_wait_timeout=50（默认50秒）</p>
</li>
<li><p>max_heap_table_size：设置memory表的最大空间大小，该变量可以用来计算 memory表的max_rows值。在已有memory表上设置该参数是没有效果 的，除非重建表。</p>
</li>
</ul>
<p>##查询相关：</p>
<ul>
<li><p>max_sort_length：配置对blob或text类型的列进行排序时使用的字节数（只对配置的前max_sort_length个字节进行排序，其他的被忽略）</p>
</li>
<li><p>max_length_for_sort：mysql有两种排序算法，两次传输排序和单次传输排序。当查询需要所有列的总长度不超过max_length_for_sort时，mysql使用 单次传输排序，否则使用两次传输排序。</p>
</li>
<li><p>optimizer_search_depth：在关联查询中，当需要关联的表数量超过optimizer_search_depth的时候，优化器会使用“贪婪”搜索的方式查找“最优”的关联顺序。</p>
</li>
</ul>
<h1 id="二-连接数-状态"><a href="#二-连接数-状态" class="headerlink" title="二. 连接数,状态"></a>二. 连接数,状态</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查询前100条数据（info字段中也只会保存100字符）</span><br><span class="line">SHOW PROCESSLIST;  </span><br><span class="line">&#x2F;&#x2F;查询全部的详细信息</span><br><span class="line">SHOW FULL PROCESSLIST;  </span><br><span class="line">&#x2F;&#x2F;查询数据库最大连接数</span><br><span class="line">SHOW VARIABLES LIKE &#39;%max_connections%&#39;;  </span><br><span class="line"></span><br><span class="line">SHOW STATUS LIKE &#39;%Connection%&#39;; </span><br></pre></td></tr></table></figure>

<p>##show processlist;<br>show processlist 是显示用户正在运行的线程，除了 root 用户能看到所有正在运行的线程外，其他用户都只能看到自己正在运行的线程，看不到其它用户正在运行的线程。除非单独个这个用户赋予了PROCESS 权限。</p>
<ul>
<li>root用户，可以看到全部线程运行情况</li>
<li>普通的activiti用户只能看到自己的</li>
<li>单独给activiti用户授PROCESS权限，（授权后需要退出重新登录）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show full processlist;</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-7c7aa8c6b9d16573.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>show processlist 显示的信息都是来自MySQL系统库 <code>information_schema</code> 中的 <code>processlist</code> 表。所以使用下面的查询语句可以获得相同的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from information_schema.processlist</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-998bfd3c9af75563.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>查询出来的结果都是什么意思。</p>
<ul>
<li><p>Id: 就是这个线程的唯一标识，当我们发现这个线程有问题的时候，可以通过 kill 命令，加上这个Id值将这个线程杀掉。前面我们说了show processlist 显示的信息时来自<code>information_schema.processlist</code> 表，所以这个Id就是这个表的主键。</p>
</li>
<li><p>User: 就是指启动这个线程的用户。</p>
</li>
<li><p>Host: 记录了发送请求的客户端的 IP 和 端口号。通过这些信息在排查问题的时候，我们可以定位到是哪个客户端的哪个进程发送的请求。</p>
</li>
<li><p>DB: 当前执行的命令是在哪一个数据库上。如果没有指定数据库，则该值为 NULL 。</p>
</li>
<li><p>Command: 是指此刻该线程正在执行的命令。这个很复杂，下面单独解释</p>
</li>
<li><p>Time: 表示该线程处于当前状态的时间。</p>
</li>
<li><p>State: 线程的状态，和 Command 对应，下面单独解释。</p>
</li>
<li><p>Info: 一般记录的是线程执行的语句。默认只显示前100个字符，也就是你看到的语句可能是截断了的，要看全部信息，需要使用 show full processlist。</p>
</li>
</ul>
<p>##Command 的值：<br>通常是休眠（sleep），查询（query），连接（connect）<br>具体如下：</p>
<ul>
<li>Binlog Dump: 主节点正在将二进制日志 ，同步到从节点</li>
<li>Change User: 正在执行一个 change-user 的操作</li>
<li>Close Stmt: 正在关闭一个Prepared Statement 对象</li>
<li>Connect: 一个从节点连上了主节点</li>
<li>Connect Out: 一个从节点正在连主节点</li>
<li>Create DB: 正在执行一个create-database 的操作</li>
<li>Daemon: 服务器内部线程，而不是来自客户端的链接</li>
<li>Debug: 线程正在生成调试信息</li>
<li>Delayed Insert: 该线程是一个延迟插入的处理程序</li>
<li>Drop DB: 正在执行一个 drop-database 的操作</li>
<li>Execute: 正在执行一个 Prepared Statement</li>
<li>Fetch: 正在从Prepared Statement 中获取执行结果</li>
<li>Field List: 正在获取表的列信息</li>
<li>Init DB: 该线程正在选取一个默认的数据库</li>
<li>Kill : 正在执行 kill 语句，杀死指定线程</li>
<li>Long Data: 正在从Prepared Statement 中检索 long data</li>
<li>Ping: 正在处理 server-ping 的请求</li>
<li>Prepare: 该线程正在准备一个 Prepared Statement</li>
<li>ProcessList: 该线程正在生成服务器线程相关信息</li>
<li>Query: 该线程正在执行一个语句</li>
<li>Quit: 该线程正在退出</li>
<li>Refresh：该线程正在刷表，日志或缓存；或者在重置状态变量，或者在复制服务器信息</li>
<li>Register Slave： 正在注册从节点</li>
<li>Reset Stmt: 正在重置 prepared statement</li>
<li>Set Option: 正在设置或重置客户端的 statement-execution 选项</li>
<li>Shutdown: 正在关闭服务器</li>
<li>Sleep: 正在等待客户端向它发送执行语句</li>
<li>Statistics: 该线程正在生成 server-status 信息</li>
<li>Table Dump: 正在发送表的内容到从服务器</li>
<li>Time: Unused</li>
</ul>
<h2 id="state列-状态的值"><a href="#state列-状态的值" class="headerlink" title="state列 状态的值"></a>state列 状态的值</h2><ul>
<li>Checking table<br>正在检查数据表（这是自动的）。</li>
<li>Closing tables<br>正在将表中修改的数据刷新到磁盘中，同时正在关闭已经用完的表。这是一个很快的操作，如果不是这样的话，就应该确认磁盘空间是否已经满了或者磁盘是否正处于重负中。</li>
<li>Connect Out<br>复制从服务器正在连接主服务器。</li>
<li>Copying to tmp table on disk<br>由于临时结果集大于 tmp_table_size，正在将临时表从内存存储转为磁盘存储以此节省内存。</li>
<li>Creating tmp table<br>正在创建临时表以存放部分查询结果。</li>
<li>deleting from main table<br>服务器正在执行多表删除中的第一部分，刚删除第一个表。</li>
<li>deleting from reference tables<br>服务器正在执行多表删除中的第二部分，正在删除其他表的记录。</li>
<li>Flushing tables<br>正在执行 FLUSH TABLES，等待其他线程关闭数据表。</li>
<li>Killed<br>发送了一个kill请求给某线程，那么这个线程将会检查kill标志位，同时会放弃下一个kill请求。MySQL会在每次的主循环中检查kill标志位，不过有些情况下该线程可能会过一小段才能死掉。如果该线程程被其他线程锁住了，那么kill请求会在锁释放时马上生效。</li>
<li>Locked<br>被其他查询锁住了。</li>
<li>Sending data<br>正在处理 SELECT 查询的记录，同时正在把结果发送给客户端。</li>
<li>Sorting for group<br>正在为 GROUP BY 做排序。</li>
<li>Sorting for order<br>正在为 ORDER BY 做排序。</li>
<li>Opening tables<br>这个过程应该会很快，除非受到其他因素的干扰。例如，在执 ALTER TABLE 或 LOCK TABLE 语句行完以前，数据表无法被其他线程打开。 正尝试打开一个表。</li>
<li>Removing duplicates<br>正在执行一个 SELECT DISTINCT 方式的查询，但是MySQL无法在前一个阶段优化掉那些重复的记录。因此，MySQL需要再次去掉重复的记录，然后再把结果发送给客户端。</li>
<li>Reopen table<br>获得了对一个表的锁，但是必须在表结构修改之后才能获得这个锁。已经释放锁，关闭数据表，正尝试重新打开数据表。</li>
<li>Repair by sorting<br>修复指令正在排序以创建索引。</li>
<li>Repair with keycache<br>修复指令正在利用索引缓存一个一个地创建新索引。它会比 Repair by sorting 慢些。</li>
<li>Searching rows for update<br>正在讲符合条件的记录找出来以备更新。它必须在 UPDATE 要修改相关的记录之前就完成了。</li>
<li>Sleeping<br>正在等待客户端发送新请求.</li>
<li>System lock<br>正在等待取得一个外部的系统锁。如果当前没有运行多个 mysqld 服务器同时请求同一个表，那么可以通过增加 –skip-external-locking参数来禁止外部系统锁。</li>
<li>Upgrading lock<br>INSERT DELAYED 正在尝试取得一个锁表以插入新记录。</li>
<li>Updating<br>正在搜索匹配的记录，并且修改它们。</li>
<li>User Lock<br>正在等待 GET_LOCK()。</li>
<li>Waiting for tables<br>该线程得到通知，数据表结构已经被修改了，需要重新打开数据表以取得新的结构。然后，为了能的重新打开数据表，必须等到所有其他线程关闭这个表。以下几种情况下会产生这个通知：FLUSH TABLES tbl_name, ALTER TABLE, RENAME TABLE, REPAIR TABLE, ANALYZE TABLE, 或 OPTIMIZE TABLE。</li>
<li>waiting for handler insert<br>INSERT DELAYED 已经处理完了所有待处理的插入操作，正在等待新的请求。<br>大部分状态对应很快的操作，只要有一个线程保持同一个状态好几秒钟，那么可能是有问题发生了，需要检查一下。<br>还有其他的状态没在上面中列出来，不过它们大部分只是在查看服务器是否有存在错误是才用得着。</li>
</ul>
<h2 id="max-connections和max-user-connections"><a href="#max-connections和max-user-connections" class="headerlink" title="max_connections和max_user_connections"></a>max_connections和max_user_connections</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max_connections 是数据库的最大连接数</span><br><span class="line">max_user_connections 是当前账号的最大连接数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查询数据库最大连接数</span><br><span class="line">SHOW VARIABLES LIKE &#39;%connections%&#39;;  </span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-cde3b59efb59c2d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW STATUS LIKE &#39;%Connection%&#39;; </span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-2b883e75734c29ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>max_used_connections / max_connections * 100% （理想值≈ 85%）<br>17/1024=0.01660</p>
<p>如果max_used_connections跟max_connections相同 那么就是max_connections设置过低或者超过服务器负载上限了，低于10%则设置过大。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show status like  &#39;Threads%&#39;;</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-62e32ce0291f32f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ul>
<li>Threads_connected ：这个数值指的是打开的连接数.</li>
<li>Threads_running ：这个数值指的是激活的连接数，这个数值一般远低于connected数值.</li>
<li>Threads_connected 跟show processlist结果相同，表示当前连接数。准确的来说，Threads_running是代表当前并发数</li>
</ul>
<p>查询数据库当前设置的最大连接数<br>###设置这个最大连接数值</p>
<p><strong>方法1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global max_connections&#x3D;1024;</span><br><span class="line">show variables like &#39;%max_connections%&#39;;</span><br></pre></td></tr></table></figure>
<p>这种 方式在Mysql重启后就失效。</p>
<p><strong>方法2：</strong><br>修改mysql配置文件my.cnf，在[mysqld]段中添加或修改max_connections值：<br>max_connections=1024<br>重启mysql服务即可。</p>
<p><strong>方法3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT USAGE ON *.* TO &#39;root&#39;@&#39;localhost&#39; WITH MAX_USER_CONNECTIONS 10;</span><br></pre></td></tr></table></figure>




<h1 id="三-sleep-函数"><a href="#三-sleep-函数" class="headerlink" title="三. sleep()函数"></a>三. sleep()函数</h1><blockquote>
<p>与Java中的Thread.sleep()类似；<br>但也有很大的不同，其休眠数字是针对的每条记录</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;休眠两秒查询出结果</span><br><span class="line">select sleep(2);</span><br></pre></td></tr></table></figure>

<p><strong>如product数据如下：</strong><br><img src="https://upload-images.jianshu.io/upload_images/19382524-7262446bdc320496.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>查询出两条数据如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-6bdb6d99159d1442.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>如果加上sleep()函数：<br><img src="https://upload-images.jianshu.io/upload_images/19382524-2360558e820ab219.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>如果查不到数据：<br><img src="https://upload-images.jianshu.io/upload_images/19382524-40ece872d3428784.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>所以，耗时跟数据条数据有关；</p>
<p>#四.创建用户并分配权限</p>
<p>##创建新用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;方法1   username:用户名；host：指定在哪个主机上可以登录，本机可用localhost，%通配所有远程主机；password：用户登录密码；</span><br><span class="line">CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;</span><br><span class="line">&#x2F;&#x2F;方法2</span><br><span class="line">insert into mysql.user(Host,User,Password) values(&quot;localhost&quot;,&quot;userName&quot;,password(&quot;1q2w3e4r&quot;));</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>##分配权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;格式：grant 权限 on 数据库名.表名 to 用户@登录主机 identified by “用户密码”；.代表所有权；</span><br><span class="line">&#x2F;&#x2F; 后面是访问MySQL的客户端IP地址（或是 主机名） % 代表任意的客户端，如果填写 localhost 为本地访问（那此用户就不能远程访问该mysql数据库了）。</span><br><span class="line">grant all privileges on databaseName.* to UserName@localhost identified by &#39;1q2w3e4r&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>完成以上流程就实现了一个基本的用户生成并配置权限，如果需要控制用的CURD操作更改相关的权限即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all privileges包含以下权限:</span><br><span class="line">select,</span><br><span class="line">insert,</span><br><span class="line">update,</span><br><span class="line">delete,</span><br><span class="line">create,</span><br><span class="line">drop,</span><br><span class="line">references,</span><br><span class="line">index,</span><br><span class="line">alter,</span><br><span class="line">create temporary tables,</span><br><span class="line">lock tables,</span><br><span class="line">execute,</span><br><span class="line">create view,</span><br><span class="line">show view,</span><br><span class="line">create routine,</span><br><span class="line">alter routine,</span><br><span class="line">event,</span><br><span class="line">trigger</span><br></pre></td></tr></table></figure>

<p>mysql的权限命令是grant，权限撤销的命令时revoke；<br>grant授权格式：grant 权限列表 on 库.表 to 用户名@’ip’ identified by “密码”;<br>revoke回收权限格式：revoke 权限列表 on 库.表 from 用户名@’ip’;</p>
<p>#一些备注sql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;------------------------</span><br><span class="line">按客户端 IP 分组，看哪个客户端的链接数最多</span><br><span class="line">select client_ip,count(client_ip) as client_num from (select substring_index(host,&#39;:&#39; ,1) as client_ip from processlist ) as connect_info group by client_ip order by client_num desc;</span><br><span class="line">&#x2F;&#x2F;------------------------</span><br><span class="line">查看正在执行的线程，并按 Time 倒排序，看看有没有执行时间特别长的线程</span><br><span class="line">select * from information_schema.processlist where Command !&#x3D; &#39;Sleep&#39; order by Time desc;</span><br><span class="line">&#x2F;&#x2F;------------------------</span><br><span class="line">找出所有执行时间超过 5 分钟的线程，拼凑出 kill 语句，方便后面查杀</span><br><span class="line">select concat(&#39;kill &#39;, id, &#39;;&#39;) from information_schema.processlist where Command !&#x3D; &#39;Sleep&#39; and Time &gt; 300 order by Time desc;</span><br><span class="line">&#x2F;&#x2F;------------------------</span><br><span class="line">show processlist中kill锁表语句与慢sql</span><br><span class="line">单个kill</span><br><span class="line">mysql&gt; show processlist;</span><br><span class="line">mysql &gt; kill 251;</span><br><span class="line">&#x2F;&#x2F;------------------------</span><br><span class="line">批量kill</span><br><span class="line">1)查找Lockd语句</span><br><span class="line">mysql -uroot -p123456 -h 192.1.20.101 -e &quot;show processlist&quot; | grep -i &#39;Locked&#39; &gt; locked_log.txt</span><br><span class="line">2）组合kill</span><br><span class="line">for line in &#96;cat locked_log.txt | awk &#39;&#123;print $1&#125;&#39;&#96;</span><br><span class="line">do </span><br><span class="line">   echo &quot;kill $line;&quot; &gt;&gt; kill_thread_id.sql</span><br><span class="line">done</span><br><span class="line">3)执行</span><br><span class="line">mysql&gt;source kill_thread_id.sql</span><br><span class="line">&#x2F;&#x2F;------------------------</span><br><span class="line">1、kill所有慢查询进程：</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">mysql -uroot -pMy_Password -e &quot;show processlist&quot; | grep -i &quot;Query&quot; &gt; slow_query.log</span><br><span class="line">for query in &#96;cat slow_query.log | awk &#39;&#123;print $1&#125;&#39;&#96;</span><br><span class="line">do</span><br><span class="line">   echo &quot;kill $query;&quot; &gt; kill_slow_query.sql</span><br><span class="line">done</span><br><span class="line">登录mysql，执行：</span><br><span class="line">mysql&gt; source kill_slow_query.sql</span><br><span class="line">&#x2F;&#x2F;------------------------</span><br><span class="line">或者：</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">for query in &#96;mysqladmin -uroot -pMy_Password processlist | grep -i &#39;Query&#39; | awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">do</span><br><span class="line">   mysqladmin kill $&#123;query&#125;</span><br><span class="line">done</span><br><span class="line">&#x2F;&#x2F;------------------------</span><br><span class="line">2、kill所有死锁进程：</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">mysql -uroot -pMy_Password -e &quot;show processlist&quot; | grep -i &quot;Locked&quot; &gt; locked.log</span><br><span class="line"></span><br><span class="line">for lock in &#96;cat locked.log | awk &#39;&#123;print $1&#125;&#39;&#96;</span><br><span class="line">do</span><br><span class="line">   echo &quot;kill $lock;&quot; &gt; kill_locked.sql</span><br><span class="line">done</span><br><span class="line">登录mysql，执行：</span><br><span class="line">mysql&gt; source kill_locked.sql</span><br><span class="line">&#x2F;&#x2F;------------------------</span><br><span class="line">或者：</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">for lock in &#96;mysqladmin -uroot -pMy_Password processlist | grep -i &#39;Locked&#39; | awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">do</span><br><span class="line">   mysqladmin kill $&#123;lock&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>参考<br><a href="https://www.jianshu.com/p/b05a0f8a8da5">mysql: show processlist 详解</a><br><a href="https://blog.csdn.net/gumanren/article/details/4658385">Mysql 中 show full processlist</a><br><a href="https://www.cnblogs.com/wujuntian/p/6624478.html">MySQL常用配置参数</a><br><a href="https://blog.csdn.net/zhu19774279/article/details/38669229">预防MySQL宕机：合理设置MySQL最大用户连接数</a><br><a href="https://www.cnblogs.com/fansik/p/7054869.html">MySQL中kill所有慢查询进程和锁表进程</a><br><a href="https://www.cnblogs.com/kevingrace/p/5719536.html">MySQL 操作命令梳理（4）– grant授权和revoke回收权限</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>spring集成测试环境的搭建</title>
    <url>/2020/08/03/spring/spring%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-加入依赖包"><a href="#1-加入依赖包" class="headerlink" title="1.加入依赖包"></a>1.加入依赖包</h2><p>使用Spring的测试框架需要加入以下依赖包：</p>
<ul>
<li><p>  JUnit 4 （官方下载：<a href="http://www.junit.org/">http://www.junit.org/</a>）</p>
</li>
<li><p>  Spring Test （Spring框架中的test包）</p>
</li>
<li><p>  Spring 相关其他依赖包（不再赘述了，就是context等包）</p>
</li>
</ul>
<h2 id="2-创建测试源目录和包"><a href="#2-创建测试源目录和包" class="headerlink" title="2. 创建测试源目录和包"></a>2. 创建测试源目录和包</h2><p>创建一个和src下面与main同级创建test目录（测试目录），基本上大的框架（像spring的测试文件就是这样的，这已经是默认的了）。</p>
<h2 id="3-创建测试类"><a href="#3-创建测试类" class="headerlink" title="3. 创建测试类"></a>3. 创建测试类</h2><p>创建一个测试用的类，推荐名称为 “被测试类名称 + Test”。  创建测试类通常的两种方式：</p>
<ol>
<li><p> 根据需求继承必须的类</p>
</li>
<li><p> 根据需求加上必须的注解</p>
</li>
</ol>
<p><strong>第一种方式</strong>：测试类应该继承与 AbstractJUnit4SpringContextTests 或 AbstractTransactionalJUnit4SpringContextTests</p>
<ul>
<li><p>  AbstractJUnit4springcontextTests （测试中不涉及事物）</p>
</li>
<li><p>  AbstractTransactionalJUnit4SpringContextTests （测试类中，需要用到事务管理）（比如要在测试结果出来之后回滚测试内容）</p>
</li>
</ul>
<p><strong>第二种方式</strong>：使用注解</p>
<ul>
<li><p>  AbstractJUnit4springcontextTests可以用@RunWith(SpringJUnit4ClassRunner.class)来实现同样的功能</p>
</li>
<li><p>  AbstractTransactionalJUnit4SpringContextTests 可以用@RunWith(SpringJUnit4ClassRunner.class)+@TransactionConfiguration(transactionManager = “transactionManager”, defaultRollback = true)来实现同样的功能</p>
</li>
</ul>
<h2 id="4-通过JUnit-4-执行或maven自动执行"><a href="#4-通过JUnit-4-执行或maven自动执行" class="headerlink" title="4. 通过JUnit 4 执行或maven自动执行"></a>4. 通过JUnit 4 执行或maven自动执行</h2><ul>
<li><p>  Junit：右键方法名，选择则“Run As”→“JUnit Test”即可</p>
</li>
<li><p>  maven：默认自动回执行测试类，如果想要跳过测试可以添加如下命令：-Dmaven.test.skip=true</p>
</li>
</ul>
<h2 id="5-测试代码解释（测试Controller层）"><a href="#5-测试代码解释（测试Controller层）" class="headerlink" title="5.测试代码解释（测试Controller层）"></a>5.测试代码解释（测试Controller层）</h2><p><strong>code</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Transactional&#x2F;&#x2F;每次都开启一个事务</span><br><span class="line">@WebAppConfiguration&#x2F;&#x2F;测试环境使用，用来表示测试环境使用的ApplicationContext将是WebApplicationContext类型的；</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(locations &#x3D; &#123;&quot;classpath*:spring-*.xml&quot;&#125;)</span><br><span class="line">@TransactionConfiguration(transactionManager &#x3D; &quot;transactionManager&quot;, defaultRollback &#x3D; true)</span><br><span class="line">public class BaseSpringJUnit &#123;</span><br><span class="line">	&#x2F;&#x2F;执行@Test标注的方法之前都执行这个方法</span><br><span class="line">	@Before</span><br><span class="line">	public void setUp() throws Exception &#123;</span><br><span class="line">		&#x2F;&#x2F;to doing somthing </span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;执行@Test标注的方法之之后都执行这个方法</span><br><span class="line">	@After</span><br><span class="line">	public void tearDown() throws Exception &#123;</span><br><span class="line">		&#x2F;&#x2F;to doing somthing</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;测试方法</span><br><span class="line">	@Test</span><br><span class="line">	public void testPrint()&#123;</span><br><span class="line">		&#x2F;&#x2F;to doing somthing</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Transactional:每次都开启一个事务</p>
<p>@WebAppConfiguration:测试环境使用，用来表示测试环境使用的ApplicationContext将是WebApplicationContext类型的；</p>
<p>@ContextConfiguration(locations = {“classpath*:spring-*.xml”}):Spring整合JUnit4测试时，使用注解引入多个配置文件</p>
<p>@RunWith(SpringJUnit4ClassRunner.class)和@TransactionConfiguration(transactionManager = “transactionManager”, defaultRollback = true)上面已经过</p>
<p>其中：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(post(&quot;&#x2F;a&#x2F;pro&#x2F;unit&#x2F;list&quot;).param(&quot;name&quot;, &quot;s&quot;)).andExpect(MockMvcResultMatchers.view().name(&quot;modules&#x2F;pro&#x2F;unitList&quot;)) </span><br><span class="line">.andExpect(MockMvcResultMatchers.model().attributeExists(&quot;page&quot;)) </span><br><span class="line">.andExpect(MockMvcResultMatchers.jsonPath(&quot;$.code&quot;).value(&quot;10000&quot;)) </span><br><span class="line">.andDo(MockMvcResultHandlers.print()) </span><br><span class="line">.andReturn();</span><br></pre></td></tr></table></figure>

<p>其中使用MockMvcResultMatchers.jsonPath(“$.code”).value(“10000”)，需要导入jar包</p>
<p><strong>pom.xml配置需要加上</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.jayway.jsonpath&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;json-path&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;0.8.1&lt;&#x2F;version&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.jayway.jsonpath&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;json-path-assert&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;0.8.1&lt;&#x2F;version&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p><strong>最后整个过程：</strong></p>
<ul>
<li><p>  1、mockMvc.perform执行一个请求；</p>
</li>
<li><p>  2、MockMvcRequestBuilders.get(“/user/1”)构造一个请求</p>
</li>
<li><p>  3、ResultActions.andExpect添加执行完成后的断言</p>
</li>
<li><p>  4、ResultActions.andDo添加一个结果处理器，表示要对结果做点什么事情，比如此处使用MockMvcResultHandlers.print()输出整个响应结果信息。</p>
</li>
<li><p>  5、ResultActions.andReturn表示执行完成后返回相应的结果。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】Spring容器初始化完成后执行初始化数据方法</title>
    <url>/2020/08/04/spring/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91Spring%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%8C%E6%88%90%E5%90%8E%E6%89%A7%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文转载自：<a href="https://blog.csdn.net/honghailiang888/article/details/73333821">https://blog.csdn.net/honghailiang888/article/details/73333821</a> </p>
<h1 id="一、背景知识及需求"><a href="#一、背景知识及需求" class="headerlink" title="一、背景知识及需求"></a>一、背景知识及需求</h1><p>在做WEB项目时，经常在项目第一次启动时利用WEB容器的监听、Servlet加载初始化等切入点为数据库准备数据，这些初始化数据是系统开始运行前必须的数据，例如权限组、系统选项、默认管理员等等。而项目采用了Spring依赖注入来管理对象，而servlet并不受Spring的管理。若此时在servlet中注入Spring管理的对象，则无法使用，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class InitServlet extends HttpServlet &#123;</span><br><span class="line"> </span><br><span class="line">    @Autowired</span><br><span class="line">    private IProductService productService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService userService;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候是无法使用上述中的两个service的，因为InitServlet不受Spring容器管理。虽然可以用getBean的方式手动获取service，但是违反了使用Spring的初衷。</p>
<p>该篇文章也在之前<a href="http://blog.csdn.net/honghailiang888/article/details/53113853">【Spring实战】系列</a>的基础上进行优化和深入分析，本篇就是在更换了hsqldb数据库并初始化了商品、普通用户和管理员用户需求时产生的。</p>
<h1 id="二、Spring提供的解决方案"><a href="#二、Spring提供的解决方案" class="headerlink" title="二、Spring提供的解决方案"></a>二、Spring提供的解决方案</h1><h2 id="1、InitializingBean"><a href="#1、InitializingBean" class="headerlink" title="1、InitializingBean"></a>1、InitializingBean</h2><p>直接上代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Created by Administrator on 2017&#x2F;6&#x2F;15.</span><br><span class="line"> * spring容器启动后，初始化数据（产生一个默认商品、普通用户和管理员用户）</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">public class InitServlet implements InitializingBean &#123;</span><br><span class="line"> </span><br><span class="line">    @Autowired</span><br><span class="line">    private IProductService productService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService userService;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F;库中没有商品则声称一个</span><br><span class="line">        List&lt;Product&gt; products &#x3D; productService.getProductList();</span><br><span class="line">        if (null &#x3D;&#x3D; products || products.isEmpty())&#123;</span><br><span class="line">            Product product &#x3D; new Product();</span><br><span class="line">            product.setProductName(&quot;Mango&quot;);</span><br><span class="line">            product.setQuantity(100);</span><br><span class="line">            product.setUnit(&quot;个&quot;);</span><br><span class="line">            product.setUnitPrice(100);</span><br><span class="line">            productService.saveProduct(product);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F;库中没有用户则添加普通用户和管理员用户</span><br><span class="line">        List&lt;MangoUser&gt; mangoUsers &#x3D; userService.getUserList();</span><br><span class="line">        if(null &#x3D;&#x3D; mangoUsers || mangoUsers.isEmpty())&#123;</span><br><span class="line">            MangoUser mangoUser &#x3D; new MangoUser();</span><br><span class="line">            mangoUser.setUserName(&quot;mango&quot;);</span><br><span class="line">            mangoUser.setPassword(StringUtil.md5(&quot;123456&quot;));</span><br><span class="line">            mangoUser.setRole(&quot;ROLE_USER&quot;);</span><br><span class="line">            userService.saveUser(mangoUser);</span><br><span class="line"> </span><br><span class="line">            MangoUser mangoUser1 &#x3D; new MangoUser();</span><br><span class="line">            mangoUser1.setUserName(&quot;manager&quot;);</span><br><span class="line">            mangoUser1.setPassword(StringUtil.md5(&quot;123456&quot;));</span><br><span class="line">            mangoUser1.setRole(&quot;ROLE_MANAGER&quot;);</span><br><span class="line">            userService.saveUser(mangoUser1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若采用XML来配置Bean的话，可以指定属性init-method。</p>
<h2 id="2、ApplicationListener"><a href="#2、ApplicationListener" class="headerlink" title="2、ApplicationListener"></a>2、ApplicationListener</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;交给Spring管理，如果不是自动扫描加载bean的方式，则在xml里配一个即可</span><br><span class="line">@Component</span><br><span class="line">public class InitData implements ApplicationListener&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    @Autowired</span><br><span class="line">    private IProductService productService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService userService;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void onApplicationEvent(ContextRefreshedEvent event) &#123;</span><br><span class="line">        if (event.getApplicationContext().getParent() &#x3D;&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F;库中没有商品则声称一个</span><br><span class="line">            List&lt;Product&gt; products &#x3D; productService.getProductList();</span><br><span class="line">            if (null &#x3D;&#x3D; products || products.isEmpty())&#123;</span><br><span class="line">                Product product &#x3D; new Product();</span><br><span class="line">                product.setProductName(&quot;Mango&quot;);</span><br><span class="line">                product.setQuantity(100);</span><br><span class="line">                product.setUnit(&quot;个&quot;);</span><br><span class="line">                product.setUnitPrice(100);</span><br><span class="line">                productService.saveProduct(product);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            &#x2F;&#x2F;库中没有用户则添加普通用户和管理员用户</span><br><span class="line">            List&lt;MangoUser&gt; mangoUsers &#x3D; userService.getUserList();</span><br><span class="line">            if(null &#x3D;&#x3D; mangoUsers || mangoUsers.isEmpty())&#123;</span><br><span class="line">                MangoUser mangoUser &#x3D; new MangoUser();</span><br><span class="line">                mangoUser.setUserName(&quot;mango&quot;);</span><br><span class="line">                mangoUser.setPassword(StringUtil.md5(&quot;123456&quot;));</span><br><span class="line">                mangoUser.setRole(&quot;ROLE_USER&quot;);</span><br><span class="line">                userService.saveUser(mangoUser);</span><br><span class="line"> </span><br><span class="line">                MangoUser mangoUser1 &#x3D; new MangoUser();</span><br><span class="line">                mangoUser1.setUserName(&quot;manager&quot;);</span><br><span class="line">                mangoUser1.setPassword(StringUtil.md5(&quot;123456&quot;));</span><br><span class="line">                mangoUser1.setRole(&quot;ROLE_MANAGER&quot;);</span><br><span class="line">                userService.saveUser(mangoUser1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意是监听的ContextRefreshedEvent事件。</p>
<p>在web 项目中（spring mvc），系统会存在两个容器，一个是root application context ,另一个就是我们自己的 projectName-servlet context（作为root application context的子容器）。这种情况下，就会造成onApplicationEvent方法被执行两次。为了避免上面提到的问题，我们可以只在root application context初始化完成后调用逻辑代码，其他的容器的初始化完成，则不做任何处理。</p>
<p>event.getApplicationContext().getParent() == null</p>
<h2 id="3、-PostConstruct"><a href="#3、-PostConstruct" class="headerlink" title="3、@PostConstruct"></a>3、@PostConstruct</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Created by Administrator on 2017&#x2F;6&#x2F;15.</span><br><span class="line"> * spring容器启动后，初始化数据（产生一个默认商品、普通用户和管理员用户）</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">public class InitMango&#123;</span><br><span class="line"> </span><br><span class="line">    @Autowired</span><br><span class="line">    private IProductService productService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService userService;</span><br><span class="line"> </span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        &#x2F;&#x2F;库中没有商品则声称一个</span><br><span class="line">        List&lt;Product&gt; products &#x3D; productService.getProductList();</span><br><span class="line">        if (null &#x3D;&#x3D; products || products.isEmpty())&#123;</span><br><span class="line">            Product product &#x3D; new Product();</span><br><span class="line">            product.setProductName(&quot;Mango&quot;);</span><br><span class="line">            product.setQuantity(100);</span><br><span class="line">            product.setUnit(&quot;个&quot;);</span><br><span class="line">            product.setUnitPrice(100);</span><br><span class="line">            productService.saveProduct(product);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F;库中没有用户则添加普通用户和管理员用户</span><br><span class="line">        List&lt;MangoUser&gt; mangoUsers &#x3D; userService.getUserList();</span><br><span class="line">        if(null &#x3D;&#x3D; mangoUsers || mangoUsers.isEmpty())&#123;</span><br><span class="line">            MangoUser mangoUser &#x3D; new MangoUser();</span><br><span class="line">            mangoUser.setUserName(&quot;mango&quot;);</span><br><span class="line">            mangoUser.setPassword(StringUtil.md5(&quot;123456&quot;));</span><br><span class="line">            mangoUser.setRole(&quot;ROLE_USER&quot;);</span><br><span class="line">            userService.saveUser(mangoUser);</span><br><span class="line"> </span><br><span class="line">            MangoUser mangoUser1 &#x3D; new MangoUser();</span><br><span class="line">            mangoUser1.setUserName(&quot;manager&quot;);</span><br><span class="line">            mangoUser1.setPassword(StringUtil.md5(&quot;123456&quot;));</span><br><span class="line">            mangoUser1.setRole(&quot;ROLE_MANAGER&quot;);</span><br><span class="line">            userService.saveUser(mangoUser1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下篇文章会分析其原理和源码实现。</p>
<h3 id="三、代码托管"><a href="#三、代码托管" class="headerlink" title="三、代码托管"></a>三、代码托管</h3><p><a href="https://github.com/honghailiang/SpringMango">https://github.com/honghailiang/SpringMango</a> </p>
<h3 id="四、实现原理"><a href="#四、实现原理" class="headerlink" title="四、实现原理"></a>四、实现原理</h3><p>其实现原理在<a href="http://blog.csdn.net/honghailiang888/article/details/74981445">【Spring实战】Spring注解工作原理源码解析</a>中均能找到答案，简单说明下：</p>
<p>1）在bean创建的过程中，初始化时会先调用@PostConstruct注解标注的方法，而后调用实现InitializingBean接口的afterPropertiesSet方法</p>
<p>2）在finishRefresh()会分发事件，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Publish the final event.		publishEvent(new ContextRefreshedEvent(this));</span><br></pre></td></tr></table></figure>

<p>关心ContextRefreshedEvent事件的bean中的onApplicationEvent方法会被调用</p>
<p>3）建议使用@PostConstruct注解，减少Spring的侵入性以及耦合性 </p>
<p>本文转载自：<a href="https://blog.csdn.net/honghailiang888/article/details/73333821">https://blog.csdn.net/honghailiang888/article/details/73333821</a> </p>
<p>spring请参考<br><a href="https://blog.csdn.net/wenmingfeng1215/article/details/80405371">Spring容器初始化完成后执行初始化数据方法</a></p>
<p>spring boot请参考<br><a href="https://blog.csdn.net/ClementAD/article/details/84345196">Spring boot 启动之后，执行某些初始化的几种方法</a></p>
<p><a href="https://blog.csdn.net/qq_35981283/article/details/77826537">Spring Boot学习–项目启动时执行特定方法</a></p>
<p><a href="https://blog.csdn.net/ming19951224/article/details/81156904">springboot项目启动后，自动执行需要的初始化操作</a></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-事务相关的概念和理论ACID、CAP、BASE</title>
    <url>/2020/07/14/mysql/mysql-%E4%BA%8B%E5%8A%A1%E7%9B%B8%E5%85%B3%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%90%86%E8%AE%BAACID%E3%80%81CAP%E3%80%81BASE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h1><p>先简单介绍下数据一致性的基础理论。</p>
<ul>
<li><p>强一致 <br>  当更新操作完成之后，任何多个后续进程或者线程的访问都会返回最新的更新过的值。这种是对用户最友好的，就是用户上一次写什么，下一次就保证能读到什么。根据 CAP 理论，这种实现需要牺牲可用性。</p>
</li>
<li><p>弱一致性 <br>  系统并不保证续进程或者线程的访问都会返回最新的更新过的值。系统在数据写入成功之后，不承诺立即可以读到最新写入的值，也不会具体的承诺多久之后可以读到。</p>
</li>
<li><p>最终一致性 <br>  弱一致性的特定形式。系统保证在没有后续更新的前提下，系统能最终返回上一次更新操作的值。在没有故障发生的前提下，不一致窗口的时间主要受通信延迟，系统负载和复制副本的个数影响。DNS 是一个典型的最终一致性系统。</p>
</li>
</ul>
<h1 id="ACID模型"><a href="#ACID模型" class="headerlink" title="ACID模型"></a>ACID模型</h1><p>ACID是传统数据库常用的设计理念，追求强一致性模型。 <br>关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区： </p>
<ul>
<li>Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。 </li>
<li>Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。 </li>
<li>Isolation隔离层. 事务将假定只有它自己在操作数据库，彼此不知晓。 </li>
<li>Durability. 一旦事务完成，就不能返回。</li>
</ul>
<p>ACID模型要求一个事物必须满足上面的四点，这是对关系型传统数据库的指导性依据。而非关系型数据库NoSql则不再依赖这一模型。</p>
<h1 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h1><p>2000年7月，加州大学伯克利分校的Eric Brewer教授在ACM PODC会议上提出CAP猜想。2年后，麻省理工学院的Seth Gilbert和Nancy Lynch从理论上证明了CAP。之后，CAP理论正式成为分布式计算领域的公认定理。</p>
<p>CAP理论为： <br>一个分布式系统最多只能同时满足</p>
<ul>
<li>  Consistency(一致性), 数据一致更新，所有数据变动都是同步的</li>
<li>  Availability(可用性), 好的响应性能</li>
<li>  Partition tolerance(分区容错性) 可靠性</li>
</ul>
<p>这三项中的两项。</p>
<blockquote>
<p>传统选CA,互联网选AP<br>传统的关系型数据库会选择 CA<br>而 Nosql会关注AP。</p>
</blockquote>
<h1 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h1><p>BASE:Basically,Available,Soft state,Eventually consistent四个词组的首字母,它的意思是：基本可用+软状态+最终一致性 <br>eBay的架构师Dan Pritchett源于对大规模分布式系统的实践总结，在ACM上发表文章提出BASE理论，BASE理论是对CAP理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency，CAP的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。</p>
<p>BASE是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）。</p>
<ul>
<li><p>基本可用（Basically Available） <br>  基本可用是指分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。 <br>  电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。这就是损失部分可用性的体现。</p>
</li>
<li><p>软状态（ Soft State） <br>  软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的体现。mysql replication的异步复制也是一种体现。</p>
</li>
<li><p>最终一致性（ Eventual Consistency） <br>  最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</p>
</li>
</ul>
<p>BASE模型是传统ACID模型的反面，不同与ACID，BASE强调牺牲高一致性，从而获得可用性，数据<strong>允许在一段时间内的不一致，只要保证最终一致就可以了</strong>。</p>
<p>BASE模型反ACID模型，完全不同ACID模型，牺牲高一致性，获得可用性或可靠性： Basically Available基本可用。支持分区失败(e.g. sharding碎片划分数据库) Soft state软状态 状态可以有一段时间不同步，异步。 Eventually consistent最终一致，最终数据是一致的就可以了，而不是时时一致。</p>
<p>BASE思想的主要实现有 </p>
<ul>
<li>1.按功能划分数据库 </li>
<li>2.sharding碎片</li>
</ul>
<p>BASE思想主要强调基本的可用性，如果你需要高可用性，也就是纯粹的高性能，那么就要以一致性或容错性为牺牲，BASE思想的方案在性能上还是有潜力可挖的。</p>
<p>现在NoSQL运动丰富了拓展了BASE思想，可按照具体情况定制特别方案，比如忽视一致性，获得高可用性等等，NOSQL应该有下面两个流派： </p>
<ul>
<li><ol>
<li>Key-Value存储，如Amaze Dynamo等，可根据CAP三原则灵活选择不同倾向的数据库产品。 </li>
</ol>
</li>
<li><ol start="2">
<li>领域模型 + 分布式缓存 + 存储 （Qi4j和NoSQL运动），可根据CAP三原则结合自己项目定制灵活的分布式方案，难度高。</li>
</ol>
</li>
</ul>
<p>这两者共同点：都是关系数据库SQL以外的可选方案，逻辑随着数据分布，任何模型都可以自己持久化，将数据处理和数据存储分离，将读和写分离，存储可以是异步或同步，取决于对一致性的要求程度。</p>
<p>不同点：NOSQL之类的Key-Value存储产品是和关系数据库头碰头的产品BOX，可以适合非Java如PHP RUBY等领域，是一种可以拿来就用的产品，而领域模型 +分布式缓存 + 存储是一种复杂的架构解决方案，不是产品，但这种方式更灵活，更应该是架构师必须掌握的。</p>
<p><a href="https://blog.csdn.net/zjcjava/article/details/78893368">事务原理：ACID,CAP和BASE理论及分布式事务一致性案例</a><br><a href="https://www.jianshu.com/p/9156a1bec34c">Base/ACID/CAP 有什么关系</a><br> <a href="https://www.cnblogs.com/linbingdong/p/6178488.html">分布式系列文章——从ACID到CAP/BASE</a><br><a href="https://blog.csdn.net/linqichen/article/details/96592040">谈谈CAP，BASE, ACID</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-关于时间、日期的总结</title>
    <url>/2020/07/11/mysql/mysql-%E5%85%B3%E4%BA%8E%E6%97%B6%E9%97%B4%E3%80%81%E6%97%A5%E6%9C%9F%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-CURRENT-DATE"><a href="#1-CURRENT-DATE" class="headerlink" title="1.CURRENT_DATE"></a>1.CURRENT_DATE</h1><p><strong>CURDATE()、CURRENT_DATE()、CURRENT_DATE</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT CURDATE(),CURRENT_DATE(),CURRENT_DATE;</span><br></pre></td></tr></table></figure>
<p><strong>结果：</strong><br><img src="https://upload-images.jianshu.io/upload_images/19382524-f83c2e4cf4c64bd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h1 id="2-CURRENT-TIME"><a href="#2-CURRENT-TIME" class="headerlink" title="2.CURRENT_TIME"></a>2.CURRENT_TIME</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT CURRENT_TIME,CURRENT_TIME();</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-e98c8caf703300be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" result"></p>
<h1 id="3-DATETIME-、TIMESTAMP、LOCALTIMESTAMP"><a href="#3-DATETIME-、TIMESTAMP、LOCALTIMESTAMP" class="headerlink" title="3.DATETIME 、TIMESTAMP、LOCALTIMESTAMP"></a>3.DATETIME 、TIMESTAMP、LOCALTIMESTAMP</h1><p><strong>NOW()、SYSDATE()、CURRENT_TIMESTAMP、CURRENT_TIMESTAMP()、LOCALTIME、LOCALTIME()、LOCALTIMESTAMP、LOCALTIMESTAMP()</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT NOW(),SYSDATE(),CURRENT_TIMESTAMP,CURRENT_TIMESTAMP(),LOCALTIME,LOCALTIME(),LOCALTIMESTAMP,LOCALTIMESTAMP();</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-9a348e4e02dcf70d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<h1 id="4-获得当前-UTC-日期时间函数：utc-date-utc-time-utc-timestamp"><a href="#4-获得当前-UTC-日期时间函数：utc-date-utc-time-utc-timestamp" class="headerlink" title="4.获得当前 UTC 日期时间函数：utc_date(), utc_time(), utc_timestamp()"></a>4.获得当前 UTC 日期时间函数：utc_date(), utc_time(), utc_timestamp()</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT UTC_DATE(), UTC_TIME(), UTC_TIMESTAMP(),UTC_DATE,UTC_TIME,UTC_TIMESTAMP;</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-1bf65131de873ee5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<h1 id="5-NOW-与SYSDATE-区别"><a href="#5-NOW-与SYSDATE-区别" class="headerlink" title="5. NOW()与SYSDATE() 区别"></a>5. NOW()与SYSDATE() 区别</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT NOW(),SLEEP(1),NOW();</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-6ba210b4353e41bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT SYSDATE(),SLEEP(1),SYSDATE();</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-8a674bc82aef1d5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p><strong>总结：</strong> now() 在执行开始时值就得到了， sysdate() 在函数执行时动态得到值。真正的系统时间，不受mysql 的SLEEP()等函数的影响。</p>
<h1 id="6-格式化日期-（日期转字符串）-DATE-FORMAT-date-format"><a href="#6-格式化日期-（日期转字符串）-DATE-FORMAT-date-format" class="headerlink" title="6. 格式化日期 （日期转字符串） DATE_FORMAT(date, format)"></a>6. 格式化日期 （日期转字符串） DATE_FORMAT(date, format)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DATE_FORMAT(NOW(),&quot;%Y年%m月%d日 %H:%i:%s or %T&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-43ca54b771cd8373.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p><strong>format字符串格式化date值如下:</strong></p>
<ul>
<li>%S, %s 两位数字形式的秒（ 00,01, …, 59）</li>
<li>%I, %i 两位数字形式的分（ 00,01, …, 59）</li>
<li>%H 两位数字形式的小时，24 小时（00,01, …, 23）</li>
<li>%h 两位数字形式的小时，12 小时（01,02, …, 12）</li>
<li>%k 数字形式的小时，24 小时（0,1, …, 23）</li>
<li>%l 数字形式的小时，12 小时（1, 2, …, 12）</li>
<li>%T 24 小时的时间形式（hh:mm:ss）</li>
<li>%r 12 小时的时间形式（hh:mm:ss AM 或hh:mm:ss PM）</li>
<li>%p AM或PM</li>
<li>%W 一周中每一天的名称（Sunday, Monday, …, Saturday）</li>
<li>%a 一周中每一天名称的缩写（Sun, Mon, …, Sat）</li>
<li>%d 两位数字表示月中的天数（00, 01,…, 31）</li>
<li>%e 数字形式表示月中的天数（1, 2， …, 31）</li>
<li>%D 英文后缀表示月中的天数（1st, 2nd, 3rd,…）</li>
<li>%w 以数字形式表示周中的天数（ 0 = Sunday, 1=Monday, …, 6=Saturday）</li>
<li>%j 以三位数字表示年中的天数（ 001, 002, …, 366）</li>
<li>%U 周（0, 1, 52），其中Sunday 为周中的第一天</li>
<li>%u 周（0, 1, 52），其中Monday 为周中的第一天</li>
<li>%M 月名（January, February, …, December）</li>
<li>%b 缩写的月名（ January, February,…., December）</li>
<li>%m 两位数字表示的月份（01, 02, …, 12）</li>
<li>%c 数字表示的月份（1, 2, …., 12）</li>
<li>%Y 四位数字表示的年份</li>
<li>%y 两位数字表示的年份</li>
<li>%% 直接值“%”</li>
</ul>
<hr>
<h2 id="6-2-STR-TO-DATE（字符串转日期）"><a href="#6-2-STR-TO-DATE（字符串转日期）" class="headerlink" title="6.2 STR_TO_DATE（字符串转日期）"></a>6.2 STR_TO_DATE（字符串转日期）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT STR_TO_DATE(&quot;5月30号 2019年&quot;,&quot;%m月%d号 %Y年&quot;)</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-b496aa4c902a7df2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<h1 id="7-选取日期时间的各个部分"><a href="#7-选取日期时间的各个部分" class="headerlink" title="7.选取日期时间的各个部分"></a>7.选取日期时间的各个部分</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT NOW(),date(NOW()),time(NOW()),year(NOW()),quarter(NOW()),month(NOW()),week(NOW()),day(NOW()),hour(NOW()),minute(NOW()),second(NOW());</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-ceb34d593a6d55ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT YEAR(&#39;2019&#x2F;09&#x2F;10 12:13:14&#39;),MONTH(&#39;2019-09-10 12:13:14&#39;),DAY(&#39;2019-09-10 12:13:14&#39;),HOUR(&#39;2019-09-10 12:13:14&#39;)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-83279345ca9463c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p><strong>选取日期函数如下：</strong></p>
<ul>
<li>date(date);</li>
<li>time(date);</li>
<li>year(date);</li>
<li>quarter(date);</li>
<li>month(date);</li>
<li>week(date);</li>
<li>day(date);</li>
<li>hour(date);</li>
<li>minute(date);</li>
<li>second(date);</li>
<li>microsecond(date);</li>
</ul>
<h1 id="8-MySQL-Extract-函数"><a href="#8-MySQL-Extract-函数" class="headerlink" title="8.MySQL Extract() 函数"></a>8.MySQL Extract() 函数</h1><ul>
<li>extract(year from date);</li>
<li>extract(quarter from date);</li>
<li>extract(month from date);</li>
<li>extract(week from date);</li>
<li>extract(day from date);</li>
<li>extract(hour from date);</li>
<li>extract(minute from date);</li>
<li>extract(second from date);</li>
<li>extract(microsecond from date);</li>
<li>extract(year_month from date);</li>
<li>extract(day_hour from date);</li>
<li>extract(day_minute from date);</li>
<li>extract(day_second from date);</li>
<li>extract(day_microsecond from date);</li>
<li>extract(hour_minute from date);</li>
<li>extract(hour_second from date);</li>
<li>extract(hour_microsecond from date);</li>
<li>extract(minute_second from date);</li>
<li>extract(minute_microsecond from date);</li>
<li>extract(second_microsecond from date);</li>
</ul>
<p><strong>注意：</strong>MySQL Extract() 函数除了没有date(),time()的功能外，其他功能一应具全。并且还具有选取‘day_microsecond’等功能。注意这里不是只选取 day 和 microsecond，而是从日期的 day 部分一直选取到 microsecond 部分</p>
<h1 id="9-dayofweek-dayofmonth-dayofyear-…"><a href="#9-dayofweek-dayofmonth-dayofyear-…" class="headerlink" title="9.dayofweek(), dayofmonth(), dayofyear()…"></a>9.dayofweek(), dayofmonth(), dayofyear()…</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT dayofweek(NOW()),dayofmonth(NOW()), dayofyear(NOW());</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-c695660b71764000.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="9-2-MySQL-week…-函数：week-weekofyear-dayofweek-weekday-yearweek"><a href="#9-2-MySQL-week…-函数：week-weekofyear-dayofweek-weekday-yearweek" class="headerlink" title="9.2 MySQL week… 函数：week(), weekofyear(), dayofweek(), weekday(), yearweek()"></a>9.2 MySQL week… 函数：week(), weekofyear(), dayofweek(), weekday(), yearweek()</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT WEEK(NOW()),WEEKOFYEAR(NOW()) ,weekday(NOW()),dayofweek(NOW()), yearweek(NOW());</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-475e9560e0d020ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p><em>MySQL week() 函数，可以有两个参数，具体可看手册。 weekofyear() 和 week() 一样，都是计算“某天”是位于一年中的第几周。 weekofyear(@dt) 等价于 week(@dt,3)。<br>MySQL weekday()函数和dayofweek()类似，都是返回“某天”在一周中的位置。不同点在于参考的标准， weekday：(0 =Monday, 1 = Tuesday, …, 6 = Sunday)； dayofweek：（1 = Sunday, 2 = Monday,…, 7 = Saturday）</em></p>
<p><strong>WEEK(date[,mode])函数:</strong></p>
<table>
<thead>
<tr>
<th align="center">Mode</th>
<th align="center">一个星期的第一天</th>
<th align="center">范围</th>
<th align="center">Week 1 是第一个星期</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">Sunday</td>
<td align="center">0-53</td>
<td align="center">with a Sunday in this year</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">Monday</td>
<td align="center">0-53</td>
<td align="center">with more than 3 days this year</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Sunday</td>
<td align="center">1-53</td>
<td align="center">with a Sunday in this year</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Monday</td>
<td align="center">1-53</td>
<td align="center">with more than 3 days this year</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">Sunday</td>
<td align="center">0-53</td>
<td align="center">with more than 3 days this year</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">Monday</td>
<td align="center">0-53</td>
<td align="center">with a Monday in this year</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">Sunday</td>
<td align="center">1-53</td>
<td align="center">with more than 3 days this year</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">Monday</td>
<td align="center">1-53</td>
<td align="center">with a Monday in this year</td>
</tr>
</tbody></table>
<p><strong>如：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT weekofyear(NOW()),week(NOW(),3),week(NOW())</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-30aa33fbd055b2e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<h2 id="9-3-MySQL-返回星期和月份名称函数：dayname-monthname"><a href="#9-3-MySQL-返回星期和月份名称函数：dayname-monthname" class="headerlink" title="9.3 MySQL 返回星期和月份名称函数：dayname(), monthname()"></a>9.3 MySQL 返回星期和月份名称函数：dayname(), monthname()</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT dayname(NOW()),monthname(NOW())</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-0734bea99af7a8b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<h1 id="10-msyql增加日期date-add-，减少日期date-sub"><a href="#10-msyql增加日期date-add-，减少日期date-sub" class="headerlink" title="10 msyql增加日期date_add() ，减少日期date_sub()"></a>10 msyql增加日期date_add() ，减少日期date_sub()</h1><p><em>date_add() 可以替换adddate(),addtime()</em><br><em>date_sub()可以替换subdate(), subtime()</em><br><em>建议使用date_add() 和date_sub()</em></p>
<p>增加1天1小时1分1秒</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT date_add(&quot;2000-2-2&quot;,interval &quot;1 1:1:1&quot; DAY_SECOND)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-1d0349dddb255bd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p>对照表data(date,interval expr unit)<br><img src="https://upload-images.jianshu.io/upload_images/19382524-3f7323f212905016.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysql.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT date_add(&quot;2000-2-2&quot;,interval &quot;-1 -1:-1:-1&quot; DAY_SECOND)</span><br><span class="line">相同</span><br><span class="line">SELECT date_sub(&quot;2000-2-2&quot;,interval &quot;1 1:1:1&quot; DAY_SECOND)</span><br></pre></td></tr></table></figure>
<p>date_sub()与date_add()类似，不再赘述</p>
<h1 id="11-MySQL-日期函数：period-add-P-N-period-diff-P1-P2"><a href="#11-MySQL-日期函数：period-add-P-N-period-diff-P1-P2" class="headerlink" title="11.MySQL 日期函数：period_add(P,N), period_diff(P1,P2)"></a>11.MySQL 日期函数：period_add(P,N), period_diff(P1,P2)</h1><p><em>函数参数“P” 的格式为“YYYYMM” 或者 “YYMM”，第二个参数“N” 表示增加或减去 N month（月）。</em></p>
<p><strong>日期加/减去N月</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select period_add(20190202,1), period_add(20190202,-1);</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-b02a87b59fa96e21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<hr>
<p><strong>日期 P1-P2，返回 N 个月</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select period_diff(201901, 201905);</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-7ede64103d4aac80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p>MySQL 日期、时间相减函数：datediff(date1,date2), timediff(time1,time2)</p>
<h2 id="11-2-MySQL-日期、时间相减函数：datediff-date1-date2-timediff-time1-time2"><a href="#11-2-MySQL-日期、时间相减函数：datediff-date1-date2-timediff-time1-time2" class="headerlink" title="11.2 .MySQL 日期、时间相减函数：datediff(date1,date2), timediff(time1,time2)"></a>11.2 .MySQL 日期、时间相减函数：datediff(date1,date2), timediff(time1,time2)</h2><p><strong>两个日期相减 date1 - date2返回天数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select datediff(&#39;20190101&#39;, &#39;20190201&#39;);</span><br><span class="line">select datediff(&#39;2019-01-01&#39;, &#39;2019-02-01&#39;)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-fb59144db42a260a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<h2 id="11-3-转换函数：time-to-sec-time-sec-to-time-seconds"><a href="#11-3-转换函数：time-to-sec-time-sec-to-time-seconds" class="headerlink" title="11.3 转换函数：time_to_sec(time), sec_to_time(seconds)"></a>11.3 转换函数：time_to_sec(time), sec_to_time(seconds)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select time_to_sec(&#39;01:01:01&#39;),sec_to_time(3661);</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-5b1baaaeff8b4a99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<h2 id="11-4-转换函数：to-days-date-from-days-days"><a href="#11-4-转换函数：to-days-date-from-days-days" class="headerlink" title="11.4 转换函数：to_days(date), from_days(days)"></a>11.4 转换函数：to_days(date), from_days(days)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select to_days(&#39;2019-01-01&#39;),from_days(737425);</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-bf176f5a330da047.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<h2 id="11-5-MySQL-获得国家地区时间格式函数：get-format"><a href="#11-5-MySQL-获得国家地区时间格式函数：get-format" class="headerlink" title="11.5 MySQL 获得国家地区时间格式函数：get_format()"></a>11.5 MySQL 获得国家地区时间格式函数：get_format()</h2><p><strong>MySQL get_format() 语法：</strong></p>
<p><em>get_format(date|time|datetime, ‘eur’|’usa’|’jis’|’iso’|’internal’)</em></p>
<p><strong>示例：</strong></p>
<ul>
<li>get_format(date,’usa’) ; – ‘%m.%d.%Y’</li>
<li>get_format(date,’jis’) ; – ‘%Y-%m-%d’</li>
<li>get_format(date,’iso’) ; – ‘%Y-%m-%d’</li>
<li>get_format(date,’eur’) ; – ‘%d.%m.%Y’</li>
<li>get_format(date,’internal’) ; – ‘%Y%m%d’</li>
<li>get_format(datetime,’usa’) ; – ‘%Y-%m-%d %H.%i.%s’</li>
<li>get_format(datetime,’jis’) ; – ‘%Y-%m-%d %H:%i:%s’</li>
<li>get_format(datetime,’iso’) ; – ‘%Y-%m-%d %H:%i:%s’</li>
<li>get_format(datetime,’eur’) ; – ‘%Y-%m-%d %H.%i.%s’</li>
<li>get_format(datetime,’internal’) ; – ‘%Y%m%d%H%i%s’</li>
<li>get_format(time,’usa’) ; – ‘%h:%i:%s %p’</li>
<li>get_format(time,’jis’) ; – ‘%H:%i:%s’</li>
<li>get_format(time,’iso’) ; – ‘%H:%i:%s’</li>
<li>get_format(time,’eur’) ; – ‘%H.%i.%s’</li>
<li>get_format(time,’internal’) ; – ‘%H%i%s’</li>
</ul>
<h2 id="11-6-MySQL-拼凑日期、时间函数：makdedate-year-dayofyear-maketime-hour-minute-second"><a href="#11-6-MySQL-拼凑日期、时间函数：makdedate-year-dayofyear-maketime-hour-minute-second" class="headerlink" title="11.6 MySQL 拼凑日期、时间函数：makdedate(year,dayofyear), maketime(hour,minute,second)"></a>11.6 MySQL 拼凑日期、时间函数：makdedate(year,dayofyear), maketime(hour,minute,second)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select makedate(2019,33),maketime(1,1,1)</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-3c7ff7cfab9557b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<h2 id="11-7-MySQL-（Unix-时间戳、日期）转换函数："><a href="#11-7-MySQL-（Unix-时间戳、日期）转换函数：" class="headerlink" title="11.7 MySQL （Unix 时间戳、日期）转换函数："></a>11.7 MySQL （Unix 时间戳、日期）转换函数：</h2><ul>
<li>unix_timestamp(),</li>
<li>unix_timestamp(date),</li>
<li>from_unixtime(unix_timestamp),</li>
<li>from_unixtime(unix_timestamp,format)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select unix_timestamp(),unix_timestamp(&#39;2019-01-01&#39;),from_unixtime(1570080832),from_unixtime(1570080832, &#39;%Y %D %M %h:%i:%s %x&#39;);</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-4c75c5ecac896877.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<h2 id="11-8-MySQL-时间戳（timestamp）转换、增、减函数"><a href="#11-8-MySQL-时间戳（timestamp）转换、增、减函数" class="headerlink" title="11.8 MySQL 时间戳（timestamp）转换、增、减函数"></a>11.8 MySQL 时间戳（timestamp）转换、增、减函数</h2><ul>
<li>timestamp(date) – date to timestamp</li>
<li>timestamp(datetime,time) – datetime + time</li>
<li>timestampadd(interval,int_expr,datetime_expr)</li>
<li>timestampdiff(interval,datetime_expr1,datetime_expr2)</li>
</ul>
<p><strong>interval 参数:</strong></p>
<ul>
<li>FRAC_SECOND：表示间隔是毫秒</li>
<li>SECOND：秒</li>
<li>MINUTE：分钟</li>
<li>HOUR：小时</li>
<li>DAY：天</li>
<li>WEEK：星期</li>
<li>MONTH：月</li>
<li>QUARTER：季度</li>
<li>YEAR：年</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select timestamp(&#39;2000-01-01&#39;),timestamp(&#39;2000-01-01 01:00:00&#39;, &#39;01:01:01&#39;),timestamp(&#39;2000-01-01 01:00:00&#39;, &#39;01 01:01:01&#39;),timestampadd(day, 1, &#39;2000-01-01 01:00:00&#39;);</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-194940439867b59a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p><strong>MySQL timestampadd() 函数类似于 date_add()</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select timestampadd(day, 1, &#39;2000-01-01 01:00:00&#39;), date_add(&#39;2000-01-01 01:00:00&#39;, interval 1 day);</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-2f82c08279b4368a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select timestampdiff(year,&#39;2000-01-01&#39;,&#39;2001-01-11&#39;),datediff(&#39;2000-02-01&#39;,&#39;2000-01-01&#39;);</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-0539e8438139b674.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p><em>MySQL timestampdiff() 函数就比 datediff() 功能强多了，datediff() 只能计算两个日期（date）之间相差的天数</em></p>
<h1 id="12-生产示例"><a href="#12-生产示例" class="headerlink" title="12. 生产示例"></a>12. 生产示例</h1><h2 id="12-1"><a href="#12-1" class="headerlink" title="12.1"></a>12.1</h2><p><em>t_order.sql</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;t_order&#96;  (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT COMMENT &#39;订单id&#39;,</span><br><span class="line">  &#96;name&#96; varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT &#39;订单名称&#39;,</span><br><span class="line">  &#96;createTime&#96; datetime(0) DEFAULT NULL COMMENT &#39;创建时间&#39;,</span><br><span class="line">  &#96;count&#96; int(11) DEFAULT NULL COMMENT &#39;订单数量&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 11 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of t_order</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;t_order&#96; VALUES (1, &#39;订单1&#39;, &#39;2016-02-02 14:02:59&#39;, 10);</span><br><span class="line">INSERT INTO &#96;t_order&#96; VALUES (2, &#39;订单2&#39;, &#39;2016-04-01 14:02:59&#39;, 100);</span><br><span class="line">INSERT INTO &#96;t_order&#96; VALUES (3, &#39;订单3&#39;, &#39;2016-07-08 14:02:59&#39;, 200);</span><br><span class="line">INSERT INTO &#96;t_order&#96; VALUES (4, &#39;订单4&#39;, &#39;2018-01-01 14:06:06&#39;, 100);</span><br><span class="line">INSERT INTO &#96;t_order&#96; VALUES (5, &#39;订单5&#39;, &#39;2019-01-01 14:02:59&#39;, 123);</span><br><span class="line">INSERT INTO &#96;t_order&#96; VALUES (6, &#39;订单6&#39;, &#39;2019-04-30 14:02:59&#39;, 45);</span><br><span class="line">INSERT INTO &#96;t_order&#96; VALUES (7, &#39;订单7&#39;, &#39;2019-09-25 14:02:59&#39;, 66);</span><br><span class="line">INSERT INTO &#96;t_order&#96; VALUES (8, &#39;订单8&#39;, &#39;2019-11-11 14:02:59&#39;, 33);</span><br><span class="line">INSERT INTO &#96;t_order&#96; VALUES (9, &#39;订单9&#39;, &#39;2019-12-18 14:02:59&#39;, 26);</span><br><span class="line">INSERT INTO &#96;t_order&#96; VALUES (10, &#39;订单10&#39;, &#39;2019-10-24 14:04:44&#39;, 26);</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 查询2018-01-01后的订单包括2018-01-01</span><br><span class="line">SELECT * FROM t_order where createTime&gt;&#x3D;&quot;2018-01-01&quot;</span><br><span class="line"></span><br><span class="line">2.查询2018-01-01后的订单包括2018-01-01总数量</span><br><span class="line">SELECT SUM(count) FROM t_order where createTime&gt;&#x3D;&quot;2018-01-01&quot; </span><br><span class="line"></span><br><span class="line">3.查询每年的订单</span><br><span class="line">- MySQL: SUBSTR( ), SUBSTRING( )</span><br><span class="line">- Oracle: SUBSTR( )</span><br><span class="line">- SQL Server: SUBSTRING( )</span><br><span class="line"></span><br><span class="line">SELECT SUBSTR(createTime,1,4),SUM(count) FROM t_order  GROUP  BY SUBSTR(createTime,1,4)</span><br><span class="line">SELECT YEAR(createTime),SUM(count) FROM t_order  GROUP  BY YEAR(createTime)</span><br><span class="line"></span><br><span class="line">4.统计2019年每个月的订单数</span><br><span class="line">SELECT MONTH(createTime),SUM(count) FROM t_order  where YEAR(createTime)&#x3D;&quot;2019&quot; GROUP BY MONTH(createTime)</span><br><span class="line">SELECT SUBSTR(createTime,1,7),SUM(count) FROM t_order  where YEAR(createTime)&#x3D;&quot;2019&quot; GROUP BY SUBSTR(createTime,1,7)</span><br><span class="line">SELECT MONTH(createTime),SUM(count) FROM t_order  where YEAR(createTime)&#x3D;&quot;2019&quot; GROUP BY MONTH(createTime)</span><br><span class="line">SELECT SUBSTR(createTime,6,2),SUM(count) FROM t_order  where YEAR(createTime)&#x3D;&quot;2019&quot; GROUP BY SUBSTR(createTime,6,2)</span><br><span class="line">SELECT CONCAT( YEAR ( createTime ), &quot;年&quot;, MONTH ( createTime ), &quot;月&quot; ),SUM( count ) FROM t_order WHERE YEAR ( createTime ) &#x3D; &quot;2019&quot; GROUP BY CONCAT( YEAR ( createTime ), &quot;年&quot;, MONTH ( createTime ), &quot;月&quot; )</span><br><span class="line"></span><br><span class="line">5.统计2019年每个季度的订单数</span><br><span class="line">SELECT QUARTER(createTime),SUM(count) FROM t_order  where YEAR(createTime)&#x3D;&quot;2019&quot; GROUP BY QUARTER(createTime)</span><br><span class="line"></span><br><span class="line">6.按天统计</span><br><span class="line">SELECT CONCAT(YEAR(createTime),&quot;-&quot;,MONTH(createTime),&quot;-&quot;,DAY(createTime)),SUM(count) FROM t_order GROUP BY CONCAT(YEAR(createTime),&quot;-&quot;,MONTH(createTime),&quot;-&quot;,DAY(createTime))</span><br><span class="line">SELECT SUBSTR(createTime,1,10),SUM(count) FROM t_order GROUP BY SUBSTR(createTime,1,10)</span><br></pre></td></tr></table></figure>




<p>参考博客<a href="https://blog.csdn.net/thinktik/article/details/80993948">MySQL 有关当前日期及日期格式的操作(大全)</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql一些常用的操作</title>
    <url>/2020/07/17/mysql/mysql%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p><code>mysql 解压版安装</code></p>
<ul>
<li>1.解压（windows7）</li>
<li>2.进入到bin目录<br><code>&gt;mysqld install mysql</code>(服务名称，随便起 默认mysql)<br><code>&gt;mysqld --initialize</code>(5.6的版本不用这步 ，5.7的需要这布初始化data文件夹)</li>
<li>3<br><code>&gt;net start mysql</code>启动服务</li>
<li>4.&gt;登陆<br><code>&gt;mysql -hlocalhost -uroot -p</code>(data文件夹下有一个.err结尾的文件。里面存放着一个临时登录密码)</li>
</ul>
<p><code>一个电脑中安装多个mysql</code><br><code>mysqld install mysql2</code>只是这一步不一样，其他一样</p>
<p><strong>my.ini文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">innodb_force_recovery &#x3D; 1</span><br><span class="line"># 设置3306端口</span><br><span class="line">port&#x3D;3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir&#x3D;D:\\developer\\mysql-5.6.34-winx64   # 切记此处一定要用双斜杠\\，单斜杠我这里会出错，不过看别人的教程，有的是单斜杠。自己尝试吧</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir&#x3D;D:\\developer\\mysql-5.6.34-winx64\\Data   # 此处同上</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections&#x3D;200</span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors&#x3D;10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">default_authentication_plugin&#x3D;mysql_native_password</span><br></pre></td></tr></table></figure>

<h1 id="二、开启binlog日志文件"><a href="#二、开启binlog日志文件" class="headerlink" title="二、开启binlog日志文件"></a>二、开启binlog日志文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log-bin&#x3D;log-bin\\mysql_bin.log</span><br><span class="line">#binlog日志格式，mysql默认采用statement，建议使用mixed</span><br><span class="line">#mysql复制主要有三种方式：</span><br><span class="line">#基于SQL语句的复制(statement-based replication, SBR)，</span><br><span class="line">#基于行的复制(row-based replication, RBR)，</span><br><span class="line">#混合模式复制(mixed-based replication, MBR)。</span><br><span class="line">#对应的，binlog的格式也有三种：STATEMENT，ROW，MIXED。</span><br><span class="line">binlog_format&#x3D;MIXED   </span><br><span class="line">#binlog过期清理时间                     </span><br><span class="line">expire_logs_days&#x3D;10   </span><br><span class="line">#binlog每个日志文件大小                       </span><br><span class="line">max_binlog_size&#x3D; 100m   </span><br><span class="line">#binlog缓存大小                   </span><br><span class="line">binlog_cache_size&#x3D; 4m   </span><br><span class="line">最大binlog缓存大小                      </span><br><span class="line">max_binlog_cache_size&#x3D; 512m                     </span><br><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[client]</span><br><span class="line"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">port&#x3D;3306</span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure>
<h1 id="三、MySQL修改root密码的4种方法-以windows为例"><a href="#三、MySQL修改root密码的4种方法-以windows为例" class="headerlink" title="三、MySQL修改root密码的4种方法(以windows为例)"></a>三、MySQL修改root密码的4种方法(以windows为例)</h1><ul>
<li><p>方法1：<br>用<code>SET PASSWOR</code>命令 <br>首先登录MySQL。 <br>格式：<code>mysql&gt; set password for 用户名@localhost = password(&#39;新密码&#39;); </code><br>例子：<code>mysql&gt; set password for root@localhost = password(&#39;123&#39;); </code></p>
</li>
<li><p>方法2：用<code>mysqladmin </code><br>格式：<code>mysqladmin -u用户名 -p旧密码 password 新密码 </code><br>例子：<code>mysqladmin -uroot -p123456 password 123 </code></p>
</li>
<li><p>方法3：<br>用<code>UPDATE</code>直接编辑<code>user</code>表 <br>首先登录MySQL。 <br><code>mysql&gt; use mysql; </code><br><code>mysql&gt; update user set password=password(&#39;123&#39;) where user=&#39;root&#39; and host=&#39;localhost&#39;; </code><br><code>mysql&gt; flush privileges;</code></p>
</li>
<li><p>方法4：在忘记root密码的时候，可以这样 <br>以windows为例： </p>
<ul>
<li><ol>
<li>关闭正在运行的MySQL服务。 </li>
</ol>
</li>
<li><ol start="2">
<li>打开DOS窗口，转到mysql\bin目录。 </li>
</ol>
</li>
<li><ol start="3">
<li>输入<code>mysqld --skip-grant-tables</code> 回车。<code>--skip-grant-tables</code> 的意思是启动MySQL服务的时候跳过权限表认证。 </li>
</ol>
</li>
<li><ol start="4">
<li>再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。 </li>
</ol>
</li>
<li><ol start="5">
<li>输入mysql回车，如果成功，将出现MySQL提示符 &gt;。 </li>
</ol>
</li>
<li><ol start="6">
<li>连接权限数据库： <code>use mysql; </code> </li>
</ol>
</li>
<li><ol start="7">
<li>改密码：<code>update user set password=password(&quot;123&quot;) where user=&quot;root&quot;;</code>（别忘了最后加分号） 。 </li>
</ol>
</li>
<li><ol start="8">
<li>刷新权限（必须步骤）：<code>flush privileges;　</code> </li>
</ol>
</li>
<li><ol start="9">
<li>退出 quit。 </li>
</ol>
</li>
<li><ol start="10">
<li>注销系统，再进入，使用用户名root和刚才设置的新密码123登录。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h1 id="四、MySQL典型的三种引擎"><a href="#四、MySQL典型的三种引擎" class="headerlink" title="四、MySQL典型的三种引擎"></a>四、MySQL典型的三种引擎</h1><p><strong>查看所有的数据库引擎</strong><br><code>show engines;</code><br><code>show engines \G; </code>更友好的页面</p>
<ul>
<li><p>MyISAM:<br><code>不支持事务、外键</code>。访问<code>速度快</code>即<code>查询插入快 删除更新慢</code><br>MyISAM的表存储成3个文件。文件的名字与表名相同,拓展名为<code>frm、MYD、MYI</code>。<br>其实，<code>frm</code>文件存储表的结构；<code>MYD</code>文件存储数据，是<code>MYData</code>的缩写；<code>MYI</code>文件存储索引，是<code>MYIndex</code>的缩写。MyISAM的<code>优势</code>在于<code>占用空间小，处理速度快</code>。<code>缺点</code>是<code>不支持事务的完整性和并发性</code>。</p>
</li>
<li><p>INNODB:<br><code>提供了事务，回滚以及系统崩溃修复能力和多版本并发控制的事务的安全。</code><br><code>支持AUTO_INCREMENT</code><br><code>支持外键（FOREIGN KEY）</code><br><code>外键所在的表叫做子表，外键所依赖（REFERENCES）的表叫做父表。</code><br><code>父表中被字表外键关联的字段必须为主键。</code><br><code>当删除、更新父表中的某条信息时，子表也必须有相应的改变，这是数据库的参照完整性规则。</code><br><code>缺点是读写效率较差，占用的数据空间相对较大。</code></p>
</li>
<li><p>MEMORY：<br>它使用存储在<code>内存</code>中的内容来创建表，而且数据全部放在内存中。这些特性与<code>前面的两个</code>很不同。<br>MEMORY默认使用<code>哈希索引</code>。速度比使用<code>B型树索引快</code>。当然如果你想用B型树索引，可以在创建索引时指定。<br><code>MEMORY用到的很少</code>，因为它是把数据存到<code>内存</code>中，如果内存出现异常就会影响数据。<br>如果重启或者关机，所有数据都会消失。因此，基于MEMORY的表的生命周期很短，一般是<code>一次性</code>的。</p>
</li>
</ul>
<p><code>注意</code>，<code>同一个数据库</code>也可以使用<code>多种存储引擎的表</code>。<br>如果一个表要求比较高的<code>事务处理</code>，可以选择<code>InnoDB</code>。<br>这个数据库中可以将<code>查询要求比较高</code>的表选择<code>MyISAM</code>存储。<br>如果该数据库需要一个用于<code>查询的临时表</code>，可以选择<code>MEMORY</code>存储引擎。</p>
<p><strong>查看当前默认引擎</strong><br><code>show variables like &quot;storage_engine%&quot;;</code></p>
<p><code>修改表的引擎</code><br>这种转化方式需要大量的时间 和I/O，mysql要执行从旧表 到新表的一行一行的复制所以效率比较低,在转化这期间源表加了读锁,从一种引擎到另一种引擎做表转化，所有属于原始引擎的专用特性都会丢失，<br>比如从<code>innodb</code>到 <code>myisam</code> 则 <code>innodb</code>的索引会丢失！<br><code>alter  table  tablename  engine = INnodb /MyISAM/Memory</code></p>
<p><code>配置文件修改默认引擎</code><br><strong>my.in</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br></pre></td></tr></table></figure>


<h1 id="五、完整性约束关键字"><a href="#五、完整性约束关键字" class="headerlink" title="五、完整性约束关键字"></a>五、完整性约束关键字</h1><ul>
<li>NOT NULL</li>
<li>DEFAULT</li>
<li>UNIQUE</li>
<li>PRIMARY KEY</li>
<li>AUTO_INCREMENT</li>
<li>FOREIGN KEY</li>
</ul>
<h1 id="六、索引（index-key）"><a href="#六、索引（index-key）" class="headerlink" title="六、索引（index|key）"></a>六、索引（index|key）</h1><p>索引按储存类型分为<code>BTREE索引</code>和<code>HASH索引</code><br>msyql中6种索引：<code>普通索引、唯一索引、全文索引、单列索引、多列索引、空间索引</code>。<br><code>INNODB</code>和<code>MYISAM</code>支持<code>BTREE索引</code>，<code>MEMORY</code>支持<code>HASH|BTREE索引</code>。<br>msyql所支持的存储引擎对每个表至少支持<code>16个索引</code>，总索引长度<code>至少256字节</code>。</p>
<ul>
<li>建表时增加索引</li>
</ul>
<blockquote>
<p>create table table_name(<br>   id int,<br>   name varchar(10),<br>   age tinyint unsigned<br>   INDEX|KEY 【index_name】(字段名 【（长度）】【ASC|DESC】)<br>)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;db1&#96;.&#96;tb3&#96;  (</span><br><span class="line">  &#96;name&#96; varchar(10)  DEFAULT NULL,</span><br><span class="line">  &#96;gg3&#96; char(3) DEFAULT NULL,</span><br><span class="line">  &#96;mmm&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  &#96;id&#96; int(10) NOT NULL DEFAULT 0,</span><br><span class="line">  &#96;hh&#96; int(11) DEFAULT NULL,</span><br><span class="line">	KEY  (name),</span><br><span class="line">	INDEX ggindex(gg3),</span><br><span class="line">	INDEX hhkey(hh),</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>分析(<code>explain</code>)是否用到了索引<br><code>explain select * from table_name where name=&#39;dfad&#39; \G</code></li>
<li>在已存在的表上创建<code>普通索引</code></li>
</ul>
<p>2.<code>create index 索引名 on 表名（字段名【（长度）】 【ASC|DESC】）</code><br>3.<code>alter table table_naem add index|key index_name(属性名 【（长度）】【ASC|DESC】)</code><br><em>example:</em><br><code>create index mmm_index on db3(mmm(10) ASC);</code></p>
<ul>
<li><p>创建<code>唯一索引</code>与创建普通索引基本一致就多了个<code>UNIQUEDROP TABLE IF EXISTS </code>tb4<code>;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb4&#96; (</span><br><span class="line">&#96;id&#96; INT ( 10 ),</span><br><span class="line">&#96;name&#96; VARCHAR ( 10 ),</span><br><span class="line">&#96;age&#96; int,</span><br><span class="line">&#96;address&#96; VARCHAR ( 11 ) DEFAULT NULL,</span><br><span class="line">UNIQUE INDEX|KEY ( &#96;id&#96; ) USING BTREE </span><br><span class="line">) ENGINE &#x3D; INNODB;</span><br></pre></td></tr></table></figure>
<p><code>CREATE UNIQUE INDEX hh_index ON tb4(</code>address<code>);</code><br><code>ALTER TABLE tb4 ADD UNIQUE INDEX|KEY name_index(</code>name<code> ASC);</code></p>
</li>
<li><p><code>全文索引</code>MySQL<code> 5.6</code> 以前的版本，只有 MyISAM 存储引擎支持全文索引；<br>MySQL <code>5.6 及以后</code>的版本，MyISAM 和 <code>InnoDB（创建时，非常耗时） </code>存储引擎<code>均支持</code>全文索引;<br>只有字段的数据类型为<code> char、varchar、text 及其系列</code>才可以建全文索引。</p>
</li>
<li><p>创建全文索引<code>DROP TABLE IF EXISTS </code>tb4<code>;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb4&#96; (</span><br><span class="line">&#96;id&#96; INT ( 10 ),</span><br><span class="line">&#96;name&#96; VARCHAR ( 10 ),</span><br><span class="line">&#96;name2&#96; VARCHAR ( 10 ),</span><br><span class="line">&#96;name3&#96; VARCHAR ( 10 ),</span><br><span class="line">&#96;age&#96; int,</span><br><span class="line">&#96;address&#96; VARCHAR ( 11 ) DEFAULT NULL,</span><br><span class="line">FULLTEXT INDEX ( &#96;name&#96; ) </span><br><span class="line">) ENGINE &#x3D; MYISAM;</span><br></pre></td></tr></table></figure>
<p><code>CREATE FULLTEXT INDEX name2_index ON tb4(</code>name2<code>);</code><br><code>ALTER TABLE tb4 ADD FULLTEXT INDEX name3_index(</code>name3<code> ASC);</code></p>
</li>
<li><p>删除索引<br><code>drop index index_name on table_name ;</code><br><code>alter table table_name drop index index_name ;</code><br><code>alter table table_name drop primary key ;</code></p>
</li>
</ul>
<p>其中，在前面的两条语句中，都删除了table_name中的索引index_name。而在最后一条语句中，只在删除PRIMARY KEY索引中使用，因为<code>一个表只可能有一个PRIMARY KEY索引</code>，因此不需要指定索引名。如果没有创建PRIMARY KEY索引，但表具<code>有一个或多个UNIQUE索引</code>，则MySQL将删除<code>第一个UNIQUE索引</code>。</p>
<h1 id="七、视图（view）"><a href="#七、视图（view）" class="headerlink" title="七、视图（view）"></a>七、视图（view）</h1><p><code>视图的建立和删除</code>不影响基本表。当时图来自一个表时，对<code>视图的更新（添加删除和修改）</code>直接影响基本表。当时图来自<code>多个基本表时</code>，<code>不允许</code>添加和删除数据。</p>
<ul>
<li>创建视图<br><code>CREATE VIEW 视图名(列1，列2...) AS SELECT 列1，列2... FROM ...;</code><br><code>使用视图当成表使用就好</code></li>
<li>修改视图<br><code>CREATE OR REPLACE VIEW 视图名 AS SELECT [...] FROM [...];</code><br><code>alter view view_name as 查询字句；</code></li>
<li>删除视图<br><code>drop view view_nama;</code></li>
<li>查看数据库已有视图<br><code>SHOW TABLES [like...];（可以使用模糊查找）</code><br><code>show table status 【from dbname】 【like &#39;pattern&#39;】；</code><br><code>show create view view_name;</code></li>
<li>查看视图详情<br><code>DESC 视图名或者SHOW FIELDS FROM 视图名 视图条件限制    [WITH CHECK OPTION]</code></li>
<li>查看视图数据<br><code>select * from view_name;insert into view_name (字段，字段) values(真实值，真实值);（只对单表示图有效）</code><br><code>update view_name set 字段=&quot;&quot; where 字段=&quot;&quot;;delete from view_name where 字段=“”；</code></li>
</ul>
<h1 id="八、-触发器（trigger）"><a href="#八、-触发器（trigger）" class="headerlink" title="八、 触发器（trigger）"></a>八、 触发器（trigger）</h1><ul>
<li>mysql在执行insert、update、delete语句时会触发触发器。</li>
<li>创建触发器语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger trigger_name before|after trigger_event on table_name for each row trigger_stmt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>CREATE<br>    [DEFINER = { user | CURRENT_USER }]<br>    TRIGGER trigger_name<br>    trigger_time trigger_event<br>    ON tbl_name FOR EACH ROW<br>    trigger_body<br>trigger_time: { BEFORE | AFTER }<br>trigger_event: { INSERT | UPDATE | DELETE }<br>trigger_body:sql语句</p>
</blockquote>
<p><em>example:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER trigger_insert_stu</span><br><span class="line">BEFORE INSERT</span><br><span class="line">ON tb_stu FOR EACH ROW</span><br><span class="line">INSERT INTO t_log(id,table_name,event,time) VALUES(&quot;&quot;,&quot;t_stu&quot;,&quot;INSERT&quot;,NOW());</span><br></pre></td></tr></table></figure>
<ul>
<li>创建多条执行语句的触发器语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE</span><br><span class="line">    TRIGGER trigger_name</span><br><span class="line">    trigger_time trigger_event</span><br><span class="line">    ON tbl_name FOR EACH ROW      </span><br><span class="line">BEGIN</span><br><span class="line">      trigger_body      </span><br><span class="line">END</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><em>example:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">DROP TRIGGER IF EXISTS trigger_insert_stu;</span><br><span class="line">CREATE TRIGGER trigger_insert_stu</span><br><span class="line">BEFORE INSERT</span><br><span class="line">ON tb_stu FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">INSERT INTO tb_log(id,table_name,event,time) VALUES(&quot;&quot;,&quot;t_stu&quot;,&quot;INSERT&quot;,NOW());</span><br><span class="line">INSERT INTO tb_log(id,table_name,event,time) VALUES(&quot;&quot;,&quot;t_stu2&quot;,&quot;INSERT2&quot;,NOW());</span><br><span class="line">END</span><br><span class="line">$$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>
<ul>
<li>查看触发器<br><code>show triggers;</code></li>
<li>切换系统表查看<br><code>use information_schemadesc triggers;</code><br><code>select * from triggers \G</code></li>
<li>删除触发器<br><code>drop trigger trigger_name;</code></li>
</ul>
<h1 id="九、存储过程（procedure-和函数-function"><a href="#九、存储过程（procedure-和函数-function" class="headerlink" title="九、存储过程（procedure)和函数(function)"></a>九、存储过程（procedure)和函数(function)</h1><blockquote>
<p>CREATE<br>    [DEFINER = { user | CURRENT_USER }]<br>    PROCEDURE sp_name ([proc_parameter[,…]])<br>    [characteristic …] routine_body<br>CREATE<br>    [DEFINER = { user | CURRENT_USER }]<br>    FUNCTION sp_name ([func_parameter[,…]])<br>    RETURNS type<br>    [characteristic …] routine_body<br>proc_parameter:<br>    [ IN | OUT | INOUT ] param_name type<br>func_parameter:<br>    param_name type<br>type:<br>    Any valid MySQL data type<br>characteristic:<br>    COMMENT ‘string’<br>  | LANGUAGE SQL<br>  | [NOT] DETERMINISTIC<br>  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }<br>  | SQL SECURITY { DEFINER | INVOKER }<br>routine_body:<br>    Valid SQL routine statement</p>
</blockquote>
<ul>
<li><p>创建存储过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">CREATE PROCEDURE proce_employee_sal()</span><br><span class="line">COMMENT &#39;查询所有雇员工资&#39;</span><br><span class="line">BEGIN</span><br><span class="line">    SELECT sal FROM t_employee;</span><br><span class="line">END$$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></li>
<li><p>创建函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">CREATE FUNCTION func_employee_sal(empno INT(11))</span><br><span class="line">RETURNS DOUBLE(10,2)</span><br><span class="line">COMMENT &#39;查询某个雇员工资&#39;</span><br><span class="line">BEGIN</span><br><span class="line">   RETURN (SELECT sal FROM t_temployee </span><br><span class="line">	 WHERE t_employee.empno&#x3D;empno);</span><br><span class="line">END$$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改存储过程</p>
</li>
</ul>
<blockquote>
<p>alter procedure procedure_name  [characteristic …] characteristic:   | {<br> CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }<br>   | SQL SECURITY { DEFINER | INVOKER }   |comment ‘string’</p>
</blockquote>
<ul>
<li><p>修改函数</p>
<blockquote>
<p>alter function function_name  [characteristic …] characteristic:   | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }<br> | SQL SECURITY { DEFINER | INVOKER }   |comment ‘string’</p>
</blockquote>
</li>
<li><p>删除存储过程和函数<br><code>drop procedure procedure_name;</code><br><code>drop function function_name;</code></p>
</li>
</ul>
<p><strong><em>存储过程与函数有待补充</em></strong></p>
<h1 id="十、mysql事务"><a href="#十、mysql事务" class="headerlink" title="十、mysql事务"></a>十、mysql事务</h1><ul>
<li>1.原子性（atomicity）<br>事务中所涉及的程序对数据库的修改操作要么全部成功，要么全部失败。</li>
<li>2.一致性(consistency)<br>事务执行前和执行后来源和去向保持平衡。</li>
<li>3.隔离型(isolation)<br>并发时每个事务是隔离的，相互不影响。</li>
<li>4.持久性(durability)<br>一旦事务成功提交，应该保证数据的完整存在。</li>
</ul>
<p><code>show session variables like &#39;autocommit&#39;;</code><br><code>set @@autocommit = 0;</code><br><code>show session variables like &#39;autocommit&#39;;</code></p>
<p><strong>mysql通过以下语句支持事务</strong></p>
<ul>
<li>1、 事务开始<br><code>begin或start transaction;</code></li>
<li>2、 事务提交<br><code>commit或commit work；</code></li>
<li>3、 回滚<br><code>rollback或rollback work；</code></li>
<li>4、 保存点设置<br><code>savepoint 标识；</code></li>
<li>5、 回滚到保存点<br><code>rollback to savepoint 标识；</code></li>
<li>6、 删除保存点<br><code>release savepoint 标识；</code></li>
</ul>
<p><strong>事务隔离级别</strong></p>
<ul>
<li><p>READ-UNCOMMITTED  读未提交<br>所有事务都可以看到没有提交事务的数据。另一个事务修改了数据，但尚未提交，而本事务中的SELECT会读到这些未被提交的数据（脏读）。</p>
</li>
<li><p>READ-COMMITTED    读已提交（Oracle，SQL Server默认）<br>事务成功提交后才可以被查询到。本事务读取到的是最新的数据（其他事务提交后的）。问题是，在同一个事务里，前后两次相同的SELECT会读到不同的结果（不重复读）。在同一个事务生命周期内，也就是这个事务还未提交之前。如果另外一个事务，对数据进行了编辑(update)或者删除(delete)操作。那么A事务就会读取到。简单理解，就是在一个事务生命周期内，多次查询数据，每次都可能查出来的不一样。</p>
</li>
<li><p>REPEATABLE-READ   重复读(mysql默认级别)<br>同一个事务多个实例读取数据时，可能将未提交的记录查询出来，而出现幻读。即同一个事务里，SELECT的结果是事务开始时时间点的状态，因此，同样的SELECT操作读到的结果会是一致的。但是，会有幻读现象。幻读的结果其实和不可重复读是一样的表现，差异就在于，不可重复读，主要是针对其他事务进行了编辑(update)和删除(delete)操作。而幻读主要是针对插入(insert)操作。也就是在一个事务生命周期内，会查询到另外一个事务新插入的数据。</p>
</li>
<li><p>SERIALIZABLE     序列化<br>读操作会隐式获取共享锁，可以保证不同事务间的互斥。强制的进行排序，在每个读读数据行上添加共享锁。会导致大量超时现象和锁竞争。</p>
</li>
</ul>
<p><strong>四个级别逐渐增强，每个级别解决一个问题。</strong></p>
<ul>
<li>脏读<br>最容易理解。另一个事务修改了数据，但尚未提交，而本事务中的SELECT会读到这些未被提交的数据。</li>
<li>不重复读<br>解决了脏读后，会遇到，同一个事务执行过程中，另外一个事务提交了新数据，因此本事务先后两次读到的数据结果会不一致。</li>
<li>幻读<br>解决了不重复读，保证了同一个事务里，查询的结果都是事务开始并且第一次查询时的状态（一致性）。但是，如果另一个事务同时提交了新数据，虽然本事务再次按照相同的条件查找会得到相同的结果集，但是本事务指定更新时(看了后面的演示你就会知道)，就会“惊奇的”发现了这些新数据，貌似之前读到的数据是“鬼影”一样的幻觉。</li>
</ul>
<p>不同的隔离级别有不同的现象，并有不同的锁定/并发机制，隔离<code>级别越高</code>，数据库的<code>并发性就越差</code>，4种事务隔离级别分别表现的现象如下表：</p>
<table>
<thead>
<tr>
<th align="center">隔离级别</th>
<th align="center">脏读</th>
<th align="center">不重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">read uncommitted</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
</tr>
<tr>
<td align="center">read committed</td>
<td align="center">NO</td>
<td align="center">YES</td>
<td align="center">YES</td>
</tr>
<tr>
<td align="center">repeatable read</td>
<td align="center">NO</td>
<td align="center">NO</td>
<td align="center">YES</td>
</tr>
<tr>
<td align="center">serializable</td>
<td align="center">NO</td>
<td align="center">NO</td>
<td align="center">NO</td>
</tr>
<tr>
<td align="center">参考<a href="https://blog.csdn.net/fsfsfsdfsdfdr/article/details/82984114">MySQL InnoDB事务的隔离级别</a></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p><strong>查看隔离级别</strong></p>
<ul>
<li><p>1.查看当前会话隔离级别<br><code>select @@tx_isolation;</code></p>
</li>
<li><p>2.查看系统当前隔离级别<br><code>select @@global.tx_isolation;</code></p>
</li>
<li><p>3.设置当前会话隔离级别<br><code>set session transaction isolatin level repeatable read;</code></p>
</li>
<li><p>4.设置系统当前隔离级别<br><code>set global transaction isolation level repeatable read;</code></p>
</li>
</ul>
<blockquote>
<p>SET [GLOBAL | SESSION] TRANSACTION ISOLATION LEVEL<br>       READ UNCOMMITTED<br>     | READ COMMITTED<br>     | REPEATABLE READ<br>     | SERIALIZABLE；</p>
</blockquote>
<p>#十一、传播行为</p>
<ul>
<li>PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。</li>
<li>PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。‘</li>
<li>PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。</li>
<li>PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。</li>
<li>PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>
<li>PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</li>
<li>PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</li>
</ul>
<p><strong><code>1.PROPAGATION_REQUIRED</code></strong></p>
<blockquote>
<p>加入当前正要执行的事务不在另外一个事务里，那么就起一个新的事务<br>比如说，ServiceB.methodB的事务级别定义为PROPAGATION_REQUIRED, 那么由于执行ServiceA.methodA的时候，<br>ServiceA.methodA已经起了事务，这时调用ServiceB.methodB，ServiceB.methodB看到自己已经运行在ServiceA.methodA<br>的事务内部，就不再起新的事务。而假如ServiceA.methodA运行的时候发现自己没有在事务中，他就会为自己分配一个事务。<br>这样，在ServiceA.methodA或者在ServiceB.methodB内的任何地方出现异常，事务都会被回滚。即使ServiceB.methodB的事务已经被<br>提交，但是ServiceA.methodA在接下来fail要回滚，ServiceB.methodB也要回滚</p>
</blockquote>
<p><strong><code> 2.PROPAGATION_SUPPORTS</code></strong></p>
<blockquote>
<p>如果当前在事务中，即以事务的形式运行，如果当前不再一个事务中，那么就以非事务的形式运行</p>
</blockquote>
<p><strong><code>3.PROPAGATION_MANDATORY</code></strong></p>
<blockquote>
<p>必须在一个事务中运行。也就是说，他只能被一个父事务调用。否则，他就要抛出异常</p>
</blockquote>
<p><strong><code>4.PROPAGATION_REQUIRES_NEW</code></strong> </p>
<blockquote>
<p>这个就比较绕口了。 比如我们设计ServiceA.methodA的事务级别为PROPAGATION_REQUIRED，ServiceB.methodB的事务级别为PROPAGATION_REQUIRES_NEW，<br>那么当执行到ServiceB.methodB的时候，ServiceA.methodA所在的事务就会挂起，ServiceB.methodB会起一个新的事务，等待ServiceB.methodB的事务完成以后，<br>他才继续执行。他与PROPAGATION_REQUIRED 的事务区别在于事务的回滚程度了。因为ServiceB.methodB是新起一个事务，那么就是存在<br>两个不同的事务。如果ServiceB.methodB已经提交，那么ServiceA.methodA失败回滚，ServiceB.methodB是不会回滚的。如果ServiceB.methodB失败回滚，<br>如果他抛出的异常被ServiceA.methodA捕获，ServiceA.methodA事务仍然可能提交。</p>
</blockquote>
<p><strong><code>5.PROPAGATION_NOT_SUPPORTED</code></strong></p>
<blockquote>
<p>当前不支持事务。比如ServiceA.methodA的事务级别是PROPAGATION_REQUIRED ，而ServiceB.methodB的事务级别是PROPAGATION_NOT_SUPPORTED ，<br>那么当执行到ServiceB.methodB时，ServiceA.methodA的事务挂起，而他以非事务的状态运行完，再继续ServiceA.methodA的事务。</p>
</blockquote>
<p><strong><code> 6.PROPAGATION_NEVER</code></strong></p>
<blockquote>
<p>不能在事务中运行。假设ServiceA.methodA的事务级别是PROPAGATION_REQUIRED， 而ServiceB.methodB的事务级别是PROPAGATION_NEVER ，那么ServiceB.methodB就要抛出异常了。</p>
</blockquote>
<p><strong><code>7.PROPAGATION_NESTED</code></strong></p>
<blockquote>
<p>理解Nested的关键是savepoint。他与PROPAGATION_REQUIRES_NEW的区别是，PROPAGATION_REQUIRES_NEW另起一个事务，将会与他的父事务相互独立，而Nested的事务和他的父事务是相依的，他的提交是要等和他的父事务一块提交的。也就是说，如果父事务最后回滚，他也要回滚的。<br>而Nested事务的好处是他有一个savepoint。</p>
</blockquote>
<p>来自 <a href="https://www.cnblogs.com/523823-wu/p/8874328.html">数据库事务4种隔离级别和7种传播行为</a></p>
<h1 id="十二-、其它"><a href="#十二-、其它" class="headerlink" title="十二 、其它"></a>十二 、其它</h1><ul>
<li><p>查看帮助<br><code>help contents;</code></p>
</li>
<li><p>查看数据类型<br><code>help data types;</code></p>
</li>
<li><p>查看int类型<br><code>help int;</code></p>
</li>
<li><p>查看某个数据库某张表的相关信息(有可能第三方客户端查看不了，黑窗口命令行可以)<br><code>show table status from database_name where name=&quot;table_name&quot; \G;</code></p>
</li>
<li><p>查看表结构<br><code>show create table  table_name; </code></p>
</li>
</ul>
<p><strong>创建数据库</strong></p>
<blockquote>
<p>create database database_name;</p>
</blockquote>
<p><code>create database db1;(创建一个名为db1的数据库)</code></p>
<ul>
<li><p>展示所有数据库<br><code>show databases;</code></p>
</li>
<li><p>查看数据库版本<br><code>select version();</code></p>
</li>
<li><p>使用某个数据库<br><code>use db1;</code></p>
</li>
<li><p>删除数据库</p>
<blockquote>
<p>drop database database_name;</p>
</blockquote>
</li>
<li><p>查看表结构</p>
<blockquote>
<p>show create table  table_name;</p>
</blockquote>
</li>
</ul>
<p><strong>创建表</strong></p>
<blockquote>
<p>create table table_name(<br>属性名 数据类型,<br>属性名 数据类型,<br>……<br>)</p>
</blockquote>
<p><strong>查看表结构</strong></p>
<blockquote>
<p>DESC table_name;<br>describe table_name;<br>show create table table_name;</p>
</blockquote>
<p><strong>删除表</strong></p>
<blockquote>
<p>drop table table_name;</p>
</blockquote>
<p><strong>修改表名</strong></p>
<blockquote>
<p>alter table old_table_name rename [to] new_table_name;</p>
</blockquote>
<p><strong>增加字段</strong></p>
<blockquote>
<p>alter table table_name add 属性名 属性类型；<br>alter table table_name add 属性名 属性类型 first；(字段位置为第一)<br>alter table table_name add 属性名 属性类型 after 字段名；（在某子断后增加一个字段）</p>
</blockquote>
<p><strong>删除字段</strong></p>
<blockquote>
<p>alter table table_name drop 字段名；</p>
</blockquote>
<p><strong>修改字段数据</strong></p>
<blockquote>
<p>alter table table_name modify 字段名 字段类型；</p>
</blockquote>
<p><strong>修改字段名字</strong></p>
<blockquote>
<p>alter table table_name change 旧字段名 新字段名 旧数据类型；</p>
</blockquote>
<p><strong>同时修改字段名字和数据类型</strong></p>
<blockquote>
<p>alter table table_name change 旧字段名 新字段名 新数据类型；</p>
</blockquote>
<p><strong>修改字段顺序</strong></p>
<blockquote>
<p>alter table table_name modify 字段1 数据类型 first|after 字段2；</p>
</blockquote>
<p><strong>插入数据</strong></p>
<blockquote>
<p>insert into table_name[(fiele1,field2….)]values(“”,””,…..),(“”,””,….);</p>
</blockquote>
<p><strong>更新数据</strong></p>
<blockquote>
<p>update table_name set field1=value1,field2=value2,…. [where condition];</p>
</blockquote>
<p><strong>删除数据</strong></p>
<blockquote>
<p>delete from table_name [where condition];</p>
</blockquote>
<p><strong>单表查询</strong></p>
<blockquote>
<p>select * from table_name;(查询所有数据)<br>select fiele1,field2…. from table_name;</p>
</blockquote>
<p><strong>去除重复数据</strong>（distinct）</p>
<blockquote>
<p>select distinct fiele form table_name;</p>
</blockquote>
<p><strong>实现数学四则运算查询</strong></p>
<blockquote>
<p>select field1 [as] otherfield1,field2 [as] otherfield2….from table_name;</p>
</blockquote>
<p><strong>concat()合并字符串和数值</strong></p>
<blockquote>
<p>select concat(field1,field2…) [as] field from table_name;</p>
</blockquote>
<p><strong>条件数据查询</strong></p>
<blockquote>
<p>select * from table_name where conditioncondition:</p>
</blockquote>
<ul>
<li>1.关系运算符(&gt;,&lt;,=,&gt;=,&lt;=,&lt;&gt;|!=)，逻辑运算符(and(&amp;&amp;),or(||),xor(异或)，not(!))</li>
<li>2.带between and (在之间，是范围)关键字的条件查询</li>
<li>3.is null   is not null</li>
<li>4.in（在之内，是集合）   where name in(“abc”,null)(只查询name是abc的，name为null的不查询)   where name  not in(“abc”,null) 查不到数据</li>
<li>5.like   not like   “-“匹配单个字符  “%”匹配任意个字符</li>
</ul>
<p><strong>排序查询(order by )</strong></p>
<blockquote>
<p>select field1,field2… from table_name where condition order by field1 [ASC|DESC],field2 [ASC|DESC],</p>
</blockquote>
<p><strong>分页查询</strong></p>
<blockquote>
<p>select * from  table_name where condition limit [offset_start ,]row_count;<br>offset_start:起始偏移量，起始位置默认为0.<br>row_count：查询行数</p>
</blockquote>
<p><strong>统计函数</strong></p>
<ul>
<li>count():统计总记录数</li>
<li>avg():平均值</li>
<li>sum():求和</li>
<li>max():最大值</li>
<li>min():最小值</li>
</ul>
<p><strong>分组查询</strong><br><code>group by having</code><br><strong>全部查询结构</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT #去重 id,</span><br><span class="line">NAME </span><br><span class="line">FROM</span><br><span class="line">	tb_stu </span><br><span class="line">WHERE</span><br><span class="line">	NAME &#x3D; &quot;gg&quot; </span><br><span class="line">GROUP BY #分组 tb_stu.NAME </span><br><span class="line">HAVING</span><br><span class="line">	id &gt; 5 </span><br><span class="line">ORDER BY #排序 tb_stu.NAME ASC </span><br><span class="line">	LIMIT 0,5 #分页</span><br></pre></td></tr></table></figure>


<p><strong>连接查询与子查询比较</strong></p>
<ul>
<li>连接查询效率高，但是会导致重复数据。如果确定连接查询不会重复，那么用连接查询会比较好。</li>
<li>子查询效率低，但是可以避免重复数据。如果要到子查询，尽量使用索引提高效率。有些情况必须避免重复数据，那就只能用子查询。</li>
<li>但是具体问题还是要具体分析。如果主表很小，子表很大，并且有索引，是可以使用子查询的，如果主表很大，那就尽量避免子查询了。<br>;</li>
</ul>
<p><strong>内连接inner join on</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from a_table a inner join b_table b on a.a_id &#x3D; b.b_id;</span><br><span class="line">相同</span><br><span class="line">SELECT * FROM a_table a,b_table b WHERE a.a_id &#x3D; b.b_id;</span><br></pre></td></tr></table></figure>
<p><strong>外连接左外连接</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from a_table a left join b_table b on a.a_id &#x3D; b.b_id;</span><br></pre></td></tr></table></figure>
<p><code>left join </code>是  <code>left outer join</code>的简写，它的全称是<code>左外连接</code>，是外连接中的一种。左(外)连接，<code>左表</code>(a_table)的记录将会全部表示出来，而<code>右表</code>(b_table)只会显示<code>符合</code>搜索条件的记录。<code>右表</code>记录不足的地方均为<code>NULL</code>。</p>
<p><strong>右外连接</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from a_table a right outer join b_table b on a.a_id &#x3D; b.b_id;</span><br></pre></td></tr></table></figure>
<p><code>right join</code>是<code>right outer join</code>的简写，它的全称是<code>右外连接</code>，是外连接中的一种。<br>与左(外)连接相反，右(外)连接，<code>左表</code>(a_table)只会显示符合搜索条件的记录，而<code>右表</code>(b_table)的记录将会<code>全部</code>表示出来。<code>左表</code>记录不足的地方均为<code>NULL</code>。</p>
<p><strong>合并查询（union）(查询字段要相同)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT id,name,age FROM tb_stu UNION SELECT id,name,age FROM tb_stu2;</span><br><span class="line">#（去重，三个字段的直都相同，才是重复数据）</span><br><span class="line">SELECT id,name,age FROM tb_stu UNION ALL SELECT id,name,age FROM tb_stu2;</span><br><span class="line">#（不去重）</span><br></pre></td></tr></table></figure>

<p><strong>子查询where型子查询</strong></p>
<p>查出每个栏目最新的商品(以good_id为最大为最新商品)：<br>goods货物表，good_id表的主键,cat_id栏目的编号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select cat_id,good_id,good_name from goods where good_id in(selct max(good_id) from goods group by cat_id);</span><br></pre></td></tr></table></figure>
<p><strong>form型子查询</strong><br>查出每个栏目最新的商品(以good_id为最大为最新商品)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from (select cat_id,good_id,good_name from goods order by cat_id asc, good_id desc) as tep group by cat_id;</span><br></pre></td></tr></table></figure>
<p><strong>in子查询</strong><br>查询年龄为20岁的员工部门</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from department where did in(SELECT did from employee where age&#x3D;20);</span><br></pre></td></tr></table></figure>
<p><strong>exists子查询</strong><br>查询是否存在年龄大于21岁的员工</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from department where EXISTS (SELECT did from employee where age&gt;21);</span><br></pre></td></tr></table></figure>
<p><strong>any子查询</strong><br>查询满足条件的部门</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from department where did&gt; any (SELECT did from employee );</span><br></pre></td></tr></table></figure>
<p><strong>all子查询</strong><br>查询满足条件的部门</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from department where did&gt; all(SELECT did from employee );</span><br></pre></td></tr></table></figure>
<p><strong><code>总结： </code></strong></p>
<ul>
<li>where型子查询：指把内部查询的结果作为外层查询的比较条件。 </li>
<li>from型子查询：把内层的查询结果当成临时表，供外层sql再次查询。 </li>
<li>in子查询：内层查询语句仅返回一个数据列，这个数据列的值将供外层查询语句进行比较。 </li>
<li>exists子查询：把外层的查询结果，拿到内层，看内层是否成立，简单来说后面的返回true,外层（也就是前面的语句）才会执行，否则不执行。 </li>
<li>any子查询：只要满足内层子查询中的任意一个比较条件，就返回一个结果作为外层查询条件。 </li>
<li>all子查询：内层子查询返回的结果需同时满足所有内层查询条件。<br>比较运算符子查询：子查询中可以使用的比较运算符如 “&gt;” “&lt;” “= ” “!=”</li>
</ul>
<p>bye!  (*_*)</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql的inner-join,left-jion,right-join,cross-join以及on和where的区别</title>
    <url>/2020/07/10/mysql/mysql%E7%9A%84inner-join,left-jion,right-join,cross-join%E4%BB%A5%E5%8F%8Aon%E5%92%8Cwhere%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="建立两个模拟表student表和course表"><a href="#建立两个模拟表student表和course表" class="headerlink" title="建立两个模拟表student表和course表"></a>建立两个模拟表student表和course表</h1><p><img src="https://upload-images.jianshu.io/upload_images/19382524-573d80a1f28d2927.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="student和course表.jpg"></p>
<h1 id="1-cross-join"><a href="#1-cross-join" class="headerlink" title="1.cross join"></a>1.cross join</h1><p>A表和B表求乘积（即笛卡尔积）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student ,course ;</span><br><span class="line">等于</span><br><span class="line">select * from student  CROSS JOIN  course ;</span><br></pre></td></tr></table></figure>

<p>查询的是笛卡尔乘积student（5）Xcourse(4)=20条</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student  cross join  course on  student.id &#x3D; course.student_id;</span><br><span class="line">相同</span><br><span class="line">select * from student , course where  student.id &#x3D; course.student_id;</span><br></pre></td></tr></table></figure>
<p>查询结果是：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-1ffd152fb9907b88.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cross join on 结果集.jpg"></p>
<p>所有限制条件where是通用的<br>而on只能运用于配合各种join查询</p>
<h1 id="2-inner-join"><a href="#2-inner-join" class="headerlink" title="2. inner join"></a>2. inner join</h1><p>在没有限制条件的情况下相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student  inner join course ;</span><br><span class="line">等于</span><br><span class="line">select * from student ,course ;</span><br><span class="line">等于</span><br><span class="line">select * from student  CROSS JOIN  course ;</span><br></pre></td></tr></table></figure>
<p>都是取得20条记录</p>
<p>限制条件下与cross基本相同。<br>即</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student  cross join  course on  student.id &#x3D; course.student_id;</span><br><span class="line">相同</span><br><span class="line">select * from student , course where  student.id &#x3D; course.student_id;</span><br><span class="line">相同</span><br><span class="line">select * from student inner join course on  student.id &#x3D; course.student_id;</span><br></pre></td></tr></table></figure>
<h1 id="3-left-join"><a href="#3-left-join" class="headerlink" title="3. left join"></a>3. left join</h1><p>以左表为主，右表不符合条件的补null</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student left join course on  student.id &#x3D; course.student_id;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src="https://upload-images.jianshu.io/upload_images/19382524-9180428879a2057b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="left join.jpg"></p>
<h1 id="4-left-join"><a href="#4-left-join" class="headerlink" title="4 left join"></a>4 left join</h1><p>以右表为主，左表不符合条件的补null</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student right join course on  student.id &#x3D; course.student_id;</span><br></pre></td></tr></table></figure>
<p>结果：<br><img src="https://upload-images.jianshu.io/upload_images/19382524-e3f431571625ad01.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="right join.jpg"></p>
<p>左连接可以转成右连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student left join course on  student.id &#x3D; course.student_id;</span><br><span class="line">相同</span><br><span class="line">select * from  course right join student on  student.id &#x3D; course.student_id;</span><br></pre></td></tr></table></figure>

<h1 id="5-on和where"><a href="#5-on和where" class="headerlink" title="5 on和where"></a>5 on和where</h1><p>on只能和各种连接联合使用select中<br>where可以用在各种语句上select 、insert、update、delete …..</p>
<p><strong>注意</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student left join course  on 1&#x3D;1 where  student.id &#x3D; course.student_id;</span><br><span class="line">相同</span><br><span class="line">select * from student , course  where  student.id &#x3D; course.student_id;</span><br></pre></td></tr></table></figure>
<p>加上where条件后则不是以左表为主了！</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql事务</title>
    <url>/2020/07/13/mysql/mysql%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>MySQL 事务</strong><br>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p>
<ul>
<li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li>
<li>事务用来管理 insert,update,delete 语句</li>
</ul>
<p>一般来说，事务是必须满足4个条件（ACID）：<code>原子性（Atomicity，或称不可分割性）</code>、<code>一致性（Consistency）</code>、<code>隔离性（Isolation，又称独立性）</code>、<code>持久性（Durability）</code>。</p>
<ul>
<li><p>原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
</li>
<li><p>一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p>
</li>
<li><p>隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p>
</li>
<li><p>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
</li>
</ul>
<blockquote>
<p>在 mysql 命令行的默认设置下，事务都是自动提交的，即执行 sql 语句后就会马上执行 commit 操作。因此要显式地开启一个事务务须使用命令 begin 或 start transaction，或者执行命令 set autocommit=0，用来禁止使用当前会话的自动提交。</p>
</blockquote>
<p><strong>事务控制语句：</strong></p>
<ul>
<li><p>begin 或 start transaction 显式地开启一个事务；</p>
</li>
<li><p>commit 也可以使用 commit work，不过二者是等价的。commit 会提交事务，并使已对数据库进行的所有修改成为永久性的；</p>
</li>
<li><p>rollback 也可以使用 rollback work，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</p>
</li>
<li><p>savepoint identifier，savepoint 允许在事务中创建一个保存点，一个事务中可以有多个 savepoint；</p>
</li>
<li><p>release savepoint identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</p>
</li>
<li><p>rollback to identifier 把事务回滚到标记点；</p>
</li>
<li><p>set transaction 用来设置事务的隔离级别。innodb 存储引擎提供事务的隔离级别有read uncommitted、read committed、repeatable read 和 serializable。</p>
</li>
<li><p>show variables like ‘t_isolation’查询事务的隔离级别</p>
</li>
<li><p>set session transaction isolation level 级别名设置事务隔离级别</p>
</li>
</ul>
<blockquote>
<p>savepoint 是在数据库事务处理中实现“子事务”（subtransaction），也称为嵌套事务的方法。事务可以回滚到 savepoint 而不影响 savepoint 创建前的变化, 不需要放弃整个事务。<br>rollback 回滚的用法可以设置保留点 savepoint，执行多条操作时，回滚到想要的那条语句之前。</p>
</blockquote>
<blockquote>
<p>使用 savepoint<br>savepoint savepoint_name;    // 声明一个 savepoint<br>rollback to savepoint_name;  // 回滚到savepoint</p>
</blockquote>
<blockquote>
<p>删除 savepoint<br>保留点再事务处理完成（执行一条 rollback 或 commit）后自动释放。<br>mysql5 以来，可以用:<br>release savepoint savepoint_name;  // 删除指定保留点</p>
</blockquote>
<p><strong>MYSQL 事务处理主要有两种方法：</strong></p>
<ol>
<li>用 begin, rollback, commit来实现<br>begin 开始一个事务<br>rollback 事务回滚<br>commit 事务确认</li>
<li>直接用 set 来改变 mysql 的自动提交模式:<br>set autocommit=0 禁止自动提交<br>set autocommit=1 开启自动提交</li>
</ol>
<p><strong>脏读、不可重复读、幻读、第一类丢失更新、第二类丢失更新</strong></p>
<ul>
<li><p>脏读<br>事务A读到（就是select语句）事务B 尚未提交的修改（insert、delete、update）。脏读的后果：事务A读到事务B做的修改，如果事务B发生事务回滚，则事务A读取到的就是垃圾数据。（注：脏读的后果很严重）<br>e.g.</p>
<pre><code>  1.Mary的原工资为1000, 财务人员将Mary的工资改为了8000(但未提交事务)
  2.Mary读取自己的工资 ,发现自己的工资变为了8000，欢天喜地！
  3.而财务发现操作有误，回滚了事务,Mary的工资又变为了1000
    像这样,Mary记取的工资数8000是一个脏数据。</code></pre>
</li>
<li><p>不可重复读<br>同一个事务再次读取数据时，与之前读取到的数据不一致。（注：如果允许不重复读，则读取到的数据是不确定的。）<br>e.g.<br>  1.在事务1中，Mary 读取了自己的工资为1000,操作并没有完成<br>  2.在事务2中，这时财务人员修改了Mary的工资为2000,并提交了事务.<br>  3.在事务1中，Mary 再次读取自己的工资时，工资变为了2000</p>
<p>解决办法：如果只有在修改事务完全提交之后才可以读取数据，则可以避免该问题。</p>
</li>
<li><p>虚读（幻读）<br>事务A读取到where子句指定的数据，事务B加入了一行与事务A的where条件一样的数据。然后事务A再次使用相同的查询条件读取，此时事务A看到的可能就是事务B所添加的。<br>e.g.<br> 目前工资为1000的员工有10人。<br> 1.事务1,读取所有工资为1000的员工。<br> 2.这时事务2向employee表插入了一条员工记录，工资也为1000<br> 3.事务1再次读取所有工资为1000的员工 共读取到了11条记录， </p>
<p>解决办法：如果在操作事务完成数据处理之前，任何其他事务都不可以添加新数据，则可避免该问题</p>
</li>
<li><p>第一类丢失更新<br>撤销一个事务时, 把其他事务已经提交的更新数据覆盖(此情况在事务中不可能出现, 因为一个事务中修改时此记录已加锁, 必须等待此事务完成后另一个事务才可以继续UPDATE)</p>
</li>
<li><p>第二类丢失更新<br>这是不可重复读中的特例, 一个事务覆盖另一个事务已提交的更新数据</p>
</li>
</ul>
<blockquote>
<p>不可重复读的重点是修改 :<br>同样的条件, 你读取过的数据,再次读取出来发现值不一样了<br> 幻读的重点在于新增或者删除<br>同样的条件, 第 1 次和第 2 次读出来的记录数不一样</p>
</blockquote>
<p>在一个程序中，依据事务的隔离级别将会有三种情况发生。
　　</p>
<ul>
<li><p>脏读：一个事务会读进还没有被另一个事务提交的数据，所以你会看到一些最后被另一个事务回滚掉的数据。</p>
</li>
<li><p>不可重复读：一个事务读进一条记录，另一个事务更改了这条记录并提交完毕，这时候第一个事务再次读这条记录时，它已经改变了。</p>
</li>
<li><p>幻读：一个事务用Where子句来检索一个表的数据，另一个事务插入一条新的记录，并且符合Where条件，这样，第一个事务用同一个where条件来检索数据后，就会多出一条记录。</p>
</li>
</ul>
<p><strong>数据库提供了四种隔离级别</strong><br>因此数据库提供了四种隔离级别来解决上面的问题， 不同的隔离级别采用不同的锁类开来实现. </p>
<ul>
<li><p>1.读未提交（read uncommitted  最低级别）<br>读取尚未提交的数据，哪一个问题都不能解决。</p>
</li>
<li><p>2.读已提交（read committed）<br>读取已经提交的数据，可以解决脏读。（oracle、sql Server默认）</p>
</li>
<li><p>3.可重复读（repeatable read）<br>可以解决脏读和不重复读取。（mysql默认）</p>
</li>
<li><p>4.串行化（serializable 最高级别）<br>可以解决脏读、不重复读、虚读。（相当于锁表）</p>
</li>
</ul>
<blockquote>
<p>事务的隔离级别越高，隔离性越强，所拥有的问题越少，并发能力越弱，所以，我们可以用如下表格进行总结</p>
</blockquote>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th align="center">脏读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read uncommitted (未提交读)</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td>Read committed (已提交读)</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td>Repeatable read(可重复读)</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
</tr>
<tr>
<td>Serializable(可串行化)</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
</tbody></table>
<p>参考<br><a href="https://www.runoob.com/mysql/mysql-transaction.html">MySQL 事务</a><br><a href="https://blog.csdn.net/owen_l_y/article/details/85945816">MySQL事务</a><br><a href="https://www.iteye.com/blog/uule-1109647">脏读、幻读和不可重复读 + 事务隔离级别</a><br><a href="http://www.zsythink.net/archives/1216">mysql/mariadb知识点总结（20）：事务控制语句 (事务总结之二)</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>sql常用函数</title>
    <url>/2020/07/19/mysql/sql%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、字符函数"><a href="#一、字符函数" class="headerlink" title="一、字符函数"></a>一、字符函数</h1><ol>
<li>LENGTH </li>
</ol>
<p>#获取参数值的字节个数</p>
<p>SELECT LENGTH (‘lala’) ;</p>
<p>结果： 4</p>
<ol start="2">
<li>CONCAT </li>
</ol>
<p>#拼接字符串</p>
<p>SELECT CONCAT (‘asd’ , ‘we’ );</p>
<p>结果： asdwe</p>
<ol start="3">
<li>UPPER</li>
</ol>
<p>#将参数全部变为大写</p>
<p>SELECT UPPER(‘ abcd’ );</p>
<p>结果:   ABCD</p>
<ol start="3">
<li>LOWER</li>
</ol>
<h1 id="将参数全部变为小写"><a href="#将参数全部变为小写" class="headerlink" title="将参数全部变为小写"></a>将参数全部变为小写</h1><p>SELECT LOWER(‘ ABCD’ );</p>
<p>结果:   abcd</p>
<ol start="4">
<li>SUBSTR</li>
</ol>
<p>#索引从1开始，返回指定位置及其之后的字符串</p>
<p>SELECT SUBSTR( ‘ ABCD’ , 2 ); </p>
<p>结果：BCD</p>
<p>#截取从指定索引处（第二个参数）开始，获取索引位置及其后指定字符长度的字符串（第三个参数）</p>
<p>SELECT SUBSTR( ‘ ABCD’ , 1,3 ); </p>
<p>结果：ABC</p>
<ol start="5">
<li>INSTR </li>
</ol>
<h1 id="返回第二个参数在第一个参数中第一次出现的位置，若没有出现，则返回0"><a href="#返回第二个参数在第一个参数中第一次出现的位置，若没有出现，则返回0" class="headerlink" title="返回第二个参数在第一个参数中第一次出现的位置，若没有出现，则返回0"></a>返回第二个参数在第一个参数中第一次出现的位置，若没有出现，则返回0</h1><p>SELECT INSTR(‘ABCD’ , ‘CD’)</p>
<p>结果：  3</p>
<p>SELECT INSTR(‘ABCD’ , ‘E’)</p>
<p>结果：  0</p>
<ol start="6">
<li>TRIM</li>
</ol>
<p>#去除首尾指定的字符，若没有指定，则表示去除空格</p>
<p>SELECT TRIM ( ‘#’ , ‘###acd##sas###’);</p>
<p>结果：  acd##sas</p>
<ol start="7">
<li>LPAD </li>
</ol>
<p>#用指定的字符实现左填充指定长度，同时也是结果的最终长度</p>
<p>SELECT LPAD( ‘abc’ , 4 , ‘#’’);</p>
<p>结果:  #ABC</p>
<ol start="8">
<li>RPAD </li>
</ol>
<p>#用指定的字符实现右填充指定长度，同时也是结果的最终长度</p>
<p>SELECT LPAD( ‘ABC’ , 4 , ‘#’);</p>
<p>结果:  ABC#</p>
<p>SELECT LPAD( ‘ABC’ , 2 , ‘#’);</p>
<p>结果:  AB</p>
<ol start="9">
<li>REPLACE</li>
</ol>
<p>#替换所有的指定的字符串为另一个字符串</p>
<p>SELECT REPLACE( ‘ABCBCD’ , ‘BC’ ,’#’ ); </p>
<p>结果: A##D</p>
<p>二、数学函数</p>
<ol>
<li>ROUND</li>
</ol>
<p>#四舍五入</p>
<p> SELECT ROUND(-1.55);</p>
<p>结果：  -2 </p>
<p>#保留指定小数的位数</p>
<p>SELECT ROUND (1.547,2);</p>
<p>结果：  1.54</p>
<ol start="2">
<li>CEIL </li>
</ol>
<p>#向上取整，返回大于等于该参数的最小整数</p>
<p>SELECT CEIL (-1.0002);</p>
<p>结果：  -1</p>
<ol start="3">
<li>FLOOR</li>
</ol>
<p>#向下取整，返回小于等于该参数的最大整数</p>
<p>SELECT CEIL (9.99999);</p>
<p>结果：  9</p>
<ol start="4">
<li>TRUNCATE</li>
</ol>
<p>#截断</p>
<p>SELECT TRUNCATE (1.6699,2);</p>
<p>结果:  1.66</p>
<ol start="5">
<li>MOD</li>
</ol>
<p>#取模</p>
<p>SELECT MOD(-10,-3)</p>
<p>结果:  -1</p>
<p>三、日期函数</p>
<ol>
<li>NOW</li>
</ol>
<p>#返回当前系统日期+时间</p>
<p>SELECT NOW();</p>
<ol start="2">
<li>CURDATE</li>
</ol>
<p>#返回当前系统时间，不包含时间</p>
<p>SELECT CURDATE();</p>
<ol start="3">
<li>CURTIME </li>
</ol>
<p>#返回当前时间，不包含日期</p>
<p>SELECT CURTIME();</p>
<ol start="4">
<li>MONTHNAME , DAYNAME  等</li>
</ol>
<p>#返回日期的英文名字</p>
<p>SELECT DAYNAME(NOW());</p>
<ol start="5">
<li>STR_TO_DATE</li>
</ol>
<p>#将字符串通过指定的格式转化为日期</p>
<p>SELECT STR_TO_DATE(‘4-3#1992’, ‘%m-%d#%Y’);</p>
<p>结果：1992-04-03</p>
<ol start="6">
<li>DATE_FORMAT</li>
</ol>
<p>#将日期转化为指定格式字符串</p>
<p>SELECT DATE_FORMAT(NOW(), ‘%m#%d#%Y’);</p>
<p>结果： 04#27#2019</p>
<p>三、其他函数</p>
<ol>
<li>SELECT VERSION()</li>
</ol>
<p>#获取sql的版本号</p>
<ol start="2">
<li>SELECT DATABASE()</li>
</ol>
<p>#获取当前所在数据库名</p>
<p>3)SELECT USER()</p>
<p>#获取登陆用户名</p>
<p>四、流程控制函数</p>
<ol>
<li>if</li>
</ol>
<p>#一共三个参数，若第一个参数代表的表达式值为true, 则执行第二个参数代表的表达式，否则执行第三个参数代表的表达式</p>
<p>SELECT IF (10 &gt; 5 , ‘大’ , ‘小’ )；</p>
<p>结果： 大</p>
<ol start="2">
<li>case</li>
</ol>
<p>用法一：</p>
<p>#相当于switch case</p>
<p>CASE 要判断的字段或者表达式</p>
<p>WHEN 常量1 THEN 要显示的值1或者与语句1</p>
<p>WHEN 常量2   THEN 要显示的值2或者与语句2</p>
<p>WHEN 常量3 THEN 要显示的值3或者与语句3</p>
<p>ELSE  要显示的值x或者与语句x</p>
<p>END</p>
<p>用法二：</p>
<p>#相当于多重if</p>
<p>#相当于switch case</p>
<p>CASE</p>
<p>WHEN 条件1 THEN 要显示的值1或者与语句1</p>
<p>WHEN 条件2   THEN 要显示的值2或者与语句2</p>
<p>WHEN 条件3 THEN 要显示的值3或者与语句3</p>
<p>ELSE  要显示的值x或者与语句x</p>
<p>转载自<a href="https://www.cnblogs.com/winter-bamboo/p/10779466.html">SQL常用函数</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>win10下安装多个mysql</title>
    <url>/2020/07/20/mysql/win10%E4%B8%8B%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAmysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-下载解压版mysql"><a href="#1-下载解压版mysql" class="headerlink" title="1.下载解压版mysql"></a>1.下载解压版mysql</h1><p>我用的是<code>mysql-5.7.24-winx64.zip</code></p>
<h1 id="2-解压到一个目录下"><a href="#2-解压到一个目录下" class="headerlink" title="2.解压到一个目录下"></a>2.解压到一个目录下</h1><p>我的目录如下<br><img src="https://upload-images.jianshu.io/upload_images/19382524-c8f4ab0246e8c3b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h1 id="3-在MySQL安装目录下创建-my-ini-文件"><a href="#3-在MySQL安装目录下创建-my-ini-文件" class="headerlink" title="3.在MySQL安装目录下创建  my.ini 文件"></a>3.在MySQL安装目录下创建  <code>my.ini</code> 文件</h1><p><strong>my.ini</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#skip-grant-tables</span><br><span class="line">basedir&#x3D;E:\\developer\\mysql\\mysql-5.7.24-winx64-3306\\bin</span><br><span class="line">datadir&#x3D;E:\\developer\\mysql\\mysql-5.7.24-winx64-3306\\data</span><br><span class="line">port&#x3D;3306</span><br><span class="line">server-id&#x3D;1</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">log-bin&#x3D;E:\\developer\\mysql\\mysql-5.7.24-winx64-3306\\logs\\mysql-bin</span><br><span class="line">binlog-format&#x3D;ROW</span><br><span class="line">explicit_defaults_for_timestamp&#x3D;1</span><br><span class="line">lc-messages-dir&#x3D; &quot;E:\\developer\\mysql\\mysql-5.7.24-winx64-3306\\share&quot;</span><br></pre></td></tr></table></figure>
<h1 id="4-初始化"><a href="#4-初始化" class="headerlink" title="4.初始化"></a>4.初始化</h1><p>进入bin目录下执行</p>
<blockquote>
<p>注意：一定要用管理员权限执行</p>
</blockquote>
<p><strong>执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --user&#x3D;mysql --console</span><br></pre></td></tr></table></figure>
<p>会打印出临时密码：<br><img src="https://upload-images.jianshu.io/upload_images/19382524-8768409dde3f1dc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>一会重置密码是要用到</p>
<h1 id="5-安装成自定义名称的服务"><a href="#5-安装成自定义名称的服务" class="headerlink" title="5.安装成自定义名称的服务"></a>5.安装成自定义名称的服务</h1><p>安装并创建服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld install mysql3306 --defaults-file&#x3D;&quot;E:\developer\mysql\mysql-5.7.24-winx64-3306\my.ini&quot;</span><br></pre></td></tr></table></figure>
<p>安装成功后会提示<br><img src="https://upload-images.jianshu.io/upload_images/19382524-407e191a3252a3b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>安装成功后的目录结构如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-c2a6694cf40fae05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>脚注<a href="%E6%B5%8B%E8%AF%95%E8%84%9A%E6%B3%A8">^1</a></p>
<h1 id="6-修改密码"><a href="#6-修改密码" class="headerlink" title="6.修改密码"></a>6.修改密码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动服务</span><br><span class="line">net start mysql3306</span><br><span class="line"></span><br><span class="line">mysql3307 服务正在启动 .</span><br><span class="line">mysql3307 服务已经启动成功。</span><br><span class="line"></span><br><span class="line">#登入mysql </span><br><span class="line">mysql -uroot -P3306 -pv7xMqnqlEy,x</span><br><span class="line"></span><br><span class="line">#成功登录后,修改密码</span><br><span class="line">set password &#x3D; password(&#39;d4c123456&#39;);</span><br><span class="line"></span><br><span class="line"># mysql 8.0设置密码</span><br><span class="line">alter user user() identified by &quot;d4c123456&quot;;</span><br></pre></td></tr></table></figure>

<p>#7.另一个mysql同样的操作</p>
<p>#8 navicat连接错误<br>在navicat链接mysql8以后的版本时，会出现2059的错误，<br>这个错误出现的原因是在mysql8之前的版本中加密规则为mysql_native_password，而在mysql8以后的加密规则为</p>
<p>caching_sha2_password。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h3><p><strong>在mysql的命令行里面输入</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;d4c123456&#39;;</span><br></pre></td></tr></table></figure>

<p>###授权所有的ip都能访问mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39;  IDENTIFIED BY &#39;d4c123456&#39;  WITH GRANT OPTION;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql课堂笔记</title>
    <url>/2020/07/12/mysql/mysql%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、SQL简介"><a href="#一、SQL简介" class="headerlink" title="一、SQL简介"></a>一、SQL简介</h1><p><code>Structured Query Language</code>结构化查询语言</p>
<p><code>作用：</code>是一种定义、操作、管理关系数据库的句法。</p>
<p>结构化查询语言的工业标准由ANSI(美国国家标准学会，ISO的成员之一)维护。各大数据库厂商都支持ANSI的SQL标准，但也都对SQL进行了扩展。<br>SQL：标准和扩展的东西（方言）</p>
<h1 id="二、SQL语句的组成（Structure-Query-Language）"><a href="#二、SQL语句的组成（Structure-Query-Language）" class="headerlink" title="二、SQL语句的组成（Structure Query Language）"></a>二、SQL语句的组成（Structure Query Language）</h1><ul>
<li>DQL：数据查询语言（Data Query Languagg）</li>
</ul>
<p><strong>基本结构是由SELECT子句，FROM子句和WHERE子句组成的查询块（重点！！！！！）</strong><br>具体查看 <a href="https://blog.csdn.net/weixin_44541001/article/details/86582725">sql组成语言 3 ——DQL（数据查询语言）</a></p>
<ul>
<li>DML：数据操作语言（Data Manipulation Language）</li>
</ul>
<p><strong>用于数据库表中插入，删除，修改</strong><br>具体查看 <a href="https://blog.csdn.net/weixin_44541001/article/details/86574500">sql组成语言 2 ——DML（数据操作语言）以及方法</a></p>
<ul>
<li>DDL：数据定义语言（Data Definition Language）</li>
</ul>
<p><strong>主要用于数据库,表,视图,索引,等操作</strong><br>可以理解为 数据库的增删改查以及数据库表的增删改查<br>具体查看 <a href="https://blog.csdn.net/weixin_44541001/article/details/86549500">sql组成语言 1 – DDL（数据定义语言）数据表的基本操作</a></p>
<ul>
<li>DCL：数据控制语言（Data Control Language）该部分转自博客 <a href="https://blog.csdn.net/weixin_39703170/article/details/79011704%EF%BC%89">https://blog.csdn.net/weixin_39703170/article/details/79011704</a><br>专门对数据库的权限进行设置等操作，用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等。<br>如：<ul>
<li>（1) <code>GRANT</code>：授权。</li>
<li>（2) <code>ROLLBACK [WORK] TO [SAVEPOINT]</code>：回退到某一点。<br>回滚—ROLLBACK<br>回滚命令使数据库状态回到上次最后提交的状态。其格式为：<br><code>&gt;ROLLBACK;</code></li>
<li>（3)<code> COMMIT [WORK]</code>：提交。<br>在数据库的插入、删除和修改操作时，只有当事务在提交到数据<br>库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看<br>到所做的事情，别人只有在最后提交完成后才可以看到。<br>提交数据有三种类型：显式提交、隐式提交及自动提交。下面分<br>别说明这三种类型。</li>
<li>(1) 显式提交<br>用<code>COMMIT</code>命令直接完成的提交为显式提交。其格式为：<br><code>&gt;COMMIT；</code></li>
<li>(2) 隐式提交<br>用<code>SQL</code>命令间接完成的提交为隐式提交。这些命令是：<br><code>ALTER，AUDIT，COMMENT，CONNECT，CREATE，DISCONNECT，DROP，EXIT，GRANT，NOAUDIT，QUIT，REVOKE，RENAME。</code></li>
<li>(3) 自动提交<br>若把<code>AUTOCOMMIT</code>设置为<code>ON</code>，则在插入、修改、删除语句执行后，<br>系统将自动进行提交，这就是自动提交。其格式为：<br><code>&gt;SET AUTOCOMMIT ON；</code></li>
</ul>
</li>
<li>TPL：事务处理语言  (Transaction Processing Language)</li>
</ul>
<p><strong>它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。</strong><br><strong>特点： 要么成功，要么失败</strong><br>具体查看 <a href="https://blog.csdn.net/weixin_44541001/article/details/86599597">sql组成语言 4 ——TPL（事务处理语言）</a></p>
<ul>
<li>CCL：指针控制语言</li>
</ul>
<p><strong>它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。</strong></p>
<p><code>参考</code> <a href="http://ddrv.cn/a/297127">sql语言组成部分（DDL,DML,DQL,DCL,TPL,CCL）</a></p>
<h1 id="三、常用的数据库"><a href="#三、常用的数据库" class="headerlink" title="三、常用的数据库"></a>三、常用的数据库</h1><ul>
<li>Oracle</li>
<li>DB2</li>
<li>MySQL</li>
<li>SQLServer<h1 id="四、MySQL的安装与配置"><a href="#四、MySQL的安装与配置" class="headerlink" title="四、MySQL的安装与配置"></a>四、MySQL的安装与配置</h1><code>大小问题：</code>MySQL在window系统下不区分大小写的。<br>在其他系统严格区分大小写。</li>
</ul>
<p>验证是否安装配置成功：<br><code>mysql -u root -p</code></p>
<p><code>总结：（Hibernate）</code><br> Java类和表结构对应的。<br> java对象和表中的一条记录是对应的。</p>
<h1 id="五、DDL：数据定义语言"><a href="#五、DDL：数据定义语言" class="headerlink" title="五、DDL：数据定义语言"></a>五、DDL：数据定义语言</h1><p><code>作用：</code>用于描述数据库中要存储的现实世界实体的语言。即创建数据库和表的结构。<br>常用关键字：<code>CREATE ALTER DROP TRUNCATE</code><br><strong>库操作</strong></p>
<ul>
<li>显示所有的数据库<br><code>SHOW DATABASES;</code></li>
<li>创建一个名称为mydb1的数据库。<br><code>CREATE DATABASE mydb1;</code></li>
<li>查看数据库的创建细节，可以看到使用的字符集。<br><code>SHOW CREATE DATABASE mydb1;</code></li>
<li>创建一个使用gbk字符集的mydb2数据库。<br><code>CREATE DATABASE mydb2 CHARACTER SET gbk;</code></li>
<li>创建一个使用gbk字符集，并带校对规则的mydb3数据库。<br><code>CREATE DATABASE mydb3 CHARACTER SET gbk COLLATE gbk_chinese_ci;</code></li>
<li>删除前面创建的mydb3数据库<br><code>DROP DATABASE mydb3;</code></li>
<li>查看服务器中的数据库，并把mydb2的字符集修改为utf8;<br><code>ALTER DATABASE mydb2 CHARACTER SET utf8;</code></li>
</ul>
<p><strong>表结构操作</strong></p>
<ul>
<li>显示当前的数据库<br><code>SELECT DATABASE();</code></li>
<li>选择数据库<br><code>USE mydb1;</code></li>
<li>创建一个员工表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE employee(</span><br><span class="line">		id int,</span><br><span class="line">		name varchar(100),</span><br><span class="line">		gender varchar(10),</span><br><span class="line">		birthday date,</span><br><span class="line">		entry_date date,</span><br><span class="line">		job varchar(100),</span><br><span class="line">		salary float(8,2),</span><br><span class="line">		resume text</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li>查看库中的所有表格<br><code>SHOW TABLES;</code></li>
<li>查看表的结构<br><code>DESC employee;</code></li>
<li>查看表的创建细节<br><code>SHOW CREATE TABLE employee;</code></li>
<li>在上面员工表的基本上增加一个image列。<br><code>ALTER TABLE employee ADD image blob;</code></li>
<li>修改job列，使其长度为60。<br><code>ALTER TABLE employee MODIFY job varchar(60);</code></li>
<li>删除image列。<br><code>ALTER TABLE employee DROP image;</code></li>
<li>表名改为user。<br><code>RENAME TABLE employee TO user;</code></li>
<li>修改表的字符集为utf8<br><code>ALTER TABLE user CHARACTER SET utf8;</code></li>
<li>列名name修改为username<br><code>ALTER TABLE user CHANGE name username varchar(100);</code><h1 id="六、DML：数据操作语言"><a href="#六、DML：数据操作语言" class="headerlink" title="六、DML：数据操作语言"></a>六、DML：数据操作语言</h1><code>作用：</code>用于向数据库表中插入、删除、修改数据<br><code>常用关键字：INSERT UPDATE DELETE</code></li>
</ul>
<p><code>特别注意：MySQL，字符串或日期要包含在单引号中。</code><br><code>空值：NULL</code></p>
<ul>
<li>查看表中的所有记录<br><code>SELECT * FROM user;</code></li>
<li>使用insert语句向表中插入三个员工的信息。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO user VALUES (1,&#39;zxn&#39;,&#39;female&#39;,&#39;1995-12-02&#39;,&#39;2014-09-16&#39;,&#39;CEO&#39;,100000,&#39;beauty&#39;);</span><br><span class="line">INSERT INTO user(id,username,gender,birthday,entry_date,job,salary,resume) VALUES (2,&#39;lyx&#39;,&#39;male&#39;,&#39;1945-12-02&#39;,&#39;2014-09-16&#39;,&#39;UFO&#39;,100000,&#39;beates&#39;);</span><br></pre></td></tr></table></figure></li>
<li>插入中文数据：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;character%&#39;;</span><br><span class="line">+--------------------------+-----------------------+</span><br><span class="line">| Variable_name            | Value  |+--------------------------+------------</span><br><span class="line">-----------+</span><br><span class="line">		| character_set_client     | utf8   *客户端使用的编码</span><br><span class="line">				   |</span><br><span class="line">		| character_set_connection | utf8	数据库连接时使用的编码</span><br><span class="line">				   |</span><br><span class="line">		| character_set_database   | utf8	数据库用的编码</span><br><span class="line">				   |</span><br><span class="line">		| character_set_results    | utf8	*查询结果集用的编码</span><br><span class="line">				   |</span><br><span class="line">		| character_set_server     | utf8	服务器使用的编码</span><br><span class="line">				   |</span><br><span class="line">		| character_set_system     | utf8	系统使用的编码</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>用可视化的工具是没有这个问题的。</strong><br><strong>告知服务器客户端使用的编码：</strong><br><code>SET character_set_client=gbk;</code><br><strong>告知服务器返回的结果集请使用UTF8</strong><br><code>SET character_set_results=gbk;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO user(id,username,gender,birthday,entry_date,job,salary,resume)VALUES (3,&#39;杜小文&#39;,&#39;male&#39;,&#39;1935-12-02&#39;,&#39;2014-09-16&#39;,&#39;CTO&#39;,100000,&#39;杜总&#39;);&#96;</span><br></pre></td></tr></table></figure>
<ul>
<li>将所有员工薪水修改为5000元。<br><code>UPDATE user SET salary=5000;</code></li>
<li>将姓名为’zxn’的员工薪水修改为3000元。<br><code>UPDATE user SET salary=3000 WHERE username=&#39;zxn&#39;;</code></li>
<li>将姓名为’lyx’的员工薪水修改为4000元,job改为ccc。<br><code>UPDATE user SET salary=4000,job=&#39;OOO&#39; WHERE username=&#39;lyx&#39;;</code></li>
<li>将杜小文的薪水在原有基础上增加1000元。<br><code>UPDATE user SET salary=salary+1000 WHERE username=&#39;杜小文&#39;;</code></li>
<li>删除表中名称为’zxn’的记录。<br><code>DELETE FROM user WHERE username=&#39;zxn&#39;;</code></li>
<li>删除表中所有记录。<br><code>DELETE FROM user;(一条一条的删除)</code></li>
<li>使用truncate删除表中记录<br><code>TRUNCATE TABLE user;</code></li>
</ul>
<p><strong>(摧毁整张表格，重新建立表结构)</strong></p>
<h1 id="七、DQL：数据查询语言"><a href="#七、DQL：数据查询语言" class="headerlink" title="七、DQL：数据查询语言"></a>七、DQL：数据查询语言</h1><p><code>DQL:Data Query Language</code><br><code>作用：</code>查询数据，返回结果集。<br>常用关键字：<br><code>SELECT</code></p>
<ul>
<li>查询表中所有学生的信息。<br><code>SELECT * FROM student;</code></li>
<li>查询表中所有学生的姓名和对应的英语成绩。<br><code>SELECT name,english FROM student;</code></li>
<li>过滤表中重复数据。<br><code>SELECT DISTINCT english FROM student;</code></li>
<li>在所有学生数学分数上加10分特长分。<br><code>SELECT name,math+10 FROM student;</code></li>
<li>统计每个学生的总分。<br><code>SELECT name,chinese+english+math FROM student;</code></li>
<li>使用别名表示学生分数<br><code>SELECT name AS 姓名,chinese+english+math 总分 FROM student;</code></li>
<li>查询姓名为王五的学生成绩<br><code>SELECT * FROM student WHERE name=&#39;王五&#39;;</code></li>
<li>查询英语成绩大于90分的同学<br><code>SELECT * FROM student WHERE english&gt;90;</code></li>
<li>查询总分大于200分的所有同学<br><code>SELECT * FROM student WHERE (chinese+english+math)&gt;200;</code></li>
<li>查询英语分数在 80－90之间的同学。<br><code>SELECT * FROM student WHERE english BETWEEN 80 AND 90;</code></li>
<li>查询数学分数为89,90,91的同学。<br><code>SELECT * FROM student WHERE math IN (89,90,91);</code></li>
<li>查询所有姓李的学生成绩。<br><code>SELECT * FROM student WHERE name LIKE &#39;李%&#39;;</code></li>
<li>查询数学分&gt;80，语文分&gt;80的同学。<br><code>SELECT * FROM student WHERE math&gt;80 AND chinese&gt;80;</code></li>
<li>对数学成绩排序后输出。<br><code>SELECT name,math FROM student ORDER by math;</code></li>
<li>对总分排序后输出，然后再按从高到低的顺序输出<br><code>SELECT name AS 姓名,chinese+english+math 总分 FROM student ORDER BY 总分 DESC;</code></li>
<li>对姓李的学生成绩排序输出<br><code>SELECT * FROM student WHERE name LIKE &#39;李%&#39; ORDER BY chinese;</code></li>
</ul>
<h1 id="八、数据完整性（很重要）"><a href="#八、数据完整性（很重要）" class="headerlink" title="八、数据完整性（很重要）"></a>八、数据完整性（很重要）</h1><p>数据完整性是为了保证插入到数据中的数据是正确的，它防止了用户可能的输入错误。</p>
<h2 id="1、实体-行-完整性"><a href="#1、实体-行-完整性" class="headerlink" title="1、实体(行)完整性"></a>1、实体(行)完整性</h2><p>规定表的一行（即每一条记录）在表中是唯一的实体。<br>通过定义主键约束来实现。</p>
<ul>
<li>主键：PRIMARY KEY</li>
<li>特点：不能为null，且唯一。</li>
<li>主键：</li>
<li>逻辑主键：比如ID，不代表实际的业务意义，只是用来唯一标识一条记录。（推荐）</li>
<li>业务主键：比如username作为主键。</li>
</ul>
<p><strong>方式一：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t1(</span><br><span class="line">	id int PRIMARY KEY,</span><br><span class="line">	name varchar(100)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>方式二：可以定义联合主键</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t2(</span><br><span class="line">	id int,</span><br><span class="line">	name varchar(100),</span><br><span class="line">	PRIMARY KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>方式三：（推荐）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t3(</span><br><span class="line">	id int,</span><br><span class="line">	name varchar(100)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><code>ALTER TABLE t3 ADD PRIMARY KEY (id);</code></p>
<p><code>自动增长的主键：（Oracle没有的）</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t4(</span><br><span class="line">        id int PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">	name varchar(100)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<h2 id="2、域-列-完整性"><a href="#2、域-列-完整性" class="headerlink" title="2、域(列)完整性"></a>2、域(列)完整性</h2><ul>
<li>指数据库表的列（即字段）必须符合某种特定的数据类型或约束</li>
<li>数据类型</li>
<li>长度</li>
<li>非空约束：NOT NULL</li>
<li>唯一约束：UNIQUE<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t5(</span><br><span class="line">	username varchar(100) NOT NULL UNIQUE,</span><br><span class="line">	gender varchar(100) NOT NULL,</span><br><span class="line">	phonenum varchar(100) UNIQUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="3、参照完整性（Hibernate）：多表-外键约束"><a href="#3、参照完整性（Hibernate）：多表-外键约束" class="headerlink" title="3、参照完整性（Hibernate）：多表,外键约束"></a>3、参照完整性（Hibernate）：多表,外键约束</h2></li>
</ul>
<p><strong>多表设计：</strong><br><strong>一对多：（最多，最复杂）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE customers(</span><br><span class="line">	id int,</span><br><span class="line">	name varchar(100),</span><br><span class="line">	address varchar(255),</span><br><span class="line">	PRIMARY KEY(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE orders(</span><br><span class="line">	id int PRIMARY KEY,</span><br><span class="line">	order_num varchar(100),</span><br><span class="line">	price float(8,2),</span><br><span class="line">	status int,</span><br><span class="line">	customer_id int,</span><br><span class="line">	CONSTRAINT customer_id_fk FOREIGN KEY(customer_id) REFERENCES customers(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>类和数据库表结构对应，对象和数据库表中的记录对应。</strong></p>
<p><code>类的设计有方向</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Customer&#123;</span><br><span class="line">	private int id;</span><br><span class="line">	private String name;</span><br><span class="line">	private String address;</span><br><span class="line">	private List&lt;Order&gt; orders &#x3D; new ArrayList&lt;Order&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Order&#123;</span><br><span class="line">	private int id;</span><br><span class="line">	private String orderNum;</span><br><span class="line">	private float price;</span><br><span class="line">	private int status;</span><br><span class="line">	private Customer customer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>多对多</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE teachers(</span><br><span class="line">	id int PRIMARY KEY,</span><br><span class="line">	name varchar(100),</span><br><span class="line">	salary float(8,2)</span><br><span class="line">);</span><br><span class="line">CREATE TABLE students(</span><br><span class="line">	id int PRIMARY KEY,</span><br><span class="line">	name varchar(100),</span><br><span class="line">	grade varchar(100)</span><br><span class="line">);</span><br><span class="line">CREATE TABLE teacher_student(</span><br><span class="line">	t_id int,</span><br><span class="line">	s_id int,</span><br><span class="line">	PRIMARY KEY(t_id,s_id),</span><br><span class="line">	CONSTRAINT teacher_id_fk FOREIGN KEY(t_id) REFERENCES teachers(id),</span><br><span class="line">	CONSTRAINT student_id_fk FOREIGN KEY(s_id) REFERENCES students(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>类如何设计：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Teacher&#123;&#x2F;&#x2F;多对多</span><br><span class="line">	private int id;</span><br><span class="line">	private String name;</span><br><span class="line">	private float salary;</span><br><span class="line">	private List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br><span class="line">public class Student&#123;</span><br><span class="line">	private int id;</span><br><span class="line">	private String name;</span><br><span class="line">	private String grade;</span><br><span class="line">	private List&lt;Teacher&gt; teachers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一对一省略    </p>
<h1 id="九、多表查询"><a href="#九、多表查询" class="headerlink" title="九、多表查询"></a>九、多表查询</h1><h2 id="1、链接查询：（面试几率灰常大）"><a href="#1、链接查询：（面试几率灰常大）" class="headerlink" title="1、链接查询：（面试几率灰常大）"></a>1、链接查询：（面试几率灰常大）</h2><ul>
<li>a、交叉链接：<br><code>SELECT * FROM customers,orders;</code><br>返回的是两张表记录的笛卡尔积。(隐式查询：不使用关键字)<br>或者<br><code>SELECT * FROM customers CROSS JOIN orders;</code></li>
<li>b、内连接：<br><code>SELECT * FROM customers c,orders o WHERE c.id=o.customer_id;</code><br>或者<br><code>SELECT * FROM customers c INNER JOIN orders o ON c.id=o.customer_id;</code></li>
<li>c、外连接：<br>查询所有的客户信息，同时把对应的订单查询出来。<ul>
<li>左外：返回符合链接条件的记录，同时返回左表中不满足链接条件的剩余记录<br><code>SELECT * FROM customers c LEFT OUTER JOIN orders o ON c.id=o.customer_id;</code></li>
<li>右外：<br><code>SELECT * FROM customers c RIGHT JOIN orders o ON c.id=o.customer_id;</code></li>
</ul>
</li>
</ul>
<h2 id="2、几个简单的子查询"><a href="#2、几个简单的子查询" class="headerlink" title="2、几个简单的子查询"></a>2、几个简单的子查询</h2><ul>
<li><p>嵌套查询，子查询的语句放到小括号之内。<br>ID=1的这个老师教过哪些学员(语句的查询形式：多条SQL语句)<br><code>SELECT s_id FROM teacher_student WHERE t_id=1;</code><br><code>SELECT * FROM students WHERE id IN (1,2);</code></p>
</li>
<li><p>子查询：<br><code>SELECT * FROM students WHERE id IN (SELECT s_id FROM teacher_student WHERE t_id=1);</code></p>
<h1 id="十、分组统计"><a href="#十、分组统计" class="headerlink" title="十、分组统计"></a>十、分组统计</h1></li>
<li><p>统计一个班级共有多少学生？<br><code>SELECT COUNT(*) FROM student;</code></p>
</li>
<li><p>统计数学成绩大于90的学生有多少个？<br><code>SELECT COUNT(*) FROM student WHERE math&gt;90;</code></p>
</li>
<li><p>统计总分大于250的人数有多少？<br><code>SELECT COUNT(*) FROM student WHERE (chinese+english+math)&gt;250;</code></p>
</li>
<li><p>统计一个班级数学总成绩？<br><code>SELECT SUM(math) FROM student;</code></p>
</li>
<li><p>统计一个班级语文、英语、数学各科的总成绩<br><code>SELECT SUM(chinese),SUM(english),SUM(math) FROM student;</code></p>
</li>
<li><p>统计一个班级语文、英语、数学的成绩总和<br><code>SELECT SUM(chinese+english+math) FROM student;</code></p>
</li>
<li><p>统计一个班级语文成绩平均分<br><code>SELECT SUM(chinese)/COUNT(*) FROM student;</code></p>
</li>
<li><p>求一个班级数学平均分？<br><code>SELECT AVG(math) FROM student;//不会包含为null</code></p>
</li>
<li><p>求一个班级总分平均分<br><code>SELECT AVG(chinese+english+math) FROM student;</code></p>
</li>
</ul>
<p><strong><em>注意：可以使用 ` 反引号把关键字包含起来，当做普通字符串对待。</em></strong></p>
<ul>
<li>对订单表中商品归类后，显示每一类商品的总价<br><code>SELECT product,SUM(price) FROM t_order GROUP BY product;</code></li>
<li>查询购买了几类商品，并且每类总价大于100的商品<br><code>SELECT product,SUM(price) FROM t_order GROUP BY product HAVING SUM(price)&gt;100;</code></li>
</ul>
<h1 id="十一、MySQL备份与恢复"><a href="#十一、MySQL备份与恢复" class="headerlink" title="十一、MySQL备份与恢复"></a>十一、MySQL备份与恢复</h1><p><code>备份：</code><br><code>c:/&gt;mysqldump -h localhost -u root -p mydb1&gt;d:/mydb1.sql</code></p>
<p><code>恢复：</code><br>先创建数据库名，并选择数据库</p>
<ul>
<li>方式一：<br><code>mysql&gt;SOURCE d:/mydb1.sql;</code></li>
<li>方式二：<br><code>c:/&gt;mysql -u root -p test&lt;d:/mydb1.sql</code></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>地址引用</title>
    <url>/2020/08/01/other/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#Jackson<br><a href="https://blog.csdn.net/weixin_44747933/article/details/108301626">史上最全的Jackson框架使用教程</a><br><a href="https://blog.csdn.net/u011054333/article/details/80504154">Jackson快速入门</a><br><a href="https://blog.csdn.net/sdyy321/article/details/40298081">jackson annotations注解详解</a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-cloud之feign</title>
    <url>/2020/10/03/spring-cloud/spring-cloud%E4%B9%8Bfeign/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--这个依赖 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6063</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-feign</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Spring Cloud的重试功能</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.d4c:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer1:6001/eureka/,http://peer2:6002/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的熔断功能</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/html,application/xml,application/json</span> <span class="comment"># 设置压缩的数据类型</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 设置触发压缩的大小下限</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启响应压缩</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">250</span> <span class="comment"># Ribbon的连接超时时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">1000</span> <span class="comment"># Ribbon的数据读取超时时间</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对所有操作都进行重试</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment"># 切换实例的重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 对当前实例的重试次数</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span> <span class="comment"># 设置hystrix的超时时间为6000ms</span></span><br></pre></td></tr></table></figure>

<p>#3.相关类</p>
<p>启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span><span class="comment">//或者@EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerFeignApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>FeignClient接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;account-demo&quot;,fallback = AccountClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;account/get/server/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">queryAccountById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;account/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">queryAccountByIdTwo</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FeignClient接口实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountClientFallback</span> <span class="keyword">implements</span> <span class="title">AccountClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAccountById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am fallback!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAccountByIdTwo</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am fallback two!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConsumerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountClient accountClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAccountById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        String s = accountClient.queryAccountById(id);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAccountByIdTwo</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        String s = accountClient.queryAccountByIdTwo(id);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountConsumerService accountConsumerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAccountById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountConsumerService.queryAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/two/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAccountByIdTwo</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountConsumerService.queryAccountByIdTwo(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>feign自定的日志类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogLevelConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里指定的Level级别是FULL，Feign支持4种级别：</p>
<ul>
<li><p>  NONE：不记录任何日志信息，这是默认值。</p>
</li>
<li><p>  BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</p>
</li>
<li><p>  HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</p>
</li>
<li><p>  FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>spring cloud</tag>
        <tag>feign</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-cloud之hystrix</title>
    <url>/2020/10/01/spring-cloud/spring-cloud%E4%B9%8Bhystrix/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#1.依赖引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hystrix仪表盘--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6065</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.d4c:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer1:6001/eureka/,http://peer2:6002/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Spring Cloud的重试功能</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-hystrix</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">restclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#没有这个ribbon超时配置不会生效，是</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment">#同一台实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment">#重试负载均衡其他的实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="comment">#当OkToRetryOnAllOperations设置为false时，只会对get请求进行重试。</span></span><br><span class="line">  <span class="comment">#如果设置为true，便会对所有的请求进行重试，如果是put或post等写操作，如果服务器接口没做幂等性，会产生不好的结果，所以OkToRetryOnAllOperations慎用。</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span>  <span class="comment">#是否所有操作都重试</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span> <span class="comment"># 设置hystrix的超时时间为6000ms</span></span><br></pre></td></tr></table></figure>

<h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span><span class="comment">//开启服务发现</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span><span class="comment">//开启熔断器</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span><span class="comment">//开启hystrix仪表盘</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerHystrixpplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerHystrixpplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConsumerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;fallback&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hystrixCommand</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://account-demo/account/get/&quot;</span> + id;</span><br><span class="line">        String forObject = restTemplate.getForObject(url, String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;forObject = &quot;</span> + forObject);</span><br><span class="line">        <span class="keyword">return</span> forObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fallback</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am fallback!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountConsumerService accountConsumerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;fallback/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String s = accountConsumerService.hystrixCommand(id);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>参考 <a href="https://www.cnblogs.com/cjsblog/p/7988979.html">参考Spring Cloud官方文档第13、14、15章</a></p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>spring cloud</tag>
        <tag>hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-cloud之ribbon负载均衡-自定义负载均衡配置,超时及重试</title>
    <url>/2020/10/02/spring-cloud/spring-cloud%E4%B9%8Bribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE,%E8%B6%85%E6%97%B6%E5%8F%8A%E9%87%8D%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="spring-cloud之ribbon负载均衡-自定义负载均衡配置-超时及重试"><a href="#spring-cloud之ribbon负载均衡-自定义负载均衡配置-超时及重试" class="headerlink" title="spring-cloud之ribbon负载均衡-自定义负载均衡配置,超时及重试"></a>spring-cloud之ribbon负载均衡-自定义负载均衡配置,超时及重试</h1><h1 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1.依赖导入"></a>1.依赖导入</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--version没有添加，我在父工程中添加了--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web应用导入--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--eureka中包含了ribbon,不需要单独引入依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加ribbon失败重试机制--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>#2.配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6064</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.d4c:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">zone-1:</span> <span class="string">http://peer1:6001/eureka/</span></span><br><span class="line">      <span class="attr">zone-2:</span> <span class="string">http://peer2:6002/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Spring Cloud的重试功能</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-ribbon</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">restclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#没有这个ribbon超时不会生效 ribbon. 是ribbon.http.client.enabled的替代品</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment">#同一台实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment">#重试负载均衡其他的实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="comment">#当OkToRetryOnAllOperations设置为false时，只会对get请求进行重试。</span></span><br><span class="line">  <span class="comment">#如果设置为true，便会对所有的请求进行重试，如果是put或post等写操作，</span></span><br><span class="line">  <span class="comment">#如果服务器接口没做幂等性，会产生不好的结果，所以OkToRetryOnAllOperations慎用。</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span>  <span class="comment">#是否所有操作都重试</span></span><br></pre></td></tr></table></figure>
<p>具体为什么要设置ribbon.http.client.enabled 请参考<a href="https://blog.csdn.net/hsz2568952354/article/details/89466511">Ribbon、Feign、Hystrix和Zuul超时重试设置（一）</a>，<a href="https://www.jb51.net/article/149226.htm">Spring Cloud Ribbon的踩坑记录与原理详析</a></p>
<h1 id="3-类的配置及调用方式"><a href="#3-类的配置及调用方式" class="headerlink" title="3.类的配置及调用方式"></a>3.类的配置及调用方式</h1><p><strong>启动类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerRibbonApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerRibbonApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//方式一</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    <span class="comment">/*@Bean</span></span><br><span class="line"><span class="comment">    @LoadBalanced</span></span><br><span class="line"><span class="comment">    public RestTemplate restTemplate(RestTemplateBuilder builder) &#123;</span></span><br><span class="line"><span class="comment">        return builder.build();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义负载均衡策略</span></span><br><span class="line">   <span class="comment">/*  </span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public IRule ribbonRule() &#123;</span></span><br><span class="line"><span class="comment">        return new MyRule();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>自定义负载均衡规则配置类（自定义的时候用到，默认是轮询）</strong></p>
<p>需要extends  AbstractLoadBalancerRule，下面的规则是，每个服务实例执行5次<br>参考<a href="https://blog.csdn.net/www1056481167/article/details/81151064">SpringCloud-Ribbon（自定义负载均衡算法）</a>,  <a href="http://blog.itpub.net/31558358/viewspace-2564425/">Spring Cloud：自定义 Ribbon 负载均衡策略</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line">    <span class="comment">// total = 0 // 当total==5以后，我们指针才能往下走，</span></span><br><span class="line">    <span class="comment">// index = 0 // 当前对外提供服务的服务器地址，</span></span><br><span class="line">    <span class="comment">// total需要重新置为零，但是已经达到过一个3次，我们的index = 1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> total = <span class="number">0</span>;    <span class="comment">// 总共被调用的次数，目前要求每台被调用5次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentIndex = <span class="number">0</span>; <span class="comment">// 当前提供服务的机器号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Server server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            List&lt;Server&gt; upList = lb.getReachableServers();</span><br><span class="line">            List&lt;Server&gt; allList = lb.getAllServers();</span><br><span class="line">            <span class="keyword">int</span> serverCount = allList.size();</span><br><span class="line">            <span class="keyword">if</span> (serverCount == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(total &lt; <span class="number">5</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                server = upList.get(currentIndex);</span><br><span class="line">                total++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                total = <span class="number">0</span>;</span><br><span class="line">                currentIndex++;</span><br><span class="line">                <span class="keyword">if</span>(currentIndex &gt;= upList.size())</span><br><span class="line">                &#123;</span><br><span class="line">                    currentIndex = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Thread.yield();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line">            server = <span class="keyword">null</span>;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>service</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConsumerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试负载均衡功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBalancerRun</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            ServiceInstance choose = loadBalancerClient.choose(<span class="string">&quot;account-demo&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;choose.getInstanceId()+\&quot;:\&quot;&quot;</span> + choose.getInstanceId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试重试功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">retry</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://account-demo/account/get/&quot;</span> + id;</span><br><span class="line">        String forObject = restTemplate.getForObject(url, String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;forObject = &quot;</span> + forObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountConsumerService accountConsumerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;balancer/&#123;times&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">balance</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> times)</span></span>&#123;</span><br><span class="line">        accountConsumerService.loadBalancerRun(times);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;retry/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">retry</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountConsumerService.retry(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="自定义负载均衡"><a href="#自定义负载均衡" class="headerlink" title="自定义负载均衡"></a>自定义负载均衡</h1><p><strong>方式一</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">account-demo:</span>  <span class="comment">#针对的服务名</span></span><br><span class="line">    <span class="attr">ribbon:</span></span><br><span class="line">       <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.d4c.config.MyRule</span></span><br></pre></td></tr></table></figure>
<p>上面的配置方法<code>针对account-demo</code>服务会采用MyRule的负载均衡规则。</p>
<p>同理，我想把我的MyRule<code>针对所有服务</code><br>以为下面这种配发能起作用,但实际不起作用，还是默认的轮询策略。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.d4c.config.MyRule</span></span><br></pre></td></tr></table></figure>

<p>于是从网上找来了另一种起作用的方法。</p>
<p>需要定义配置累<br>或者直接吧MyRule注入到spring（@Componnet）或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这种是针对所有服务</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRibbonConfig</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 自定义负载均衡策略</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么能全局应用，就是把这个自定义文件放到了@ComponentScan所扫描的地方</p>
<blockquote>
<p>官方文档给出警告：<br>这个自定义的类不能放在@ComponentScan所扫描的当前包以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，也就是我们达不到特殊化指定的目的了。</p>
</blockquote>
<p>如果我们把这个配置文件放到@ComponentScan扫描不到的地方，或者说扫描的时候排除这个配置类，那么能不能实现针对服务级别的配置或隔离<br>下面这种方法就是<code>针对服务的配置</code><br><strong>方式二</strong><br>1.把MyRibbonConfig 放到启动类扫描不到的地方。<br><img src="https://upload-images.jianshu.io/upload_images/19382524-d00f044a6a4335f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2.或者扫描时排除此配置类。<br>扫描排除某类的方法 <a href="https://www.cnblogs.com/wenbronk/p/6881643.html">springcloud-04-自定义ribbon的配置方式</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ribbon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.d4c.config.MyRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRibbonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//随机负载</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>配置@RibbonClient 或者@RibbonClients（这个注解放启动类上或项目能自动扫描的地方就行了）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//针对一个服务</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;account-demo&quot;, configuration = MyRule.class)</span>,</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonClientConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//针对多个服务</span></span><br><span class="line"><span class="meta">@RibbonClients(value = &#123;</span></span><br><span class="line"><span class="meta">        @RibbonClient(name = &quot;account-demo&quot;, configuration = MyRule.class),</span></span><br><span class="line"><span class="meta">        @RibbonClient(name = &quot;product-demo2&quot;, configuration = RandomRule.class)</span></span><br><span class="line"><span class="meta">&#125;,defaultConfiguration = &#123;MyRule.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonClientsConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="ribbon的超时配置"><a href="#ribbon的超时配置" class="headerlink" title="ribbon的超时配置"></a>ribbon的超时配置</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">restclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#没有这个ribbon超时不会生效 ribbon. 是ribbon.http.client.enabled的替代品</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment">#同一台实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment">#重试负载均衡其他的实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="comment">#当OkToRetryOnAllOperations设置为false时，只会对get请求进行重试。</span></span><br><span class="line">  <span class="comment">#如果设置为true，便会对所有的请求进行重试，如果是put或post等写操作，</span></span><br><span class="line">  <span class="comment">#如果服务器接口没做幂等性，会产生不好的结果，所以OkToRetryOnAllOperations慎用。</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span>  <span class="comment">#是否所有操作都重试</span></span><br></pre></td></tr></table></figure>


<h1 id="ribbon的重试"><a href="#ribbon的重试" class="headerlink" title="ribbon的重试"></a>ribbon的重试</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Spring Cloud的重试功能</span></span><br></pre></td></tr></table></figure>

<h1 id="单独使用Ribbon"><a href="#单独使用Ribbon" class="headerlink" title="单独使用Ribbon"></a>单独使用Ribbon</h1><p>因为往往Ribbon配合Eureka使用的，往往也有第三方服务没有注册到Eureka Server，但也部署了多个实例，也需要进行负载均衡，这时可以在服务消费者的配置文件中进行如下方式配置，实现负载均衡</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取消Ribbon使用Eureka</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eureka:</span></span><br><span class="line">   <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#配置Ribbon能访问 的微服务节点，多个节点用逗号隔开</span></span><br><span class="line"><span class="attr">account-demo:</span></span><br><span class="line">   <span class="attr">ribbon:</span></span><br><span class="line">      <span class="string">listOfServers:localhost:6060,localhost:6070</span></span><br></pre></td></tr></table></figure>



<p>参考 <a href="https://blog.csdn.net/wudiyong22/article/details/84937648">spring cloud各种超时时间及重试设置</a></p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>spring cloud</tag>
        <tag>ribbon</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-cloud之zuul(转载)</title>
    <url>/2020/10/04/spring-cloud/spring-cloud%E4%B9%8Bzuul(%E8%BD%AC%E8%BD%BD)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Zuul网关"><a href="#1-Zuul网关" class="headerlink" title="1.Zuul网关"></a>1.Zuul网关</h1><p>通过前面的学习，使用Spring Cloud实现微服务的架构基本成型，大致是这样的：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-9302ac23b9f88e21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1525674644660.png"></p>
<p>我们使用Spring Cloud Netflix中的Eureka实现了服务注册中心以及服务注册与发现；而服务间通过Ribbon或Feign实现服务的消费以及均衡负载；通过Spring Cloud Config实现了应用多环境的外部化配置以及版本管理。为了使得服务集群更为健壮，使用Hystrix的融断机制来避免在微服务架构中个别服务出现异常时引起的故障蔓延。</p>
<p>在该架构中，我们的服务集群包含：内部服务Service A和Service B，他们都会注册与订阅服务至Eureka Server，而Open Service是一个对外的服务，通过均衡负载公开至服务调用方。我们把焦点聚集在对外服务这块，直接暴露我们的服务地址，这样的实现是否合理，或者是否有更好的实现方式呢？</p>
<p>先来说说这样架构需要做的一些事儿以及存在的不足：</p>
<ul>
<li>首先，破坏了服务无状态特点。<ul>
<li>为了保证对外服务的安全性，我们需要实现对服务访问的权限控制，而开放服务的权限控制机制将会贯穿并污染整个开放服务的业务逻辑，这会带来的最直接问题是，破坏了服务集群中REST API无状态的特点。</li>
<li> 从具体开发和测试的角度来说，在工作中除了要考虑实际的业务逻辑之外，还需要额外考虑对接口访问的控制处理。</li>
</ul>
</li>
<li>其次，无法直接复用既有接口。<ul>
<li>当我们需要对一个即有的集群内访问接口，实现外部服务访问时，我们不得不通过在原有接口上增加校验逻辑，或增加一个代理调用来实现权限控制，无法直接复用原有的接口。</li>
</ul>
</li>
</ul>
<p>面对类似上面的问题，我们要如何解决呢？答案是：服务网关！</p>
<p>为了解决上面这些问题，我们需要将权限控制这样的东西从我们的服务单元中抽离出去，而最适合这些逻辑的地方就是处于对外访问最前端的地方，我们需要一个更强大一些的均衡负载器的 服务网关。</p>
<p>服务网关是微服务架构中一个不可或缺的部分。通过服务网关统一向外系统提供REST API的过程中，除了具备服务路由、均衡负载功能之外，它还具备了<code>权限控制</code>等功能。Spring Cloud Netflix中的Zuul就担任了这样的一个角色，为微服务架构提供了前门保护的作用，同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的可复用性和可测试性。</p>
<h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1.简介"></a>1.1.简介</h2><p>官网：<a href="https://github.com/Netflix/zuul">https://github.com/Netflix/zuul</a><br><img src="https://upload-images.jianshu.io/upload_images/19382524-6cb6e13212fc7da2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1525675168152.png"></p>
<h2 id="1-2-Zuul加入后的架构"><a href="#1-2-Zuul加入后的架构" class="headerlink" title="1.2.Zuul加入后的架构"></a>1.2.Zuul加入后的架构</h2><p><img src="https://upload-images.jianshu.io/upload_images/19382524-bc2a7ffc211ec593.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1525675648881.png"></p>
<ul>
<li>不管是来自于客户端（PC或移动端）的请求，还是服务内部调用。一切对服务的请求都会经过Zuul这个网关，然后再由网关来实现 鉴权、动态路由等等操作。Zuul就是我们服务的统一入口。</li>
</ul>
<h2 id="1-3-快速入门"><a href="#1-3-快速入门" class="headerlink" title="1.3.快速入门"></a>1.3.快速入门</h2><h3 id="1-3-1-新建工程"><a href="#1-3-1-新建工程" class="headerlink" title="1.3.1.新建工程"></a>1.3.1.新建工程</h3><p>添加Zuul依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-2-编写启动类"><a href="#1-3-2-编写启动类" class="headerlink" title="1.3.2.编写启动类"></a>1.3.2.编写启动类</h3><p>通过<code>@EnableZuulProxy </code>注解开启Zuul的功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">// 开启Zuul的网关功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(ZuulDemoApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-编写配置"><a href="#1-3-3-编写配置" class="headerlink" title="1.3.3.编写配置"></a>1.3.3.编写配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6003</span><span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">zuul-demo#指定服务名</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-4-编写路由规则"><a href="#1-3-4-编写路由规则" class="headerlink" title="1.3.4.编写路由规则"></a>1.3.4.编写路由规则</h3><p>映射规则：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">account-demo:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/account-demo/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://127.0.0.1:6060#</span> <span class="string">映射路径对应的实际url地址</span></span><br></pre></td></tr></table></figure>

<p>我们将符合<code>path</code> 规则的一切请求，都代理到 <code>url</code>参数指定的地址</p>
<p>本例中，我们将 <code>/account-demo/**</code>开头的请求，代理到<a href="http://127.0.0.1:6060/">http://127.0.0.1:6060</a></p>
<h3 id="1-3-5-启动测试："><a href="#1-3-5-启动测试：" class="headerlink" title="1.3.5.启动测试："></a>1.3.5.启动测试：</h3><p>访问的路径中需要加上配置规则的映射路径，我们访问：<a href="http://127.0.0.1:6003/account-demo/account/get/2">http://127.0.0.1:6003/account-demo/account/get/2</a></p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-6f517100c20eac9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="1-4-面向服务的路由"><a href="#1-4-面向服务的路由" class="headerlink" title="1.4.面向服务的路由"></a>1.4.面向服务的路由</h2><p>在刚才的路由规则中，我们把路径对应的服务地址写死了！如果同一服务有多个实例的话，这样做显然就不合理了。</p>
<p>我们应该根据服务的名称，去Eureka注册中心查找 服务对应的所有实例列表，然后进行动态路由才对！</p>
<h3 id="1-4-1-添加Eureka客户端依赖"><a href="#1-4-1-添加Eureka客户端依赖" class="headerlink" title="1.4.1.添加Eureka客户端依赖"></a>1.4.1.添加Eureka客户端依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-4-2-开启Eureka客户端发现功能"><a href="#1-4-2-开启Eureka客户端发现功能" class="headerlink" title="1.4.2.开启Eureka客户端发现功能"></a>1.4.2.开启Eureka客户端发现功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">// 开启Zuul的网关功能</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(ZuulDemoApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-3-添加Eureka配置，获取服务信息"><a href="#1-4-3-添加Eureka配置，获取服务信息" class="headerlink" title="1.4.3.添加Eureka配置，获取服务信息"></a>1.4.3.添加Eureka配置，获取服务信息</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span> <span class="comment"># 获取服务列表的周期：5s</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:6001/eureka/,http://127.0.0.1:6002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-4-修改映射配置，通过服务名称获取"><a href="#1-4-4-修改映射配置，通过服务名称获取" class="headerlink" title="1.4.4.修改映射配置，通过服务名称获取"></a>1.4.4.修改映射配置，通过服务名称获取</h3><p>因为已经有了Eureka客户端，我们可以从Eureka获取服务的地址信息，因此映射时无需指定IP地址，而是通过服务名称来访问，而且Zuul已经集成了Ribbon的负载均衡功能。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">account-demo:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/account-demo/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">account-demo</span> <span class="comment"># 指定服务名称</span></span><br></pre></td></tr></table></figure>


<h2 id="1-5-简化的路由配置"><a href="#1-5-简化的路由配置" class="headerlink" title="1.5.简化的路由配置"></a>1.5.简化的路由配置</h2><p>在刚才的配置中，我们的规则是这样的：</p>
<ul>
<li><code>zuul.routes.&lt;route&gt;.path=/xxx/**</code>： 来指定映射路径。<code>&lt;route&gt;</code>是自定义的路由名</li>
<li><code>zuul.routes.&lt;route&gt;.serviceId=/account-demo</code>：来指定服务名。</li>
</ul>
<p>而大多数情况下，我们的<code>&lt;route&gt;</code>路由名称往往和 服务名会写成一样的。因此Zuul就提供了一种简化的配置语法：<code>zuul.routes.&lt;serviceId&gt;=&lt;path&gt;</code></p>
<p>比方说上面我们关于account-demo的配置可以简化为一条：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">account-demo:</span> <span class="string">/account-demo/**</span> <span class="comment"># 这里是映射路径</span></span><br></pre></td></tr></table></figure>

<p>省去了对服务名称的配置。</p>
<h2 id="1-6-默认的路由规则"><a href="#1-6-默认的路由规则" class="headerlink" title="1.6.默认的路由规则"></a>1.6.默认的路由规则</h2><p>在使用Zuul的过程中，上面讲述的规则已经大大的简化了配置项。但是当服务较多时，配置也是比较繁琐的。因此Zuul就指定了默认的路由规则：</p>
<ul>
<li>默认情况下，一切服务的映射路径就是服务名本身。<ul>
<li>例如服务名为：<code>account-demo</code>，则默认的映射路径就是：<code>/account-demo/**</code></li>
</ul>
</li>
</ul>
<p>也就是说，刚才的映射规则我们完全不配置也是OK的，不信就试试看。</p>
<h2 id="1-7-路由前缀"><a href="#1-7-路由前缀" class="headerlink" title="1.7.路由前缀"></a>1.7.路由前缀</h2><p>配置示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 添加路由前缀</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">      <span class="attr">account-demo:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/account-demo/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">account-demo</span> <span class="comment"># 指定服务名称</span></span><br></pre></td></tr></table></figure>

<p>我们通过<code>zuul.prefix=/api</code>来指定了路由的前缀，这样在发起请求时，路径就要以/api开头。</p>
<p>路径<code>/api/account-demo/account/get/1</code>将会被代理到<code>account-demo/account/get/1</code></p>
<h2 id="1-8-过滤器"><a href="#1-8-过滤器" class="headerlink" title="1.8.过滤器"></a>1.8.过滤器</h2><p>Zuul作为网关的其中一个重要功能，就是实现请求的鉴权。而这个动作我们往往是通过Zuul提供的过滤器来实现的。</p>
<h3 id="1-8-1-ZuulFilter"><a href="#1-8-1-ZuulFilter" class="headerlink" title="1.8.1.ZuulFilter"></a>1.8.1.ZuulFilter</h3><p>ZuulFilter是过滤器的顶级父类。在这里我们看一下其中定义的4个最重要的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ZuulFilter implements IZuulFilter&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span></span>;<span class="comment">// 来自IZuulFilter</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException</span>;<span class="comment">// IZuulFilter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>shouldFilter</code>：返回一个<code>Boolean</code>值，判断该过滤器是否需要执行。返回true执行，返回false不执行。</li>
<li><code>run</code>：过滤器的具体业务逻辑。</li>
<li><code>filterType</code>：返回字符串，代表过滤器的类型。包含以下4种：<ul>
<li><code>pre</code>：请求在被路由之前执行</li>
<li><code>routing</code>：在路由请求时调用</li>
<li><code>post</code>：在routing和errror过滤器之后调用</li>
<li><code>error</code>：处理请求时发生错误调用</li>
</ul>
</li>
<li><code>filterOrder</code>：通过返回的int值来定义过滤器的执行顺序，数字越小优先级越高。</li>
</ul>
<h3 id="1-8-2-过滤器执行生命周期："><a href="#1-8-2-过滤器执行生命周期：" class="headerlink" title="1.8.2.过滤器执行生命周期："></a>1.8.2.过滤器执行生命周期：</h3><p>这张是Zuul官网提供的请求生命周期图，清晰的表现了一个请求在各个过滤器的执行顺序。</p>
<p>​    <img src="https://upload-images.jianshu.io/upload_images/19382524-952a99b049cfd419.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ul>
<li>正常流程：<ul>
<li>请求到达首先会经过pre类型过滤器，而后到达routing类型，进行路由，请求就到达真正的服务提供者，执行请求，返回结果后，会到达post过滤器。而后返回响应。</li>
</ul>
</li>
<li>异常流程：<ul>
<li>整个过程中，pre或者routing过滤器出现异常，都会直接进入error过滤器，再error处理完毕后，会将请求交给POST过滤器，最后返回给用户。</li>
<li>如果是error过滤器自己出现异常，最终也会进入POST过滤器，而后返回。</li>
<li>如果是POST过滤器出现异常，会跳转到error过滤器，但是与pre和routing不同的时，请求不会再到达POST过滤器了。</li>
</ul>
</li>
</ul>
<p>所有内置过滤器列表：</p>
<p>​<img src="https://upload-images.jianshu.io/upload_images/19382524-0cf6f4ff7ec23fcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h3 id="1-8-3-使用场景"><a href="#1-8-3-使用场景" class="headerlink" title="1.8.3.使用场景"></a>1.8.3.使用场景</h3><p>场景非常多：</p>
<ul>
<li>请求鉴权：一般放在pre类型，如果发现没有访问权限，直接就拦截了</li>
<li>异常处理：一般会在error类型和post类型过滤器中结合来处理。</li>
<li>服务调用时长统计：pre和post结合使用。</li>
</ul>
<h2 id="1-9-自定义过滤器"><a href="#1-9-自定义过滤器" class="headerlink" title="1.9.自定义过滤器"></a>1.9.自定义过滤器</h2><p>接下来我们来自定义一个过滤器，模拟一个登录的校验。基本逻辑：如果请求中有access-token参数，则认为请求有效，放行。</p>
<h3 id="1-9-1-定义过滤器类"><a href="#1-9-1-定义过滤器类" class="headerlink" title="1.9.1.定义过滤器类"></a>1.9.1.定义过滤器类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 登录校验，肯定是在前置拦截</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 顺序设置为1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回true，代表过滤器生效。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">// 登录校验逻辑。</span></span><br><span class="line">        <span class="comment">// 1）获取Zuul提供的请求上下文对象</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 2) 从上下文中获取request对象</span></span><br><span class="line">        HttpServletRequest req = ctx.getRequest();</span><br><span class="line">        <span class="comment">// 3) 从请求中获取token</span></span><br><span class="line">        String token = req.getParameter(<span class="string">&quot;access-token&quot;</span>);</span><br><span class="line">        <span class="comment">// 4) 判断</span></span><br><span class="line">        <span class="keyword">if</span>(token == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(token.trim()))&#123;</span><br><span class="line">            <span class="comment">// 没有token，登录校验失败，拦截</span></span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 返回401状态码。也可以考虑重定向到登录页。</span></span><br><span class="line">            ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验通过，可以考虑把用户信息放入上下文，继续向后执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="1-9-2-测试"><a href="#1-9-2-测试" class="headerlink" title="1.9.2.测试"></a>1.9.2.测试</h3><p>没有token参数时，访问失败：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-5f41f7aae46443ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>添加token参数后：</p>
<p>​    <img src="https://upload-images.jianshu.io/upload_images/19382524-176b9e76577c67ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="1-10-负载均衡和熔断"><a href="#1-10-负载均衡和熔断" class="headerlink" title="1.10.负载均衡和熔断"></a>1.10.负载均衡和熔断</h2><p>Zuul中默认就已经集成了Ribbon负载均衡和Hystix熔断机制。但是所有的超时策略都是走的默认值，比如熔断超时时间只有1S，很容易就触发了。因此建议我们手动进行配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">retryable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">250</span> <span class="comment"># 连接超时时间(ms)</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># 通信超时时间(ms)</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对所有操作重试</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span> <span class="comment"># 同一服务不同实例的重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 同一实例的重试次数</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">  	<span class="attr">default:</span></span><br><span class="line">        <span class="attr">execution:</span></span><br><span class="line">          <span class="attr">isolation:</span></span><br><span class="line">            <span class="attr">thread:</span></span><br><span class="line">              <span class="attr">timeoutInMillisecond:</span> <span class="number">6000</span> <span class="comment"># 熔断超时时长：6000ms</span></span><br></pre></td></tr></table></figure>

<h2 id="1-11完整配置"><a href="#1-11完整配置" class="headerlink" title="1.11完整配置"></a>1.11完整配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zuul-demo</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6003</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.d4c:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span> <span class="comment"># 获取服务列表的周期：5s</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer1:6001/eureka/,http://peer2:6002/eureka/</span></span><br><span class="line"><span class="comment">#zuul:</span></span><br><span class="line"><span class="comment">#  routes:</span></span><br><span class="line"><span class="comment">#    account-demo: # 这里是路由id，随意写</span></span><br><span class="line"><span class="comment">#      path: /account-demo/** # 这里是映射路径</span></span><br><span class="line"><span class="comment">#      url: http://127.0.0.1:6060 # 映射路径对应的实际url地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#zuul:</span></span><br><span class="line"><span class="comment">#  routes:</span></span><br><span class="line"><span class="comment">#    account-demo: # 这里是路由id，随意写</span></span><br><span class="line"><span class="comment">#      path: /account-demo/** # 这里是映射路径</span></span><br><span class="line"><span class="comment">#      serviceId: account-demo # 指定服务名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#zuul:</span></span><br><span class="line"><span class="comment">#  routes:</span></span><br><span class="line"><span class="comment">#    account-demo: /account-demo/** # 这里是映射路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#zuul:</span></span><br><span class="line"><span class="comment">#  prefix: /api # 添加路由前缀</span></span><br><span class="line"><span class="comment">#  routes:</span></span><br><span class="line"><span class="comment">#    account-demo: # 这里是路由id，随意写</span></span><br><span class="line"><span class="comment">#      path: /account-demo/** # 这里是映射路径</span></span><br><span class="line"><span class="comment">#      service-id: account-demo # 指定服务名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 添加路由前缀</span></span><br><span class="line">  <span class="attr">retryable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">250</span> <span class="comment"># 连接超时时间(ms)</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># 通信超时时间(ms)</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对所有操作重试</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span> <span class="comment"># 同一服务不同实例的重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 同一实例的重试次数</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMillisecond:</span> <span class="number">6000</span> <span class="comment"># 熔断超时时长：6000ms</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>spring cloud</tag>
        <tag>zuul</tag>
      </tags>
  </entry>
  <entry>
    <title>CommandLineRunner和ApplicationRunner用法</title>
    <url>/2020/08/12/spring-boot/CommandLineRunner,ApplicationRunner/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>业务场景:</strong><br>应用服务启动时，加载一些数据和执行一些应用的初始化动作。如：删除临时文件，清除缓存信息，读取配置文件信息，数据库连接等。<br>SpringBoot提供了CommandLineRunner和ApplicationRunner接口。当接口有多个实现类时，提供了@order注解实现自定义执行顺序，也可以实现Ordered接口来自定义顺序。<br>注意：数字越小，优先级越高，也就是@Order(1)注解的类会在@Order(2)注解的类之前执行。<br><strong>两者的区别在于：</strong><br>ApplicationRunner中run方法的参数为ApplicationArguments，而CommandLineRunner接口中run方法的参数为String数组。想要更详细地获取命令行参数，那就使用ApplicationRunner接口</p>
<p><strong>ApplicationRunner</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Order(value &#x3D; 1)</span><br><span class="line">public class AgentApplicationRun2 implements ApplicationRunner &#123;</span><br><span class="line">	@Override</span><br><span class="line">	public void run(ApplicationArguments applicationArguments) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CommandLineRunner</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Order(value &#x3D; 12)</span><br><span class="line">public class AgentApplicationRun implements CommandLineRunner &#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void run(String... strings) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果用实现CommandLineRunner 但其初始化动作，不是必须完成才能运行。最好开启多线程，因为CommandLineRunner 默认是由主线程启动，若出错，其后的主线程会直接退出。<br>但CommandLineRunner 这个初始化动作一般是必须的。所以，大部分不需要新启线程。</p>
<p><strong>新启线程方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.boot.CommandLineRunner;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class MyRunner implements CommandLineRunner &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run(String... args) throws Exception &#123;</span><br><span class="line">        log.info(&quot;--------MyRunner----------&quot;);</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line">        new Thread() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                &#x2F;&#x2F;TODO</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>CommandLineRunner与@PostConstruct区别</strong></p>
<blockquote>
<p>在一个类内，如果有构造器（Constructor ），有@PostConstruct，还有@Autowired，他们的先后执行顺序为Constructor &gt;&gt; @Autowired &gt;&gt; @PostConstruct。</p>
</blockquote>
<blockquote>
<p>因为一个有声明注解的类文件（必须有声明，这样在项目初始化时候才会注入），在项目启动后，会对对象进行依赖注入，而初始化的动作会依赖于对象，所以假象上看，也类似于项目启动就会执行的操作，因此，我们也可以通过这样的形式，对数据进行初始化。</p>
</blockquote>
<blockquote>
<p>说明一下，@PostConstruct更针对性于当前类文件，而CommandLineRunner更服务于整个项目。所以在我们使用中，可根据自己的使用场景来进行选择用这两种方式来实现初始化。</p>
</blockquote>
<p><strong>引用参考</strong></p>
<p><a href="https://blog.csdn.net/weixin_38362455/article/details/83023025">spring boot：ApplicationRunner和CommandLineRunner用法区别</a><br><a href="https://blog.csdn.net/cx1110162/article/details/87866633">spring boot 启动加载 CommandLineRunner @PostConstruct</a><br><a href="https://blog.csdn.net/zwq_zwq_zwq/article/details/81059017">使用Spring Boot 的CommandLineRunner遇到的坑</a></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Boot集成mybatis-基础实现</title>
    <url>/2020/08/16/spring-boot/Spring-Boot%E9%9B%86%E6%88%90mybatis-%E5%9F%BA%E7%A1%80%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="一.环境准备"></a>一.环境准备</h1><p>我这里用的是</p>
<ul>
<li>jdk1.8 </li>
<li>IntelliJ IDEA</li>
<li>maven 3.3.9<br>上面环境安装及配置请自己百度</li>
</ul>
<h1 id="二-建库、建表"><a href="#二-建库、建表" class="headerlink" title="二 建库、建表"></a>二 建库、建表</h1><p>我用的navicat premium工具手动建的表<br><img src="https://upload-images.jianshu.io/upload_images/19382524-cc8393a88352b132.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="建表.jpg"></p>
<p>建表sql语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;t_user&#96;;</span><br><span class="line">CREATE TABLE &#96;t_user&#96;  (</span><br><span class="line">  &#96;id&#96; int(15) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT &#39;&#39;,</span><br><span class="line">  &#96;password&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT &#39;&#39;,</span><br><span class="line">  &#96;address&#96; varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT &#39;&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 7 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Compact;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="三-编写代码"><a href="#三-编写代码" class="headerlink" title="三 编写代码"></a>三 编写代码</h1><p>##1. 我的项目结构如下：<br><img src="https://upload-images.jianshu.io/upload_images/19382524-b0f89488b5abc247.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目结构.jpg"></p>
<ol start="2">
<li>lombok插件安装</li>
</ol>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-82d51c04f202ae11.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="lombok插件安装.jpg"></p>
<h2 id="3-application-yml配置文件"><a href="#3-application-yml配置文件" class="headerlink" title="3. application.yml配置文件"></a>3. application.yml配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;yourDB?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;UTC</span><br><span class="line">    username: root</span><br><span class="line">    password: XXXX</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapping&#x2F;*.xml  </span><br><span class="line">  type-aliases-package: com.zlq.demo.pojo</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com.zlq.demo: debug</span><br></pre></td></tr></table></figure>
<p>##4. maven依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.zlq.dev&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-demo-zlq&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;!--添加spring-boot-starter-parent主要是统一版本管理，通常的依赖不用鞋&lt;version&gt;&lt;&#x2F;version&gt;--&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--不用引入jdbc依赖了，此依赖默认包含spring-boot-starter-jdbc--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--web项目--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--省了写getter&#x2F;setter toString 构造函数和equals hashCode等--&gt;</span><br><span class="line">        &lt;!--idea需要装lombok插件，idea插件安装请百度--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.8&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--测试环境--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>
<p>##5. 实体类 User</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;@Data  lombok插件带的注解（不用写getter&#x2F;setter toString等）</span><br><span class="line">&#x2F;&#x2F;@NoArgsConstructor  无参构造函数</span><br><span class="line">&#x2F;&#x2F;@AllArgsConstructor </span><br><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class User implements Serializable&#123;</span><br><span class="line">    private String id;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    private String address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>##6. Dao层 User接口 UserDao</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;带上这个注解spring boot启动类上就不用带@MapperScan了</span><br><span class="line">@Mapper</span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    &#x2F;&#x2F;通过id查询用户</span><br><span class="line">    public User get(String id);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;查询所用用户</span><br><span class="line">    public List&lt;User&gt; findAll();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;修改用户信息，通过id</span><br><span class="line">    public int update(User user);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;增加用户信息</span><br><span class="line">    public int insert(User user);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;删除用户</span><br><span class="line">    public int delete(String id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##7. Service层 UserService</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDao userDao;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;通过id查询用户</span><br><span class="line">    public User get(String id) &#123;</span><br><span class="line">        return userDao.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;查询所用用户</span><br><span class="line">    public List&lt;User&gt; findAll() &#123;</span><br><span class="line">        return userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;增加用户</span><br><span class="line">    public int insert(User user) &#123;</span><br><span class="line">        return userDao.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;更新用户</span><br><span class="line">    public int update(User user) &#123;</span><br><span class="line">        return userDao.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;删除用户</span><br><span class="line">    public int delete(String id) &#123;</span><br><span class="line">        return userDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>##8. Controller层 UserController</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#123;user_id&#125;&quot;)</span><br><span class="line">    public User getUser(@PathVariable(&quot;user_id&quot;) String id)&#123;</span><br><span class="line">        return userService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping</span><br><span class="line">    public List&lt;User&gt; findAllUser()&#123;</span><br><span class="line">        return userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @PostMapping</span><br><span class="line">    public int addUser(@RequestBody User user)&#123;</span><br><span class="line">        return userService.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PutMapping</span><br><span class="line">    public int updateUser(@RequestBody User user)&#123;</span><br><span class="line">        return userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @DeleteMapping(&quot;&#123;id&#125;&quot;)</span><br><span class="line">    public int deleteUser(@PathVariable(&quot;id&quot;) String id)&#123;</span><br><span class="line">        return userService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>##9. UserMapper.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.zlq.demo.dao.UserDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;get&quot; parameterType&#x3D;&quot;string&quot; resultType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        SELECT id,name,password,address</span><br><span class="line">          FROM  t_user WHERE id&#x3D;#&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;findAll&quot; resultType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        SELECT id,name,password,address FROM  t_user</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;update id&#x3D;&quot;update&quot; parameterType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        UPDATE t_user</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;name!&#x3D; null&quot;&gt;</span><br><span class="line">                name &#x3D; #&#123;name&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;password!&#x3D; null&quot;&gt;</span><br><span class="line">                password &#x3D; #&#123;password&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;address!&#x3D; null&quot;&gt;</span><br><span class="line">                address &#x3D; #&#123;address&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;&#x2F;set&gt;</span><br><span class="line">        WHERE id &#x3D; #&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;update&gt;</span><br><span class="line">    &lt;insert id&#x3D;&quot;insert&quot; parameterType&#x3D;&quot;user&quot; useGeneratedKeys&#x3D;&quot;true&quot; keyProperty&#x3D;&quot;id&quot;&gt;</span><br><span class="line">        INSERT INTO t_user</span><br><span class="line">        &lt;trim prefix&#x3D;&quot;(&quot; suffix&#x3D;&quot;)&quot; suffixOverrides&#x3D;&quot;,&quot;&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;id !&#x3D; null and id !&#x3D; &#39;&#39;&quot;&gt;</span><br><span class="line">                id,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;name!&#x3D; null&quot;&gt;</span><br><span class="line">                name,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;password!&#x3D; null&quot;&gt;</span><br><span class="line">                password,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;address!&#x3D; null&quot;&gt;</span><br><span class="line">                address,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;&#x2F;trim&gt;</span><br><span class="line">        &lt;trim prefix&#x3D;&quot;values (&quot; suffix&#x3D;&quot;)&quot; suffixOverrides&#x3D;&quot;,&quot;&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;id !&#x3D; null and id !&#x3D; &#39;&#39;&quot;&gt;</span><br><span class="line">                #&#123;id&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;name!&#x3D; null&quot;&gt;</span><br><span class="line">                #&#123;name&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;password!&#x3D; null&quot;&gt;</span><br><span class="line">                #&#123;password&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;address!&#x3D; null&quot;&gt;</span><br><span class="line">                #&#123;address&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;&#x2F;trim&gt;</span><br><span class="line">    &lt;&#x2F;insert&gt;</span><br><span class="line">    &lt;delete id&#x3D;&quot;delete&quot; parameterType&#x3D;&quot;string&quot;&gt;</span><br><span class="line">        DELETE FROM t_user WHERE id&#x3D;#&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;delete&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>
<p>到这里基础环境和项目已经搞定。</p>
<h1 id="四-项目测试"><a href="#四-项目测试" class="headerlink" title="四 项目测试"></a>四 项目测试</h1><p>##1. 用idea自带的restful工具测试</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-099551f86ffa48e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="restful测试工具.jpg"></p>
<p>##2.增加一个用户</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-bc62e4583c01063e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加用户.jpg"></p>
<p>成功增加一条数据</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-b745616890fa37e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功执行添加一条数据.jpg"></p>
<p> 其它接口也都能运行，就不一 一测试。</p>
<p>OK！搞定手工！<br>拜拜！</p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot+actuator</title>
    <url>/2020/08/13/spring-boot/spring-boot+actuator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-创建一个spring-boot工程并添加依赖"><a href="#1-创建一个spring-boot工程并添加依赖" class="headerlink" title="1.创建一个spring boot工程并添加依赖"></a>1.创建一个spring boot工程并添加依赖</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>#2.配置文件<br><em>application.yml</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8000</span><br><span class="line">management:</span><br><span class="line">  endpoint:</span><br><span class="line">    shutdown:</span><br><span class="line">      enabled: true #shutdown默认关闭，此时打开</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: shutdown,*  # shutdown配合这个，才能在列表中出现</span><br><span class="line">      base-path: &#x2F;d4c&#x2F;actuator #命名空间</span><br></pre></td></tr></table></figure>

<p>然后启动项目,就可以访问了不配置任何的情况下<br>直接访问<a href="http://localhost:8000/actuator">http://localhost:8000/actuator</a><br>可见下列结果</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-e46fbd6b7d244b08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p>我配置了配置文件<br>所以需要访问</p>
<p><code>结果</code><br><img src="https://upload-images.jianshu.io/upload_images/19382524-f612a7ee9561985c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p><code>关闭应用</code></p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-33d3de31e8624798.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="shutdown"></p>
<p><code>注意： </code>要发送post请求才能关闭应用，get不行。</p>
<p>若想spring boot Actuator+spring boot Security请参考<br><a href="https://www.jianshu.com/p/d5943e303a1f">Spring Boot Actuator:健康检查、审计、统计和监控</a><br><a href="https://blog.csdn.net/niugang0920/article/details/79756977">24.Spring-Boot-Actuator与Spring-Security整合应用7</a></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>actuator</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot+jpa演示id的生成策略及自定义id</title>
    <url>/2020/08/15/spring-boot/spring-boot+jpa%E6%BC%94%E7%A4%BAid%E7%9A%84%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89id/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#1.spring boot+jpa项目的构建<br>请参考<a href="https://www.jianshu.com/p/b7c0115889ba">spring boot+jpa简单实现</a></p>
<h1 id="2-Id-GeneratedValue四种id生成策略"><a href="#2-Id-GeneratedValue四种id生成策略" class="headerlink" title="2.@Id+@GeneratedValue四种id生成策略"></a>2.@Id+@GeneratedValue四种id生成策略</h1><p>使用<code>GenerationType.IDENTITY</code>(mysql要设置成自增)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dancer4code.actuator.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">import org.hibernate.annotations.GenericGenerator;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@Entity</span><br><span class="line">@Table(name &#x3D; &quot;student&quot;)</span><br><span class="line">public class Student implements Serializable&#123;</span><br><span class="line">   @Id</span><br><span class="line">   @GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>JPA提供四种标准用法,由@GeneratedValue的源代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;METHOD,FIELD&#125;)    </span><br><span class="line">@Retention(RUNTIME)    </span><br><span class="line">public @interface GeneratedValue&#123;    </span><br><span class="line">    GenerationType strategy() default AUTO;    </span><br><span class="line">    String generator() default &quot;&quot;;    </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<p>其中GenerationType: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public enum GenerationType&#123;    </span><br><span class="line">    TABLE,    </span><br><span class="line">    SEQUENCE,    </span><br><span class="line">    IDENTITY,    </span><br><span class="line">    AUTO   </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>JPA提供的四种标准用法为<code>TABLE</code>,<code>SEQUENCE</code>,<code>IDENTITY</code>,<code>AUTO</code>. </p>
<ul>
<li>TABLE：使用一个特定的数据库表格来保存主键。 <br>GenerationType.TABLE：使用一个特定的数据库表格来保存主键,持久化引擎通过关系数据库的一张特定的表格来生成主键,这种策略的好处就是不依赖于外部环境和数据库的具体实现,在不同数据库间可以很容易的进行移植,但由于其不能充分利用数据库的特性,所以不会优先使用。该策略一般与另外一个注解一起使用@TableGenerator,@TableGenerator注解指定了生成主键的表(可以在实体类上指定也可以在主键字段或属性上指定),然后JPA将会根据注解内容自动生成一张表作为序列表(或使用现有的序列表)。如果不指定序列表,则会生成一张默认的序列表,表中的列名也是自动生成,数据库上会生成一张名为sequence的表(SEQ_NAME,SEQ_COUNT)。序列表一般只包含两个字段:第一个字段是该生成策略的名称,第二个字段是该关系表的最大序号,它会随着数据的插入逐渐累加。例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Id  </span><br><span class="line">@GeneratedValue(strategy &#x3D; GenerationType.TABLE, generator &#x3D; &quot;id_sequence&quot;)  </span><br><span class="line">@TableGenerator(name &#x3D; &quot;id_sequence&quot;, allocationSize &#x3D; 1, table &#x3D; &quot;sequence_table&quot;, pkColumnName &#x3D; &quot;sequence_max_id&quot;, valueColumnName &#x3D; &quot;sequence_count&quot;)  </span><br><span class="line">private int id;</span><br></pre></td></tr></table></figure></li>
<li>SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。 <br>GenerationType.SEQUENCE：在某些数据库中,不支持主键自增长,比如Oracle,其提供了一种叫做”序列(sequence)”的机制生成主键。此时,GenerationType.SEQUENCE就可以作为主键生成策略。该策略的不足之处正好与TABLE相反,由于只有部分数据库(Oracle,PostgreSQL,DB2)支持序列对象,所以该策略一般不应用于其他数据库。类似的,该策略一般与另外一个注解一起使用@SequenceGenerator,@SequenceGenerator注解指定了生成主键的序列.然后JPA会根据注解内容创建一个序列(或使用一个现有的序列)。如果不指定序列,则会自动生成一个序列SEQ_GEN_SEQUENCE。例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Id  </span><br><span class="line">@GeneratedValue(strategy &#x3D; GenerationType.SEQUENCE, generator &#x3D; &quot;id_sequence&quot;)  </span><br><span class="line">@SequenceGenerator(name &#x3D; &quot;id_sequence&quot;, initialValue &#x3D; 1, allocationSize &#x3D; 1, sequenceName &#x3D; &quot;ID_SEQUENCE&quot;)  </span><br><span class="line">private int id;</span><br></pre></td></tr></table></figure></li>
<li>IDENTITY：主键由数据库自动生成（主要是自动增长型） <br>GenerationType.IDENTITY：此种主键生成策略就是通常所说的主键自增长,数据库在插入数据时,会自动给主键赋值,比如MYSQL可以在创建表时声明”auto_increment” 来指定主键自增长。该策略在大部分数据库中都提供了支持(指定方法或关键字可能不同),但还是有少数数据库不支持,所以可移植性略差。使用自增长主键生成策略是只需要声明strategy = GenerationType.IDENTITY即可。例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Id  </span><br><span class="line">@GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)  </span><br><span class="line">private int id;</span><br></pre></td></tr></table></figure></li>
<li>AUTO：主键由程序控制。<br>GenerationType.AUTO：把主键生成策略交给持久化引擎(persistence engine),持久化引擎会根据数据库在以上三种主键生成策略中选择其中一种。此种主键生成策略比较常用,由于JPA默认的生成策略就是GenerationType.AUTO,所以使用此种策略时.可以显式的指定@GeneratedValue(strategy = GenerationType.AUTO)也可以直接@GeneratedValue。例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;如果不指定具体的生成规则，则默认为AUTO，即下列两种情况等价</span><br><span class="line">@Id  </span><br><span class="line">@GeneratedValue(strategy &#x3D; GenerationType.AUTO) </span><br><span class="line">private String id;</span><br><span class="line"></span><br><span class="line">@Id  </span><br><span class="line">private String id;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>常用数据库支持生成规则如下：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">mysql</th>
<th align="center">Oracle</th>
<th align="center">PostgreSQL</th>
</tr>
</thead>
<tbody><tr>
<td align="center">GenerationType.TABLE</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">GenerationType.AUTO</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">GenerationType.IDENTITY</td>
<td align="center">√</td>
<td align="center">x</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">GenerationType.SEQUENCE</td>
<td align="center">x</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<h1 id="3-Hibernate主键策略生成"><a href="#3-Hibernate主键策略生成" class="headerlink" title="3.Hibernate主键策略生成"></a>3.Hibernate主键策略生成</h1><p>hibernate-5.3.7.Final版本的默认工厂中有<code>14种</code>生成策略,具体可见org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public DefaultIdentifierGeneratorFactory() &#123;</span><br><span class="line">		register( &quot;uuid2&quot;, UUIDGenerator.class );</span><br><span class="line">		register( &quot;guid&quot;, GUIDGenerator.class );			&#x2F;&#x2F; can be done with UUIDGenerator + strategy</span><br><span class="line">		register( &quot;uuid&quot;, UUIDHexGenerator.class );			&#x2F;&#x2F; &quot;deprecated&quot; for new use</span><br><span class="line">		register( &quot;uuid.hex&quot;, UUIDHexGenerator.class ); 	&#x2F;&#x2F; uuid.hex is deprecated</span><br><span class="line">		register( &quot;assigned&quot;, Assigned.class );</span><br><span class="line">		register( &quot;identity&quot;, IdentityGenerator.class );</span><br><span class="line">		register( &quot;select&quot;, SelectGenerator.class );</span><br><span class="line">		register( &quot;sequence&quot;, SequenceStyleGenerator.class );</span><br><span class="line">		register( &quot;seqhilo&quot;, SequenceHiLoGenerator.class );</span><br><span class="line">		register( &quot;increment&quot;, IncrementGenerator.class );</span><br><span class="line">		register( &quot;foreign&quot;, ForeignGenerator.class );</span><br><span class="line">		register( &quot;sequence-identity&quot;, SequenceIdentityGenerator.class );</span><br><span class="line">		register( &quot;enhanced-sequence&quot;, SequenceStyleGenerator.class );</span><br><span class="line">		register( &quot;enhanced-table&quot;, TableGenerator.class );</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>对几种比较常用的类型进行说明：</p>
<ul>
<li>uuid<br>采用128位的uuid算法生成主键，uuid被编码为一个32位16进制数字的字符串。<br>当使用strategy为uuid时，使用的时hibernate自己定义的UUID生成算法，此策略已过时，其具体实现参照org.hibernate.id. UUIDHexGenerator, 生成的字符串如402880876359adeb016359ae27190000当使用strategy为uuid2时，此为此版本推荐使用的uuid生成算法，其默认采用标准的生成策略StandardRandomStrategy，实现为使用jdk自带的uuid生成方法，生成的字符串如4af17c8e-8317-43e9-aff9-12d5590a71c6<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Id</span><br><span class="line">@GeneratedValue(generator &#x3D; &quot;faceset_generator&quot;)</span><br><span class="line">@GenericGenerator(name &#x3D; &quot;faceset_generator&quot;, strategy &#x3D; &quot;uuid&quot;)</span><br></pre></td></tr></table></figure></li>
<li>assigned<br>插入主键时，由程序来指定。相当于JPA中的AUTO。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Id</span><br><span class="line">@GeneratedValue(generator &#x3D; &quot;faceset_generator&quot;)</span><br><span class="line">@GenericGenerator(name &#x3D; &quot;faceset_generator&quot;, strategy &#x3D; &quot;assigned&quot;)</span><br></pre></td></tr></table></figure></li>
<li>sequence<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Id</span><br><span class="line">@GeneratedValue(generator &#x3D; &quot;faceset_generator&quot;)  </span><br><span class="line">@GenericGenerator(name &#x3D; &quot;faceset_generator&quot;, strategy &#x3D; &quot;sequence&quot;,    parameters &#x3D; &#123; @Parameter(name &#x3D; &quot;sequence&quot;, value &#x3D; &quot;faceset_seq&quot;) &#125;) </span><br></pre></td></tr></table></figure></li>
<li>guid<br>采用数据库底层的guid算法机制，对应MYSQL的uuid()函数，SQL Server的newid()函数，ORACLE的rawtohex(sys_guid())函数等</li>
</ul>
<p>来自<a href="https://www.jianshu.com/p/ee87671a492b">SpringDataJpa-主键生成策略</a></p>
<h1 id="4-自定义主键生成策略"><a href="#4-自定义主键生成策略" class="headerlink" title="4.自定义主键生成策略"></a>4.自定义主键生成策略</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dancer4code.actuator.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">import org.hibernate.annotations.GenericGenerator;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 17:14</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@Entity</span><br><span class="line">@Table(name &#x3D; &quot;student&quot;)</span><br><span class="line"></span><br><span class="line">public class Student implements Serializable&#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GenericGenerator(name &#x3D; &quot;my_id&quot;, strategy &#x3D; &quot;com.dancer4code.actuator.utils.MyIdGenerator&quot; )</span><br><span class="line">    @GeneratedValue(generator &#x3D; &quot;my_id&quot;)</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><em>MyIdGenerator.java</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dancer4code.actuator.utils;</span><br><span class="line"></span><br><span class="line">import org.hibernate.HibernateException;</span><br><span class="line">import org.hibernate.engine.spi.SharedSessionContractImplementor;</span><br><span class="line">import org.hibernate.id.IdentifierGenerator;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 19:01</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MyIdGenerator implements IdentifierGenerator &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Serializable generate(SharedSessionContractImplementor session, Object object) throws HibernateException &#123;</span><br><span class="line">        return &quot;d4c-&quot;+UUID.randomUUID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><em>成功实现自己的id生成</em><br><img src="https://upload-images.jianshu.io/upload_images/19382524-45ae6b26ffdb8023.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p>源码见gitee中<a href="https://gitee.com/dancer4code/spring-boot-lab">spring-boot-lab</a></p>
<p>如果还不够用请参考雪花算法<br>更多其他内容请参考<a href="https://www.jianshu.com/p/9d7ebe37215e">分布式全局唯一ID生成策略</a></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>jpa</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot+jpa简单实现</title>
    <url>/2020/08/14/spring-boot/spring-boot+jpa%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#1.创建maven项目<br>不演示了，想知道更多的自己百度<br>#2.maven依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--提供很多方便的功能--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.18.8&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--jpa只要导入这个就好--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--mysql版本外在差异主要是驱动类的改变--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;8.0.16&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.2.58&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>#3.启动类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dancer4code.actuator;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 9:57</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@SpringBootApplication</span><br><span class="line">&#x2F;&#x2F;@ServletComponentScan(basePackages &#x3D; &quot;com.dancer4code.actuator.filter&quot;)</span><br><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>#4.配置文件application.yaml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8000</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: actuator-demo</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3307&#x2F;testdb?serverTimezone&#x3D;UTC&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false</span><br><span class="line">    username: root</span><br><span class="line">    password: mysqlzlq</span><br><span class="line">  jpa:</span><br><span class="line">    show-sql: true</span><br><span class="line">    open-in-view: true</span><br><span class="line">management:</span><br><span class="line">  endpoint:</span><br><span class="line">    shutdown:</span><br><span class="line">      enabled: true</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: shutdown,*</span><br><span class="line">      base-path: &#x2F;d4c&#x2F;actuator</span><br></pre></td></tr></table></figure>
<p>#5.Dao</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dancer4code.actuator.dao;</span><br><span class="line"></span><br><span class="line">import com.dancer4code.actuator.pojo.Student;</span><br><span class="line">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 17:20</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public interface StudentDao  extends JpaRepository&lt;Student,Integer&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>#6.实体类pojo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dancer4code.actuator.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">import org.hibernate.annotations.GenericGenerator;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 17:14</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@Entity</span><br><span class="line">@Table(name &#x3D; &quot;student&quot;)</span><br><span class="line">&#x2F;&#x2F;@GenericGenerator(name &#x3D; &quot;uuid2&quot;, strategy &#x3D; &quot;org.hibernate.id.UUIDGenerator&quot; )</span><br><span class="line">@GenericGenerator(name &#x3D; &quot;uuid2&quot;, strategy &#x3D; &quot;com.dancer4code.actuator.utils.MyIdGenerator&quot; )</span><br><span class="line"></span><br><span class="line">public class Student implements Serializable&#123;</span><br><span class="line">    @Id</span><br><span class="line">    &#x2F;&#x2F;@GenericGenerator(name &#x3D; &quot;idGenerator&quot;, strategy &#x3D; &quot;increment&quot;)</span><br><span class="line">    @GeneratedValue(generator &#x3D; &quot;uuid2&quot;)</span><br><span class="line">    &#x2F;&#x2F;@GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>#7.controller</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dancer4code.actuator.controller;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.dancer4code.actuator.dao.StudentDao;</span><br><span class="line">import com.dancer4code.actuator.pojo.Student;</span><br><span class="line">import com.dancer4code.actuator.utils.HttpJsonUtil;</span><br><span class="line">import com.fasterxml.jackson.databind.util.JSONPObject;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 18:16</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;student&quot;)</span><br><span class="line">public class StudentController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    protected HttpServletRequest request ;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    protected HttpServletResponse response ;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    protected HttpSession session ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;add&quot;)</span><br><span class="line">    public void add()&#123;</span><br><span class="line">        Student stu &#x3D; new Student(null,&quot;黄飞鸿&quot;,28);</span><br><span class="line">        studentDao.save(stu);</span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        jsonObject.put(&quot;result&quot;, &quot;success&quot;);</span><br><span class="line">        jsonObject.put(&quot;message&quot;, &quot;增加学生成功-id:&quot;+stu.getId());</span><br><span class="line">        HttpJsonUtil.writeJsonData(response, jsonObject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAll&quot;)</span><br><span class="line">    public void findAll ()&#123;</span><br><span class="line">        &#x2F;&#x2F;return studentDao.findAll();</span><br><span class="line">        List&lt;Student&gt; list &#x3D; studentDao.findAll();</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        jsonObject.put(&quot;result&quot;, &quot;success&quot;);</span><br><span class="line">        jsonObject.put(&quot;message&quot;, &quot;查询学生列表成功&quot;);</span><br><span class="line">        jsonObject.put(&quot;data&quot;,list);</span><br><span class="line">        HttpJsonUtil.writeJsonData(response, jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>#8.util</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package com.dancer4code.actuator.utils;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 18:16</span><br><span class="line"> * Description:将Java Bean序列化为JSON字符串,响应到客户端</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class HttpJsonUtil &#123;</span><br><span class="line"></span><br><span class="line">    public static void writeJsonData(HttpServletResponse response, JSONObject jsonResponse) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">            if (jsonResponse.containsKey(&quot;message&quot;) &amp;&amp; jsonResponse.getString(&quot;message&quot;) !&#x3D; null &amp;&amp; !jsonResponse.getString(&quot;message&quot;).isEmpty()) &#123;</span><br><span class="line">                String message &#x3D; URLEncoder.encode(jsonResponse.getString(&quot;message&quot;), &quot;utf-8&quot;);</span><br><span class="line">                jsonResponse.put(&quot;message&quot;, message);</span><br><span class="line">            &#125;</span><br><span class="line">            response.getWriter().write(jsonResponse.toString());</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">            response.getWriter().close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void writeJsonData(HttpServletResponse response, JSONArray jsonArray) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">            response.getWriter().write(jsonArray.toString());</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">            response.getWriter().close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void writeJsonData(HttpServletResponse response, String str) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">            response.getWriter().write(str);</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">            response.getWriter().close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>自定义id生成类</strong><br>请参考<br><a href="https://www.jianshu.com/p/3b384e873232">spring boot+jpa演示id的生成策略及自定义id</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dancer4code.actuator.utils;</span><br><span class="line"></span><br><span class="line">import org.hibernate.HibernateException;</span><br><span class="line">import org.hibernate.engine.spi.SharedSessionContractImplementor;</span><br><span class="line">import org.hibernate.id.IdentifierGenerator;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 19:01</span><br><span class="line"> * Description:自定义id生成类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MyIdGenerator implements IdentifierGenerator &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Serializable generate(SharedSessionContractImplementor session, Object object) throws HibernateException &#123;</span><br><span class="line">        return &quot;d4c-&quot;+UUID.randomUUID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>#9.结果<br><img src="https://upload-images.jianshu.io/upload_images/19382524-3f4b4a1d83ea0f76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p>返回的结果中，中文乱码<br>可以自定义一个解决乱码的过滤器<br><strong>比如：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.dancer4code.actuator.filter;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 19:45</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">&#x2F;&#x2F;@WebFilter</span><br><span class="line">&#x2F;&#x2F;@Configuration</span><br><span class="line">&#x2F;&#x2F;@Order(value &#x3D; 15)</span><br><span class="line">public class MyCharacterEncodingFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest,</span><br><span class="line">                         ServletResponse servletResponse, FilterChain filterChain)</span><br><span class="line">            throws IOException, ServletException &#123;</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;----------------MyCharacterEncordingFilter------doFilter-----------------&quot;);</span><br><span class="line">        HttpServletRequest request &#x3D; (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response &#x3D; (HttpServletResponse) servletResponse;</span><br><span class="line">        request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);</span><br><span class="line">        filterChain.doFilter(new MyRequest(request), response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">     * 1.写一个类实现与被增强对象相同的接口</span><br><span class="line">     * 2.定义一个变量，记住被增强的对象</span><br><span class="line">     * 3.定义一个构造方法，接受被增强对象</span><br><span class="line">     * 4.覆盖想增强的方法</span><br><span class="line">     * 5.对于不想增强的方法，直接调用被增强对象（目标对象）的方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    class MyRequest extends HttpServletRequestWrapper &#123;</span><br><span class="line">        private HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">        public MyRequest(HttpServletRequest request) &#123;</span><br><span class="line">            super(request);</span><br><span class="line">            this.request &#x3D; request;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String getParameter(String name) &#123;</span><br><span class="line">            String value &#x3D; this.request.getParameter(name);</span><br><span class="line">            if (!request.getMethod().equalsIgnoreCase(&quot;get&quot;)) &#123;</span><br><span class="line">                return value;</span><br><span class="line">            &#125;</span><br><span class="line">            if (value &#x3D;&#x3D; null) &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                return new String(value.getBytes(&quot;UTF-8&quot;),</span><br><span class="line">                        request.getCharacterEncoding());</span><br><span class="line"></span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                throw new RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;---MyCharacterEncordingFilter-----init-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;---MyCharacterEncordingFilter-----destroy-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>请参考<br><a href="https://www.jianshu.com/p/6fc23042e417">彻底搞定乱码-自定义过滤器（filter）-3</a></p>
<p><strong>最终解决乱码</strong><br><img src="https://upload-images.jianshu.io/upload_images/19382524-3e8bf1edb044a0c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<p>demo代码请参考gitee   <a href="https://gitee.com/dancer4code/spring-boot-lab">spring-boot-lab</a></p>
<p><code>搞定了......</code></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>jpa</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot演示json返回信息与统一异常处理</title>
    <url>/2020/08/17/spring-boot/spring-boot%E6%BC%94%E7%A4%BAjson%E8%BF%94%E5%9B%9E%E4%BF%A1%E6%81%AF%E4%B8%8E%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-创建基于spring-boot-jpa的基本的增删"><a href="#1-创建基于spring-boot-jpa的基本的增删" class="headerlink" title="1.创建基于spring boot+jpa的基本的增删"></a>1.创建基于spring boot+jpa的基本的增删</h1><p>请参考<a href="https://www.jianshu.com/p/b7c0115889ba">spring boot+jpa简单实现</a>就不多介绍了。本次主要是统一异常处理的演进过程，还有一个目的是刚看的异常处理视频，记录一下，方便以后查看。<br>#2.最原始的返回（不友好，不利于前端处理）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;findByIdFirst&quot;)</span><br><span class="line">public Student findByIdFirst(@RequestParam String id) &#123;</span><br><span class="line">    return studentService.findById(id).orElse(null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;findAllFirst&quot;)</span><br><span class="line">public List&lt;Student&gt; findByIdFirst() &#123;</span><br><span class="line">    return studentService.list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>如果存在Student的id为<code>d4c-2cfaa59e-27a8-46c1-8578-da715e44b214</code>则返回。<br><img src="https://upload-images.jianshu.io/upload_images/19382524-15dfa353385b7020.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="findByIdFirst"></p>
</li>
<li><p>如果查询的id不存在，则什么都不返回<br><img src="https://upload-images.jianshu.io/upload_images/19382524-7924b8f19a032ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查询id不存在"></p>
</li>
<li><p>如果存在数据，list接口返回<br><img src="https://upload-images.jianshu.io/upload_images/19382524-62f32b2fe42c2d62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="list有数据"></p>
</li>
</ul>
<p>如果不存在数据，则返回。<br><img src="https://upload-images.jianshu.io/upload_images/19382524-8ede90070c57500c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="list为空"></p>
<p>如果用这种接口返回数据，肯定会被前端捶爆。(还是不要尝试了！哎！说多了都是泪！！！)</p>
<p>#3 .怎么改进<br>我们定义一个ResultInfo对象来统一定义返回结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.exception.demo.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:41</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Data</span><br><span class="line">public class ResultInfo&lt;T&gt; &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     *返回码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Integer code;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     *返回提示信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String msg;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     *返回具体对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>上面的接口就可以改进为</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;findByIdSecond&quot;)</span><br><span class="line">   public ResultInfo findByIdSecond(@RequestParam String id) &#123;</span><br><span class="line">       Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">       ResultInfo resultInfo &#x3D; new ResultInfo();</span><br><span class="line">       resultInfo.setCode(1);</span><br><span class="line">       resultInfo.setMsg(&quot;成功！&quot;);</span><br><span class="line">       resultInfo.setData(stu);</span><br><span class="line">       return resultInfo;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;findAllSecond&quot;)</span><br><span class="line">   public ResultInfo findByIdSecond() &#123;</span><br><span class="line">       List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">       ResultInfo resultInfo &#x3D; new ResultInfo();</span><br><span class="line">       resultInfo.setCode(1);</span><br><span class="line">       resultInfo.setMsg(&quot;成功！&quot;);</span><br><span class="line">       resultInfo.setData(listStudent);</span><br><span class="line">       return resultInfo;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>改造后的数据（1条数据）<br><img src="https://upload-images.jianshu.io/upload_images/19382524-bedb758f89096974.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="get"></p>
</li>
<li><p>list<br><img src="https://upload-images.jianshu.io/upload_images/19382524-14142da02874f089.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="list"></p>
</li>
</ul>
<p>现在不管有没有数据，共同的部分code和msg都会返回，这样更有利于前端的判断处理数据。</p>
<p>但是，每次返回成功都要写一遍<br> <code> ResultInfo resultInfo = new ResultInfo();</code><br> <code>  resultInfo.setCode(1);</code><br> <code> resultInfo.setMsg(&quot;成功！&quot;);</code><br>这有点太繁琐，一点都不优雅！！！</p>
<p>#4. 代码共同的部分提取成一个工具类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.exception.demo.utils;</span><br><span class="line"></span><br><span class="line">import com.d4c.exception.demo.pojo.ResultInfo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:42</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ResultInfoOldUtil &#123;</span><br><span class="line">    public static ResultInfo success(Object object) &#123;</span><br><span class="line">        ResultInfo result &#x3D; new ResultInfo();</span><br><span class="line">        result.setCode(1);</span><br><span class="line">        result.setMsg(&quot;成功！&quot;);</span><br><span class="line">        result.setData(object);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，代码就能改成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;findByIdThird&quot;)</span><br><span class="line">   public ResultInfo findByIdThird(@RequestParam String id) &#123;</span><br><span class="line">       Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">       return ResultInfoOldUtil.success(stu);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;findAllThird&quot;)</span><br><span class="line">   public ResultInfo findByIdThird() &#123;</span><br><span class="line">       List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">       return ResultInfoOldUtil.success(listStudent);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>效果与上面一样。</p>
<p>到上面我们就处理了我们成功的代码，但只是成功，前提是代码不出现异常，但是这也许有可能吧！！！</p>
<p>我们来主动测试一个异常看看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;findByIdFourth&quot;)</span><br><span class="line">   public ResultInfo findByIdFourth(@RequestParam String id) &#123;</span><br><span class="line">       </span><br><span class="line">       Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">       Integer count &#x3D; 1&#x2F;0;</span><br><span class="line">       return ResultInfoOldUtil.success(stu);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19382524-e59cee3803515d74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="type=Internal Server Error, status=500"></p>
<p>直接异常抛到页面上，这怎么可以。</p>
<p>因此又处理了一下，变成了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;findByIdFourth&quot;)</span><br><span class="line">  public ResultInfo findByIdFourth(@RequestParam String id) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">          Integer count &#x3D; 1&#x2F;0;</span><br><span class="line">          return ResultInfoOldUtil.success(stu);</span><br><span class="line">      &#125; catch (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">          return ResultInfoOldUtil.error();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(&quot;findAllFourth&quot;)</span><br><span class="line">  public ResultInfo findByIdFourth() throws Exception &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">          throw new Exception(&quot;出现异常&quot;);</span><br><span class="line">      &#125; catch (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">          return ResultInfoOldUtil.error();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>此时的结果变成了<br><img src="https://upload-images.jianshu.io/upload_images/19382524-b04000ee3c63102d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="异常统一"></p>
<p>异常也变得优雅了！</p>
<p>但是，如果异常多了，我们分别处理，就有变成了。<br> <code>try &#123;...&#125; catch(...) &#123;...&#125;catch(...).... finally &#123;...&#125;</code></p>
<p>这样处理如此繁琐。能不能把这些异常统一处理一下，处理一次，下次就不有再处理同样的异常了。</p>
<p>#5.统一异常处理@ControllerAdvice+ @ExceptionHandler(…)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.exception.demo.handle;</span><br><span class="line"></span><br><span class="line">import com.d4c.exception.demo.enums.ResultInfoEnum;</span><br><span class="line">import com.d4c.exception.demo.exception.StudentException;</span><br><span class="line">import com.d4c.exception.demo.pojo.ResultInfo;</span><br><span class="line">import com.d4c.exception.demo.utils.ResultInfoUtil;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:40</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@ControllerAdvice</span><br><span class="line">@Slf4j</span><br><span class="line">public class ExceptionHandle &#123;</span><br><span class="line">    @ExceptionHandler(Exception.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public ResultInfo handleException(Exception e) &#123;</span><br><span class="line">        if (e instanceof StudentException) &#123;</span><br><span class="line">            StudentException studentException &#x3D; (StudentException) e;</span><br><span class="line">            return ResultInfoUtil.error(studentException.getCode(), studentException.getMessage());</span><br><span class="line">        &#125; else if (e instanceof NullPointerException) &#123;</span><br><span class="line">            ResultInfoEnum resultInfoEnum &#x3D; ResultInfoEnum.NULL_POINT_EXCEPTION;</span><br><span class="line">            return ResultInfoUtil.error(resultInfoEnum.getCode(), resultInfoEnum.getMsg());</span><br><span class="line">        &#125; else if (e instanceof IndexOutOfBoundsException) &#123;</span><br><span class="line">            ResultInfoEnum resultInfoEnum &#x3D; ResultInfoEnum.INDEX_OUT_BOUNDS_EXCEPTION;</span><br><span class="line">            return ResultInfoUtil.error(resultInfoEnum.getCode(), resultInfoEnum.getMsg());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            log.error(&quot;【系统异常】&#123;&#125;&quot;, e);</span><br><span class="line">            ResultInfoEnum unknown &#x3D; ResultInfoEnum.UNKNOWN;</span><br><span class="line">            return ResultInfoUtil.error(unknown.getCode(), unknown.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.exception.demo.exception;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.d4c.exception.demo.enums.ResultInfoEnum;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.Getter;</span><br><span class="line">import lombok.Setter;</span><br><span class="line">import net.bytebuddy.implementation.bind.annotation.Super;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:36</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">public class StudentException extends RuntimeException &#123;</span><br><span class="line"></span><br><span class="line">    private Integer code;</span><br><span class="line"></span><br><span class="line">    public StudentException(ResultInfoEnum resultInfoEnum)&#123;</span><br><span class="line">        super(resultInfoEnum.getMsg());</span><br><span class="line">        this.code &#x3D; resultInfoEnum.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们就不用显示的try catch了。只要在ExceptionHandle处理一遍就好了。就变成了下面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;findByIdFifth&quot;)</span><br><span class="line">   public ResultInfo findByIdFifth(@RequestParam String id) &#123;</span><br><span class="line">       Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">       Integer count &#x3D; 1 &#x2F; 0;</span><br><span class="line">       return ResultInfoOldUtil.success(stu);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;findAllFifth&quot;)</span><br><span class="line">   public ResultInfo findByIdFifth() throws Exception &#123;</span><br><span class="line">       List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">       throw new Exception(&quot;出现异常&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-3427896ee0a10747.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="处理后"></p>
<h1 id="6-自定义异常类StudentException"><a href="#6-自定义异常类StudentException" class="headerlink" title="6.自定义异常类StudentException"></a>6.自定义异常类StudentException</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.exception.demo.exception;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.d4c.exception.demo.enums.ResultInfoEnum;</span><br><span class="line">import lombok.Getter;</span><br><span class="line">import lombok.Setter;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:36</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">public class StudentException extends RuntimeException &#123;</span><br><span class="line"></span><br><span class="line">    private Integer code;</span><br><span class="line"></span><br><span class="line">    public StudentException(ResultInfoEnum resultInfoEnum) &#123;</span><br><span class="line">        super(resultInfoEnum.getMsg());</span><br><span class="line">        this.code &#x3D; resultInfoEnum.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="7-统一管理异常信息ResultInfoEnum"><a href="#7-统一管理异常信息ResultInfoEnum" class="headerlink" title="7.统一管理异常信息ResultInfoEnum"></a>7.统一管理异常信息ResultInfoEnum</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.exception.demo.enums;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Getter;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:39</span><br><span class="line"> * Description:</span><br><span class="line"> * @author</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Getter</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public enum ResultInfoEnum &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 成功</span><br><span class="line">     *&#x2F;</span><br><span class="line">    SUCCESS(1,&quot;success&quot;),</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 失败</span><br><span class="line">     *&#x2F;</span><br><span class="line">    FAILED(2,&quot;failed&quot;),</span><br><span class="line">    &#x2F;**</span><br><span class="line">     *未知错误</span><br><span class="line">     *&#x2F;</span><br><span class="line">    UNKNOWN(3,&quot;未知错误&quot;),</span><br><span class="line">    &#x2F;**</span><br><span class="line">     *id不存在</span><br><span class="line">     *&#x2F;</span><br><span class="line">    NOT_EXIST_ID(4,&quot;要查询的id不存在&quot;),</span><br><span class="line"></span><br><span class="line">    NULL_POINT_EXCEPTION(5,&quot;空指针异常&quot;),</span><br><span class="line">    INDEX_OUT_BOUNDS_EXCEPTION(6,&quot;下标超出异常&quot;)</span><br><span class="line">    ;</span><br><span class="line">    private Integer code;</span><br><span class="line">    private String msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>#8.优化后的ResultInfoUtil</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.exception.demo.utils;</span><br><span class="line"></span><br><span class="line">import com.d4c.exception.demo.enums.ResultInfoEnum;</span><br><span class="line">import com.d4c.exception.demo.pojo.ResultInfo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:42</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ResultInfoUtil &#123;</span><br><span class="line">    public static ResultInfo success(Object object) &#123;</span><br><span class="line">        ResultInfo result &#x3D; new ResultInfo();</span><br><span class="line">        ResultInfoEnum successEnum &#x3D; ResultInfoEnum.SUCCESS;</span><br><span class="line">        result.setCode(successEnum.getCode());</span><br><span class="line">        result.setMsg(successEnum.getMsg());</span><br><span class="line">        result.setData(object);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static ResultInfo success() &#123;</span><br><span class="line">        return success(null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static ResultInfo error(Integer code ,String msg) &#123;</span><br><span class="line">        ResultInfo result &#x3D; new ResultInfo();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 最后，代码优化成</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19382524-252edbd728d1563b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最后项目结构"></p>
<p>json与统一异常处理到这里就告一段落了。<br>具体的源码请参考<a href="https://gitee.com/dancer4code/spring-boot-lab/tree/master/exception-demo">exception-demo</a></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>关于参数校验，hibernate的validator 的校验</title>
    <url>/2021/09/02/spring-boot/%E5%85%B3%E4%BA%8E%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C,hibernate%E7%9A%84validator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于参数校验，hibernate的validator-的校验"><a href="#关于参数校验，hibernate的validator-的校验" class="headerlink" title="关于参数校验，hibernate的validator 的校验"></a>关于参数校验，hibernate的validator 的校验</h1><h2 id="1-注解式校验"><a href="#1-注解式校验" class="headerlink" title="1.注解式校验"></a>1.注解式校验</h2><h3 id="1-1-常见校验注解"><a href="#1-1-常见校验注解" class="headerlink" title="1.1 常见校验注解"></a>1.1 常见校验注解</h3><blockquote>
<p><strong>定义的校验类型</strong></p>
<p>@Null 验证对象是否为null<br>@NotNull 验证对象是否不为null, 无法查检长度为0的字符串<br>@NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.<br>@NotEmpty 检查约束元素是否为NULL或者是EMPTY.<br>@CreditCardNumber信用卡验证<br>@Email 验证是否是邮件地址，如果为null,不进行验证，算通过验证。<br>@URL(protocol=,host=, port=,regexp=, flags=) ip地址校验</p>
<p><strong>Booelan检查</strong></p>
<p>@AssertTrue 验证 Boolean 对象是否为 true<br>@AssertFalse 验证 Boolean 对象是否为 false</p>
<p><strong>长度检查</strong><br>@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内<br>@Length(min=, max=) Validates that the annotated string is between min and max included.</p>
<p><strong>日期检查</strong><br>@Past 验证 Date 和 Calendar 对象是否在当前时间之前<br>@Future 验证 Date 和 Calendar 对象是否在当前时间之后<br>@Pattern 验证 String 对象是否符合正则表达式的规则</p>
<p><strong>数值检查，</strong>建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为””时无法转换为int，但可以转换为Stirng为””,Integer为null<br>@Min 验证 Number 和 String 对象是否大等于指定的值<br>@Max 验证 Number 和 String 对象是否小等于指定的值<br>@DecimalMax 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度<br>@DecimalMin 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度<br>@Digits 验证 Number 和 String 的构成是否合法<br>@Digits(integer=,fraction=) 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。<br>@Range(min=, max=) Checks whether the annotated value lies between (inclusive) the specified minimum and maximum.</p>
</blockquote>
<h3 id="1-2-实现简单的注解式校验栗子"><a href="#1-2-实现简单的注解式校验栗子" class="headerlink" title="1.2 实现简单的注解式校验栗子"></a>1.2 实现简单的注解式校验栗子</h3><h4 id="1-2-1-请求实体"><a href="#1-2-1-请求实体" class="headerlink" title="1.2.1 请求实体"></a>1.2.1 请求实体</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonReqVO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互感器主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;业务类型不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;数据不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;开始时间不能为空！&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^((([0-9]&#123;3&#125;[1-9]|[0-9]&#123;2&#125;[1-9][0-9]&#123;1&#125;|[0-9]&#123;1&#125;[1-9][0-9]&#123;2&#125;|[1-9][0-9]&#123;3&#125;)-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]&#123;2&#125;)(0[4]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29))\\s+([0-1]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$&quot;,message = &quot;日期格式不正确&quot;)</span></span><br><span class="line"><span class="comment">//    @DateTime(format = &quot;yyyy-MM-dd&quot;, message = &quot;时间格式错误，格式应为&#x27;yyyy-MM-dd&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String startDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;name不能为空&quot;,groups = S1.class)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Range(min = 1,max = 120,message = &quot;年龄必须在1-120之间&quot;,groups = S1.class)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;address不能为空&quot;,groups = S2.class)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;phone不能为空&quot;,groups = S2.class)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">S1</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">S2</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-2-2-controller"><a href="#1-2-2-controller" class="headerlink" title="1.2.2 controller"></a>1.2.2 controller</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;t3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(<span class="meta">@RequestBody</span> CommonReqVO&lt;UserVO&gt; userVO)</span></span>&#123;</span><br><span class="line">        ValidateUtil.validateParams(userVO,<span class="string">&quot;请求参数不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;01&quot;</span>.equals(userVO.getType()))&#123;</span><br><span class="line">            ValidateUtil.validateParams(userVO,<span class="string">&quot;请求参数不能为空&quot;</span>,UserVO.S1.class);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;02&quot;</span>.equals(userVO.getType()))&#123;</span><br><span class="line">            ValidateUtil.validateParams(userVO,<span class="string">&quot;请求参数不能为空&quot;</span>,UserVO.S2.class);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">&quot;请求参数type类型不匹配！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;t3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;t4&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test4</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> CommonReqVO&lt;UserVO&gt; userVO)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;4&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="1-2-3-统一异常处理类及相关类"><a href="#1-2-3-统一异常处理类及相关类" class="headerlink" title="1.2.3 统一异常处理类及相关类"></a>1.2.3 统一异常处理类及相关类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;validator.showField:false&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean showFile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">handleCustomException</span><span class="params">(CustomException e)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;【用户自定义异常】&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ResultInfoUtil.error(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpMediaTypeNotSupportedException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">handleReqException</span><span class="params">(HttpMediaTypeNotSupportedException e)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;【请求类型不支持异常】&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">if</span> (e.getMessage().contains(<span class="string">&quot;not supported&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, <span class="string">&quot;请求Content-Type不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">handleReqBodyException</span><span class="params">(HttpMessageNotReadableException e)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;【请求体异常】&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">if</span> (e.getMessage().contains(<span class="string">&quot;Required request body is missing&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, <span class="string">&quot;请求体不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">handleOtherException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;【系统异常】&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理validation框架中的&#123;<span class="doctag">@link</span> MethodArgumentNotValidException&#125;异常</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;该异常一般出在用&#123;<span class="doctag">@code</span> <span class="doctag">@RequestBody</span>&#125;注解标记的参数校验，在对象中的参数有问题是抛出&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e &#123;<span class="doctag">@link</span> MethodArgumentNotValidException&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ResultInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">doNoValidExceptionHandler</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;捕捉到参数校验异常： [&#123;&#125;]&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> validationExceptionHandler(e.getBindingResult(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理validation框架中的&#123;<span class="doctag">@link</span> ConstraintDeclarationException&#125;异常</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;该异常一般出在用&#123;<span class="doctag">@code</span> <span class="doctag">@RequestParam</span>&#125;注解标记的参数校验&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e &#123;<span class="doctag">@link</span> ConstraintDeclarationException&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ResultInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ConstraintDeclarationException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">doNoValidExceptionHandler</span><span class="params">(ConstraintDeclarationException e)</span> </span>&#123;</span><br><span class="line">        String errorMsg = e.getMessage();</span><br><span class="line">        log.info(<span class="string">&quot;捕捉到参数校验异常： [&#123;&#125;]&quot;</span>, errorMsg, e);</span><br><span class="line">        <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理validation框架中的&#123;<span class="doctag">@link</span> BindException&#125;异常</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;该异常一般出在用&#123;<span class="doctag">@code</span> <span class="doctag">@RequestBody</span>&#125;注解标记的参数校验，在对象嵌套类型参数有问题时抛出&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e &#123;<span class="doctag">@link</span> BindException&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ResultInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">doNoValidExceptionHandler</span><span class="params">(BindException e)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;捕捉到参数校验异常： [&#123;&#125;]&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> validationExceptionHandler(e.getBindingResult(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理validation框架的异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bindingResult &#123;<span class="doctag">@link</span> BindingResult&#125; 异常绑定的对象信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message       异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ResultInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ResultInfo <span class="title">validationExceptionHandler</span><span class="params">(BindingResult bindingResult, String message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认捕获第一个不符合校验规则的错误信息</span></span><br><span class="line">        <span class="comment">//错误字段对象</span></span><br><span class="line">        List&lt;FieldError&gt; fieldErrors = bindingResult.getFieldErrors();</span><br><span class="line">        List&lt;String&gt; errorMessages = <span class="keyword">new</span> ArrayList&lt;&gt;(fieldErrors.size());</span><br><span class="line">        <span class="keyword">if</span> (showFile)&#123;</span><br><span class="line">            fieldErrors.stream().forEach(e-&gt;&#123;</span><br><span class="line">                errorMessages.add(e.getField()+<span class="string">&quot;-&quot;</span>+e.getDefaultMessage());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            fieldErrors.stream().forEach(e-&gt;&#123;</span><br><span class="line">                errorMessages.add(e.getDefaultMessage());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;捕捉到参数校验异常详情： &#123;&#125;&quot;</span>, errorMessages);</span><br><span class="line">        <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, errorMessages.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultInfo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *返回码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *返回提示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *返回具体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultInfoUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultInfo <span class="title">success</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        ResultInfo result = <span class="keyword">new</span> ResultInfo();</span><br><span class="line">        ResultInfoEnum successEnum = ResultInfoEnum.SUCCESS;</span><br><span class="line">        result.setCode(successEnum.getCode());</span><br><span class="line">        result.setMsg(successEnum.getMsg());</span><br><span class="line">        result.setData(object);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultInfo <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultInfo <span class="title">error</span><span class="params">(Integer code, String msg)</span> </span>&#123;</span><br><span class="line">        ResultInfo result = <span class="keyword">new</span> ResultInfo();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(ResultInfoEnum resultInfoEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(resultInfoEnum.getMsg());</span><br><span class="line">        <span class="keyword">this</span>.code = resultInfoEnum.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.code = ResultInfoEnum.FAILED.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意上面配置了 failFast 为false。所以会校验全部参数</p>
</blockquote>
<h4 id="1-2-4-请求及响应"><a href="#1-2-4-请求及响应" class="headerlink" title="1.2.4 请求及响应"></a>1.2.4 请求及响应</h4><p><strong>请求</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>响应</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;[data-数据不能为空, type-业务类型不能为空, startDate-开始时间不能为空！]&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-编程式校验"><a href="#2-编程式校验" class="headerlink" title="2.编程式校验"></a>2.编程式校验</h2><h3 id="2-1-校验相关类"><a href="#2-1-校验相关类" class="headerlink" title="2.1 校验相关类"></a>2.1 校验相关类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateUtil</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Validator validator;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用快速失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Boolean failFast;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否显示错误字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Boolean showField;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFailFast</span><span class="params">(Boolean failFast)</span> </span>&#123;</span><br><span class="line">        ValidateUtil.failFast = failFast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setShowField</span><span class="params">(Boolean showField)</span> </span>&#123;</span><br><span class="line">        ValidateUtil.showField = showField;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 校验的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validate(T obj, Class... groupClasses) &#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolations;</span><br><span class="line">        <span class="keyword">if</span> (groupClasses != <span class="keyword">null</span> &amp;&amp; groupClasses.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            constraintViolations = validator.validate(obj, groupClasses);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            constraintViolations = validator.validate(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> constraintViolations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证请求参数是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o   参数对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 报错信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkIsNotNull</span><span class="params">(Object o, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">validateParams</span><span class="params">(T t, String msg, Class... groupClasses)</span> </span>&#123;</span><br><span class="line">        checkIsNotNull(t, msg);</span><br><span class="line">        Set&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolationSet = validate(t, groupClasses);</span><br><span class="line">        List&lt;String&gt; resultString = <span class="keyword">new</span> ArrayList&lt;&gt;(constraintViolationSet.size());</span><br><span class="line">        <span class="keyword">if</span> (!constraintViolationSet.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (showField)&#123;</span><br><span class="line">                constraintViolationSet.stream().forEach(c -&gt; &#123;</span><br><span class="line">                    resultString.add(c.getPropertyPath().toString() + <span class="string">&quot;-&quot;</span> + c.getMessage());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                constraintViolationSet.stream().forEach(c -&gt; &#123;</span><br><span class="line">                    resultString.add(c.getMessage());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(resultString.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入validator</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> validatorBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setValidator</span><span class="params">(Validator validatorBean)</span> </span>&#123;</span><br><span class="line">        validator = validatorBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;validator.failFast:true&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean failFast;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;validator.showField:false&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean showField;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">validator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValidatorFactory validatorFactory = Validation.byProvider(HibernateValidator.class)</span><br><span class="line">                .configure()</span><br><span class="line">                <span class="comment">// 快速失败</span></span><br><span class="line">                .failFast(failFast)</span><br><span class="line">                .buildValidatorFactory();</span><br><span class="line">        <span class="keyword">return</span> validatorFactory.getValidator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给ValidateUtil初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initValidateUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);</span><br><span class="line">        Validator validator = (Validator) applicationContext.getBean(<span class="string">&quot;validator&quot;</span>);</span><br><span class="line">        ValidateUtil.setValidator(validator);</span><br><span class="line">        ValidateUtil.setFailFast(failFast);</span><br><span class="line">        ValidateUtil.setShowField(showField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#校验相关配置</span></span><br><span class="line"><span class="attr">validator:</span></span><br><span class="line">  <span class="comment">#快速失败</span></span><br><span class="line">  <span class="attr">failFast:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#错误提示是否显示错误字段</span></span><br><span class="line">  <span class="attr">showField:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>





<h2 id="3-自定义校验注解"><a href="#3-自定义校验注解" class="headerlink" title="3.自定义校验注解"></a>3.自定义校验注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = DateTime.DateTimeValidator.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DateTime &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;格式错误&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">format</span><span class="params">()</span> <span class="keyword">default</span> &quot;yyyyMM&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DateTimeValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">DateTime</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> DateTime dateTime;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(DateTime dateTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 如果 value 为空则不进行格式验证，为空验证可以使用 @NotBlank @NotNull @NotEmpty 等注解来进行控制，职责分离</span></span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String format = dateTime.format();</span><br><span class="line">            <span class="keyword">if</span> (value.length() != format.length()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(format);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                simpleDateFormat.parse(value);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="3-1-使用方法"><a href="#3-1-使用方法" class="headerlink" title="3.1 使用方法"></a>3.1 使用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DateTime(format = &quot;yyyy-MM-dd&quot;, message = &quot;时间格式错误，格式应为&#x27;yyyy-MM-dd&#x27;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String startDate;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>validator</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot用aop做统一请求日志处理</title>
    <url>/2020/08/06/spring-boot/spring-boot%E7%94%A8aop%E5%81%9A%E7%BB%9F%E4%B8%80%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#1.定义切面、切点@Aspect+@Pointcut</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.exception.demo.aspect;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;9 20:54</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class HttpAspect &#123;</span><br><span class="line">    @Pointcut(&quot;execution(public * com.d4c.exception.demo.controller.*.*(..))&quot;)</span><br><span class="line">    public void pointCut()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Before(&quot;pointCut()&quot;)</span><br><span class="line">    public void doBefore(JoinPoint joinPoint)&#123;</span><br><span class="line">        ServletRequestAttributes attributes&#x3D; (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request &#x3D; attributes.getRequest();</span><br><span class="line">        log.info(&quot;url&#x3D;&#123;&#125;&quot;,request.getRequestURL());</span><br><span class="line">        &#x2F;&#x2F;method</span><br><span class="line">        log.info(&quot;method&#x3D;&#123;&#125;&quot;, request.getMethod());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;ip</span><br><span class="line">        log.info(&quot;ip&#x3D;&#123;&#125;&quot;, request.getRemoteAddr());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;类方法</span><br><span class="line">        log.info(&quot;method&#x3D;&#123;&#125;&quot;, joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;参数</span><br><span class="line">        log.info(&quot;args&#x3D;&#123;&#125;&quot;, joinPoint.getArgs());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After(&quot;pointCut()&quot;)</span><br><span class="line">    public void doAfter()&#123;</span><br><span class="line">        log.info(&quot;-----after------&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @AfterReturning(returning &#x3D; &quot;object&quot;,pointcut &#x3D; &quot;pointCut()&quot;)</span><br><span class="line">    public void doAfterReturning(Object object)&#123;</span><br><span class="line">        log.info(&quot;return&#x3D;&#123;&#125;&quot;,object);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>#2.简单接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.exception.demo.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.d4c.exception.demo.pojo.ResultInfo;</span><br><span class="line">import com.d4c.exception.demo.pojo.Student;</span><br><span class="line">import com.d4c.exception.demo.service.StudentService;</span><br><span class="line">import com.d4c.exception.demo.utils.ResultInfoOldUtil;</span><br><span class="line">import com.d4c.exception.demo.utils.ResultInfoUtil;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 18:16</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;student&quot;)</span><br><span class="line">public class StudentController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private StudentService studentService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;add&quot;)</span><br><span class="line">    public ResultInfo add() &#123;</span><br><span class="line">        Student stu &#x3D; new Student(null, &quot;黄麒英&quot;, 48);</span><br><span class="line">        studentService.insert(stu);</span><br><span class="line">        return ResultInfoUtil.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;getOne&quot;)</span><br><span class="line">    public ResultInfo getOne(@RequestParam(required &#x3D; false) String id) &#123;</span><br><span class="line">        Student student &#x3D; studentService.get(id);</span><br><span class="line">        return ResultInfoUtil.success(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findByIdFirst&quot;)</span><br><span class="line">    public Student findByIdFirst(@RequestParam String id) &#123;</span><br><span class="line">        return studentService.findById(id).orElse(null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAllFirst&quot;)</span><br><span class="line">    public List&lt;Student&gt; findByIdFirst() &#123;</span><br><span class="line">        return studentService.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findByIdSecond&quot;)</span><br><span class="line">    public ResultInfo findByIdSecond(@RequestParam String id) &#123;</span><br><span class="line">        Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">        ResultInfo resultInfo &#x3D; new ResultInfo();</span><br><span class="line">        resultInfo.setCode(1);</span><br><span class="line">        resultInfo.setMsg(&quot;成功！&quot;);</span><br><span class="line">        resultInfo.setData(stu);</span><br><span class="line">        return resultInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAllSecond&quot;)</span><br><span class="line">    public ResultInfo findByIdSecond() &#123;</span><br><span class="line">        List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">        ResultInfo resultInfo &#x3D; new ResultInfo();</span><br><span class="line">        resultInfo.setCode(1);</span><br><span class="line">        resultInfo.setMsg(&quot;成功！&quot;);</span><br><span class="line">        resultInfo.setData(listStudent);</span><br><span class="line">        return resultInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findByIdThird&quot;)</span><br><span class="line">    public ResultInfo findByIdThird(@RequestParam String id) &#123;</span><br><span class="line">        Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">        return ResultInfoOldUtil.success(stu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAllThird&quot;)</span><br><span class="line">    public ResultInfo findByIdThird() &#123;</span><br><span class="line">        List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">        return ResultInfoOldUtil.success(listStudent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findByIdFourth&quot;)</span><br><span class="line">    public ResultInfo findByIdFourth(@RequestParam String id) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">            Integer count &#x3D; 1 &#x2F; 0;</span><br><span class="line">            return ResultInfoOldUtil.success(stu);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return ResultInfoOldUtil.error();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAllFourth&quot;)</span><br><span class="line">    public ResultInfo findByIdFourth() throws Exception &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">            throw new Exception(&quot;出现异常&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return ResultInfoOldUtil.error();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findByIdFifth&quot;)</span><br><span class="line">    public ResultInfo findByIdFifth(@RequestParam String id) &#123;</span><br><span class="line">        Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">        Integer count &#x3D; 1 &#x2F; 0;</span><br><span class="line">        return ResultInfoOldUtil.success(stu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAllFifth&quot;)</span><br><span class="line">    public ResultInfo findByIdFifth() throws Exception &#123;</span><br><span class="line">        List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">        throw new Exception(&quot;出现异常&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findById&quot;)</span><br><span class="line">    public ResultInfo findById(@RequestParam(required &#x3D; false) String id) &#123;</span><br><span class="line">        Student byId &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">        return ResultInfoUtil.success(byId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAll&quot;)</span><br><span class="line">    public ResultInfo findAll() &#123;</span><br><span class="line">        List&lt;Student&gt; list &#x3D; studentService.list();</span><br><span class="line">        return ResultInfoUtil.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#3.请求接口测试<br><img src="https://upload-images.jianshu.io/upload_images/19382524-bf53c04a0082b03a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="请求地址"></p>
<p>#4.结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect -url&#x3D;http:&#x2F;&#x2F;localhost:8000&#x2F;student&#x2F;findAll</span><br><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect -method&#x3D;GET</span><br><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect -ip&#x3D;0:0:0:0:0:0:0:1</span><br><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect -method&#x3D;com.d4c.exception.demo.controller.StudentController.findAll</span><br><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect -args&#x3D;&#123;&#125;</span><br><span class="line">Hibernate: select student0_.id as id1_0_, student0_.age as age2_0_, student0_.name as name3_0_ from student student0_</span><br><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect ------after------</span><br><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect -return&#x3D;ResultInfo(code&#x3D;1, msg&#x3D;success, data&#x3D;[Student(id&#x3D;d4c-04b6feca-a37c-4942-9042-d9da28c167fe, na</span><br></pre></td></tr></table></figure>

<p>每个方法都拦截了，并打印出信息。搞定了</p>
<p>想自定义日志信息可以参考<code>logback.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL --&gt;</span><br><span class="line">&lt;!-- 日志输出规则  根据当前ROOT 级别，日志输出时，级别高于root默认的级别时  会输出 --&gt;</span><br><span class="line">&lt;!-- 以下  每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，</span><br><span class="line">默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br><span class="line">&lt;configuration scan&#x3D;&quot;false&quot; scanPeriod&#x3D;&quot;60 seconds&quot; debug&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    &lt;!-- 定义日志文件 输入位置 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;logPath&quot; value&#x3D;&quot;d:&#x2F;test_log&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 日志最大的历史 30天 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;maxHistory&quot; value&#x3D;&quot;30&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置项， 通过此节点配置日志输出位置（控制台、文件、数据库）、输出格式等--&gt;</span><br><span class="line">    &lt;!-- ConsoleAppender代表输出到控制台 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;consoleLog&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;!-- layout代表输出格式 --&gt;</span><br><span class="line">        &lt;layout class&#x3D;&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %highlight(%-5level) %cyan(%logger) -%.-100msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;layout&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line">    &lt;!-- 日志输出文件 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;fileInfoLog&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger -%msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender--&gt;</span><br><span class="line">        &lt;!-- 滚动策略，它根据时间来制定滚动策略.既负责滚动也负责触发滚动 --&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!-- 输出路径 --&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;logPath&#125;&#x2F;info&#x2F;%d.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且&lt;maxHistory&gt;是6，</span><br><span class="line">            则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除--&gt;</span><br><span class="line">            &lt;maxHistory&gt;$&#123;maxHistory&#125;&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&gt;</span><br><span class="line">          &lt;fileNamePattern&gt;$&#123;logPath&#125;&#x2F;%d&#123;yyyy-MM-dd&#125;&#x2F;.log.zip&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">          &lt;minIndex&gt;1&lt;&#x2F;minIndex&gt;</span><br><span class="line">          &lt;maxIndex&gt;3&lt;&#x2F;maxIndex&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;   --&gt;</span><br><span class="line">        &lt;!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动</span><br><span class="line">        &lt;triggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;</span><br><span class="line">            &lt;maxFileSize&gt;5MB&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">        &lt;&#x2F;triggeringPolicy&gt;   --&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line">    &lt;!-- 特殊记录Error日志 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;fileErrorLog&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 只记录ERROR级别日志，添加范围过滤，可以将该类型的日志特殊记录到某个位置 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;ERROR&lt;&#x2F;level&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger -%msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;logPath&#125;&#x2F;error&#x2F;%d.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;!-- 日志最大的历史 60天 --&gt;</span><br><span class="line">            &lt;maxHistory&gt;60&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;fileWarnLog&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 只记录ERROR级别日志，添加范围过滤，可以将该类型的日志特殊记录到某个位置 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;WARN&lt;&#x2F;level&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger -%msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;logPath&#125;&#x2F;warn&#x2F;%d.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;!-- 日志最大的历史 60天 --&gt;</span><br><span class="line">            &lt;maxHistory&gt;60&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 根节点，表名基本的日志级别，里面可以由多个appender规则 --&gt;</span><br><span class="line">    &lt;!-- level&#x3D;&quot;ALL&quot;代表基础日志级别为ALL --&gt;</span><br><span class="line">    &lt;root level&#x3D;&quot;info&quot;&gt;</span><br><span class="line">        &lt;!-- 引入控制台输出规则 --&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;consoleLog&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;fileInfoLog&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;fileErrorLog&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;fileWarnLog&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;root&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<p>更多请参考<a href="https://www.jianshu.com/p/fba0d8e0a017">logging日志-log4j、log4j 2、logback、commons-logging和…..</a></p>
<p>上述代码请参考<a href="https://gitee.com/dancer4code/spring-boot-lab/tree/master/exception-demo">gitee源码地址</a></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>简单自定义spring-boot启动器starter</title>
    <url>/2020/08/08/spring-boot/%E7%AE%80%E5%8D%95%E8%87%AA%E5%AE%9A%E4%B9%89spring-boot%E5%90%AF%E5%8A%A8%E5%99%A8starter/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;groupId&gt;com.d4c.study&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;starter-demo-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-autoconfigure&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>

<p><strong>因为是spring Boot启动器，所以要指定parent为：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.1.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure>
<p><strong>spring-boot-configuration-processor</strong></p>
<blockquote>
<p>spring-boot-configuration-processor的作用是编译时生成 spring-configuration-metadata.json ，此文件主要给IDE使用。如当配置此jar相关配置属性在 application.yml ，你可以用ctlr+鼠标左键点击属性名，IDE会跳转到你配置此属性的类中。<br>我们日常使用的Spring官方的Starter一般采取spring-boot-starter-{name} 的命名方式，如 spring-boot-starter-web 。<br>而非官方的Starter，官方建议 artifactId 命名应遵循{name}-spring-boot-starter 的格式。 例如：mybatis-spring-boot-starter  。</p>
</blockquote>
<p><strong>spring-boot-autoconfigure</strong><br>spring-boot-autoconfigure主要是要用到其中的一些注解</p>
<h1 id="2-定义属性类，用于读取，接受配置文件中的值"><a href="#2-定义属性类，用于读取，接受配置文件中的值" class="headerlink" title="2.定义属性类，用于读取，接受配置文件中的值"></a>2.定义属性类，用于读取，接受配置文件中的值</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.starter.autoconfigure;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line">@ConfigurationProperties(&quot;simple.string&quot;)</span><br><span class="line">public class SimpleProperties &#123;</span><br><span class="line">    private String value;</span><br><span class="line"></span><br><span class="line">    public String getValue() &#123;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setValue(String value) &#123;</span><br><span class="line">        this.value &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@ConfigurationProperties与@EnableConfigurationProperties配合使用，实现了配置文件的读取，与引入。</p>
<h1 id="3-定义功能实现类"><a href="#3-定义功能实现类" class="headerlink" title="3.定义功能实现类"></a>3.定义功能实现类</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.starter.autoconfigure;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class StringResolvedBean &#123;</span><br><span class="line">    private String config;</span><br><span class="line"></span><br><span class="line">    public StringResolvedBean(String config) &#123;</span><br><span class="line">        this.config &#x3D; config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String[] split(String separatorChar) &#123;</span><br><span class="line">        return config.split(separatorChar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="4-自动配置类"><a href="#4-自动配置类" class="headerlink" title="4.自动配置类"></a>4.自动配置类</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.starter.autoconfigure;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ConditionalOnClass(StringResolvedBean.class)</span><br><span class="line">@EnableConfigurationProperties(SimpleProperties.class)</span><br><span class="line">public class SimpleStringAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnMissingBean</span><br><span class="line">    @ConditionalOnProperty(prefix &#x3D; &quot;simple.string&quot;, value &#x3D; &quot;enabled&quot;, havingValue &#x3D; &quot;true&quot;)</span><br><span class="line">    StringResolvedBean starterInit(SimpleProperties simpleProperties) &#123;</span><br><span class="line">        return new StringResolvedBean(simpleProperties.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="4-1-有关条件的注解"><a href="#4-1-有关条件的注解" class="headerlink" title="4.1 有关条件的注解"></a>4.1 有关条件的注解</h2><blockquote>
<p>@ConditionalOnBean:当容器中有指定的Bean的条件下<br>@ConditionalOnClass：当类路径下有指定的类的条件下<br>@ConditionalOnExpression:基于SpEL表达式作为判断条件<br>@ConditionalOnJava:基于JVM版本作为判断条件<br>@ConditionalOnJndi:在JNDI存在的条件下查找指定的位置<br>@ConditionalOnMissingBean:当容器中没有指定Bean的情况下<br>@ConditionalOnMissingClass:当类路径下没有指定的类的条件下<br>@ConditionalOnNotWebApplication:当前项目不是Web项目的条件下<br>@ConditionalOnProperty:指定的属性是否有指定的值<br>@ConditionalOnResource:类路径下是否有指定的资源<br>@ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean @ConditionalOnWebApplication:当前项目是Web项目的条件下 </p>
</blockquote>
<p>#5.创建spring.factories</p>
<blockquote>
<p>在resources/META-INF/下创建spring.factories文件，并添加如下内容：<br>org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.d4c.starter.autoconfigure.SimpleStringAutoConfiguration</p>
</blockquote>
<h1 id="6-项目路径参考"><a href="#6-项目路径参考" class="headerlink" title="6.项目路径参考"></a>6.项目路径参考</h1><p><img src="https://upload-images.jianshu.io/upload_images/19382524-fe3490d220742aff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h1 id="7-打包到本地仓库"><a href="#7-打包到本地仓库" class="headerlink" title="7.打包到本地仓库"></a>7.打包到本地仓库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#切到项目根目录，执行mvn命令</span><br><span class="line">mvn install</span><br></pre></td></tr></table></figure>

<h1 id="8-其他本地项目就可以maven-dependency引入了"><a href="#8-其他本地项目就可以maven-dependency引入了" class="headerlink" title="8.其他本地项目就可以maven dependency引入了"></a>8.其他本地项目就可以maven dependency引入了</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.d4c.study&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;starter-demo-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p><strong>application.yml</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 6011</span><br><span class="line">simple:</span><br><span class="line">  string:</span><br><span class="line">    enabled: true</span><br><span class="line">    value: 12,aa,bb,cc</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义listener</title>
    <url>/2020/08/09/spring-boot/%E8%87%AA%E5%AE%9A%E4%B9%89listener/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#两种方式，一种是基于注解，另一种通过注册bean注册</p>
<hr>
<p>#方式一：基于注解</p>
<p><code>@WebListener</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.listener;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebListener;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line">@WebListener</span><br><span class="line">@Slf4j</span><br><span class="line">public class MyServletContextListener implements ServletContextListener, ServletContextAttributeListener, HttpSessionListener,</span><br><span class="line">        HttpSessionAttributeListener, HttpSessionBindingListener,HttpSessionActivationListener,HttpSessionIdListener,</span><br><span class="line">        ServletRequestListener,ServletRequestAttributeListener</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;ServletContextAttributeListener</span><br><span class="line">    @Override</span><br><span class="line">    public void attributeAdded(ServletContextAttributeEvent scae) &#123;</span><br><span class="line">        log.info(&quot;ServletContextAttributeListener attributeAdded-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeRemoved(ServletContextAttributeEvent scae) &#123;</span><br><span class="line">        log.info(&quot;ServletContextAttributeListener attributeRemoved-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeReplaced(ServletContextAttributeEvent scae) &#123;</span><br><span class="line">        log.info(&quot;ServletContextAttributeListener attributeReplaced-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;ServletContextListener</span><br><span class="line">    @Override</span><br><span class="line">    public void contextInitialized(ServletContextEvent sce) &#123;</span><br><span class="line">        log.info(&quot;ServletContextListener contextInitialized-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void contextDestroyed(ServletContextEvent sce) &#123;</span><br><span class="line">        log.info(&quot;ServletContextListener contextDestroyed-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;HttpSessionIdListener</span><br><span class="line">    @Override</span><br><span class="line">    public void sessionIdChanged(HttpSessionEvent se, String oldSessionId) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionIdListener sessionIdChanged-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;HttpSessionActivationListener</span><br><span class="line">    @Override</span><br><span class="line">    public void sessionWillPassivate(HttpSessionEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionActivationListener sessionWillPassivate-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sessionDidActivate(HttpSessionEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionActivationListener sessionDidActivate-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;HttpSessionAttributeListener</span><br><span class="line">    @Override</span><br><span class="line">    public void attributeAdded(HttpSessionBindingEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionAttributeListener attributeAdded-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeRemoved(HttpSessionBindingEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionAttributeListener attributeRemoved-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeReplaced(HttpSessionBindingEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionAttributeListener attributeReplaced-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;HttpSessionBindingListener</span><br><span class="line">    @Override</span><br><span class="line">    public void valueBound(HttpSessionBindingEvent event) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionBindingListener valueBound-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void valueUnbound(HttpSessionBindingEvent event) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionBindingListener valueUnbound-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;HttpSessionListener</span><br><span class="line">    @Override</span><br><span class="line">    public void sessionCreated(HttpSessionEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionListener sessionCreated-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sessionDestroyed(HttpSessionEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionBindingListener sessionDestroyed-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;ServletRequestAttributeListener</span><br><span class="line">    @Override</span><br><span class="line">    public void attributeAdded(ServletRequestAttributeEvent srae) &#123;</span><br><span class="line">        log.info(&quot;ServletRequestAttributeListener attributeAdded-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeRemoved(ServletRequestAttributeEvent srae) &#123;</span><br><span class="line">        log.info(&quot;ServletRequestAttributeListener attributeRemoved-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeReplaced(ServletRequestAttributeEvent srae) &#123;</span><br><span class="line">        log.info(&quot;ServletRequestAttributeListener attributeReplaced-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;ServletRequestListener</span><br><span class="line">    @Override</span><br><span class="line">    public void requestDestroyed(ServletRequestEvent sre) &#123;</span><br><span class="line">        log.info(&quot;ServletRequestListener requestDestroyed-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void requestInitialized(ServletRequestEvent sre) &#123;</span><br><span class="line">        log.info(&quot;ServletRequestListener requestInitialized-----&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Servlet事件监听器</span><br><span class="line"> 在Servlet技术中已经定义了一些事件，</span><br><span class="line"> 并且我们可以针对这些事件来编写相关的事件监听器，从而对事件作出相应处理。</span><br><span class="line"> Servlet事件主要有3类：Servlet上下文事件、会话事件与请求事件</span><br><span class="line"> 下面具体讲解这3类事件的监听器实现。</span><br><span class="line"> </span><br><span class="line"> 1．对Servlet上下文进行监听</span><br><span class="line"> 可以监听ServletContext对象的创建和删除以及属性的添加、删除和修改等操作。该监听器需要使用到如下两个接口类：</span><br><span class="line">     ● ServletContextAttributeListener：监听对ServletContext属性的操作，如增加、删除、修改操作。</span><br><span class="line">     ● ServletContextListener：监听ServletContext，</span><br><span class="line">         当创建ServletContext时，激发contextInitialized (ServletContextEvent sce)方法。</span><br><span class="line">         当销毁ServletContext时，激发contextDestroyed(ServletContext- Event sce)方法。</span><br><span class="line"> </span><br><span class="line"> 2．监听Http会话</span><br><span class="line"> 可以监听Http会话活动情况、Http会话中属性设置情况，也可以监听Http会话的active、paasivate情况等。该监听器需要使用到如下多个接口类：</span><br><span class="line">   ● HttpSessionListener：监听HttpSession的操作。</span><br><span class="line">         当创建一个Session时，激发session Created (SessionEvent se)方法；</span><br><span class="line">         当销毁一个Session时，激发sessionDestroyed (HttpSessionEvent se)方法。</span><br><span class="line">   ● HttpSessionActivationListener：用于监听Http会话active、passivate情况。</span><br><span class="line">   ● HttpSessionAttributeListener：监听HttpSession中属性的操作。</span><br><span class="line">         当在Session增加一个属性时，激发attributeAdded(HttpSessionBindingEvent se) 方法；</span><br><span class="line">         当在Session删除一个属性时，激发attributeRemoved(HttpSessionBindingEvent se)方法；</span><br><span class="line">         当在Session属性被重新设置时，激发attributeReplaced(HttpSessionBindingEvent se) 方法。</span><br><span class="line">   ● HttpSessionBindingListener：监听HttpSession绑定和解绑</span><br><span class="line">   ● HttpSessionIdListener：</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"> 3．对客户端请求进行监听</span><br><span class="line"> 对客户端的请求进行监听是在Servlet 2.4规范中新添加的一项技术，使用的接口类如下：</span><br><span class="line">     ● ServletRequestListener接口类。</span><br><span class="line">     ● ServletRequestAttrubuteListener接口类</span><br><span class="line">   </span><br></pre></td></tr></table></figure>


<p>#方式二：基于ServletListenerRegistrationBean</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import com.d4c.custombean.filter.SecondFilter;</span><br><span class="line">import com.d4c.custombean.listener.MyServletListener;</span><br><span class="line">import com.d4c.custombean.servlet.ThirdServlet;</span><br><span class="line">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class MyRegisterBean &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletListenerRegistrationBean servletListenerRegistrationBean()&#123;</span><br><span class="line">        ServletListenerRegistrationBean bean &#x3D; new ServletListenerRegistrationBean();</span><br><span class="line">        &#x2F;&#x2F;注册自定义Listener</span><br><span class="line">        bean.setListener(new MyServletListener());</span><br><span class="line">        bean.setEnabled(true);</span><br><span class="line">        &#x2F;&#x2F;路径</span><br><span class="line">        bean.setOrder(3);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>引用文章</strong></p>
<p><a href="https://www.cnblogs.com/kongxianghao/p/6961843.html">java web Listener的简单使用案例</a><br><a href="https://blog.csdn.net/qq1021979964/article/details/88633586">Spring Boot—(3)整合Web三大组件（Servlet，Filter过滤器，Listener监听器</a><br><a href="https://blog.csdn.net/zhizhuodewo6/article/details/82019409">servlet注解 @WebListener</a><br><a href="https://www.iteye.com/blog/hy2012-2207902">HttpSessionListener与HttpSessionBindingListener之间区别</a></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>listener</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义servlet</title>
    <url>/2020/08/10/spring-boot/%E8%87%AA%E5%AE%9A%E4%B9%89servlet/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#两种方式</p>
<ul>
<li>@WebServlet注解+@ServletComponentScan</li>
<li>通过配置FilterRegistrationBean的方式</li>
</ul>
<hr>
<p>##1. @WebServlet注解+@ServletComponentScan</p>
<p><code>servlet</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.servlet;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@WebServlet(name&#x3D;&quot;FirstServlet&quot;,urlPatterns &#x3D; &quot;&#x2F;servlet&#x2F;*&quot;,loadOnStartup &#x3D; 1)</span><br><span class="line">public class FirstServlet implements Servlet &#123;</span><br><span class="line"></span><br><span class="line">    private ServletConfig servletConfig;</span><br><span class="line">    private ServletRequest servletRequest;</span><br><span class="line">    private ServletResponse servletResponse;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(ServletConfig config) throws ServletException &#123;</span><br><span class="line">        this.servletConfig &#x3D; config;</span><br><span class="line">        log.info(&quot;FirstServlet init-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ServletConfig getServletConfig() &#123;</span><br><span class="line">        return servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException &#123;</span><br><span class="line">        log.info(&quot;FirstServlet service-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getServletInfo() &#123;</span><br><span class="line">        return servletRequest.getServletContext().getServerInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;FirstServlet destroy-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>启动类</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line">@ServletComponentScan</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class CustomBeanApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(CustomBeanApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@WebServlet常用属性</strong></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">是否必须</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">asyncSupported</td>
<td align="left">boolean</td>
<td align="left">否</td>
<td align="left">指定Servlet是否支持异步操作模式</td>
</tr>
<tr>
<td align="left">displayName</td>
<td align="left">String</td>
<td align="left">否</td>
<td align="left">指定Servlet显示名称</td>
</tr>
<tr>
<td align="left">initParams</td>
<td align="left">WebInitParam[]</td>
<td align="left">否</td>
<td align="left">配置初始化参数</td>
</tr>
<tr>
<td align="left">loadOnStartup</td>
<td align="left">int</td>
<td align="left">否</td>
<td align="left">标记容器是否在应用启动时就加载这个Servlet</td>
</tr>
<tr>
<td align="left">name</td>
<td align="left">String</td>
<td align="left">否</td>
<td align="left">指定Servlet名称</td>
</tr>
<tr>
<td align="left">urlPatterns/value</td>
<td align="left">String[]</td>
<td align="left">否</td>
<td align="left">这两个属性作用相同，指定Servlet处理的url</td>
</tr>
</tbody></table>
<p><strong>也可以继承HttpServlet</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.servlet;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@WebServlet(name&#x3D;&quot;SecondServlet&quot;,urlPatterns &#x3D; &quot;&#x2F;servlet2&#x2F;*&quot;,loadOnStartup &#x3D; 2)</span><br><span class="line">public class SecondServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        log.info(&quot;SecondServlet doGet-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        log.info(&quot;SecondServlet doPost-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init() throws ServletException &#123;</span><br><span class="line">        log.info(&quot;SecondServlet init-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;SecondServlet destroy-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>##2.通过配置FilterRegistrationBean的方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.servlet;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@WebServlet(name&#x3D;&quot;ThirdServlet&quot;,urlPatterns &#x3D; &quot;&#x2F;servlet3&#x2F;*&quot;,loadOnStartup &#x3D; 3)</span><br><span class="line">public class ThirdServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        log.info(&quot;ThirdServlet doGet-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        log.info(&quot;ThirdServlet doPost-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init() throws ServletException &#123;</span><br><span class="line">        log.info(&quot;ThirdServlet init-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;ThirdServlet destroy-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import com.d4c.custombean.filter.SecondFilter;</span><br><span class="line">import com.d4c.custombean.servlet.ThirdServlet;</span><br><span class="line">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class MyRegisterBean &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean servletRegistrationBean()&#123;</span><br><span class="line">        ServletRegistrationBean bean &#x3D; new ServletRegistrationBean();</span><br><span class="line">        &#x2F;&#x2F;注册自定义过滤器</span><br><span class="line">        bean.setServlet(new ThirdServlet());</span><br><span class="line">        &#x2F;&#x2F;过滤器名称</span><br><span class="line">        bean.setName(&quot;ThirdServlet&quot;);</span><br><span class="line">        &#x2F;&#x2F;过滤所有路径</span><br><span class="line">        bean.addUrlMappings(&quot;&#x2F;servlet3&quot;);</span><br><span class="line">        &#x2F;&#x2F;优先级</span><br><span class="line">        bean.setOrder(3);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>推荐用第二种</strong></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义过滤器filter</title>
    <url>/2020/08/11/spring-boot/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8filter/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#这里介绍两种几种种自定义filter的方式</p>
<ul>
<li>通过<code>@WebFilter</code>+<code>@ServletComponentScan</code>的方式</li>
<li>通过配置<code>FilterRegistrationBean</code>的方式</li>
<li>通过加注解<code>@component</code>等注入的方式</li>
</ul>
<p>##1.通过<code>@WebFilter</code>+<code>@ServletComponentScan</code>的方式</p>
<p><code>filter类</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.filter;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Order(1)</span><br><span class="line">@WebFilter(filterName &#x3D; &quot;firstName&quot;,urlPatterns &#x3D; &quot;&#x2F;hello&#x2F;*&quot;)</span><br><span class="line">public class FirstFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        log.info(&quot;FirstFilter init--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        log.info(&quot;FirstFilter doFilter--------&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;FirstFilter destroy--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>启动类上要加<code>@ServletComponentScan</code></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line">@ServletComponentScan</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class CustomBeanApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(CustomBeanApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>@WebFilter常用属性</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">是否必需</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">asyncSupported</td>
<td align="center">boolean</td>
<td align="center">否</td>
<td align="center">指定Filter是否支持异步模式</td>
</tr>
<tr>
<td align="center">dispatcherTypes</td>
<td align="center">DispatcherType[]</td>
<td align="center">否</td>
<td align="center">指定Filter对哪种方式的请求进行过滤。 支持的属性：ASYNC、ERROR、FORWARD、INCLUDE、REQUEST； 默认过滤所有方式的请求</td>
</tr>
<tr>
<td align="center">filterName</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">Filter名称</td>
</tr>
<tr>
<td align="center">initParams</td>
<td align="center">WebInitParam[]</td>
<td align="center">否</td>
<td align="center">配置参数</td>
</tr>
<tr>
<td align="center">displayName</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">Filter显示名</td>
</tr>
<tr>
<td align="center">servletNames</td>
<td align="center">String[]</td>
<td align="center">否</td>
<td align="center">指定对哪些Servlet进行过滤</td>
</tr>
<tr>
<td align="center">urlPatterns/value</td>
<td align="center">String[]</td>
<td align="center">否</td>
<td align="center">两个属性作用相同，指定拦截的路径</td>
</tr>
</tbody></table>
<p><strong>过滤器的urlPatterns的过滤路径规则：</strong></p>
<ul>
<li>1.全路径匹配： /hello/do.html</li>
<li>2.部分路径匹配： /hello/*</li>
<li>3.通配符匹配 ：/*</li>
<li>4.后缀名匹配 ：*.html(注意:前面不加/)</li>
</ul>
<p><strong>@Order</strong><br>@Orde注解是决定着执行顺序，而不是类的初始化顺序。order数字越小，优先级越高。<code>最好，统一用一种方式定义filter，否则@Order可能不起作用（混乱）。</code></p>
<p>#2.通过配置<code>FilterRegistrationBean</code>的方式</p>
<p><code>filter类</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.filter;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">public class SecondFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        log.info(&quot;SecondFilter init--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        log.info(&quot;SecondFilter doFilter--------&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;SecondFilter destroy--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>配置类</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import com.d4c.custombean.filter.SecondFilter;</span><br><span class="line">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class MyRegisterBean &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean filterRegistrationBean()&#123;</span><br><span class="line">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean();</span><br><span class="line">        &#x2F;&#x2F;注册自定义过滤器</span><br><span class="line">        bean.setFilter(new SecondFilter());</span><br><span class="line">        &#x2F;&#x2F;过滤器名称</span><br><span class="line">        bean.setName(&quot;second filter bean&quot;);</span><br><span class="line">        &#x2F;&#x2F;过滤所有路径</span><br><span class="line">        bean.addUrlPatterns(&quot;&#x2F;do&#x2F;*&quot;);</span><br><span class="line">        &#x2F;&#x2F;优先级，数字越小，优先级越高</span><br><span class="line">        bean.setOrder(2);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>#3.通过加注解<code>@Component</code>等注入的方式<br><strong>虽然这种方式能实现filter，但是不推荐。最好第一种或第二种方式选其一</strong></p>
<p><code>filter类</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.d4c.custombean.filter;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Order(3)</span><br><span class="line">&#x2F;&#x2F;或者用@Configuration</span><br><span class="line">@Component   </span><br><span class="line">public class ThirdFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        log.info(&quot;ThirdFilter init--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        log.info(&quot;ThirdFilter doFilter--------&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;ThirdFilter destroy--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>filter</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记-spring-boot跨域问题</title>
    <url>/2020/08/07/spring-boot/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-spring-boot%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>CORS(Cross Origin Resource Sharing,跨域资源共享)机制允许web应用服务器允许跨域访问控制，从而是跨域数据传输得以安全进行。</p>
</blockquote>
<h1 id="1-跨域"><a href="#1-跨域" class="headerlink" title="1.跨域"></a>1.跨域</h1><p>##1.1含义<br>1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。<br>最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”。</p>
<ul>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ul>
<p>举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是<code>http://</code>，域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略）。它的同源情况如下。<br><code>http://www.example.com/dir2/other.html</code>：同源<br><code>http://example.com/dir/other.html</code>：不同源（域名不同）<br><code>http://v2.www.example.com/dir/other.html</code>：不同源（域名不同）<br><code>http://www.example.com:81/dir/other.html</code>：不同源（端口不同）<br>##1.2 目的<br>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。<br>设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？</p>
<p>很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。<br>由此可见，”同源政策”是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。</p>
<p>##1.3 限制范围<br>随着互联网的发展，”同源政策”越来越严格。目前，如果非同源，共有三种行为受到限制。</p>
<ul>
<li><p>（1） Cookie、LocalStorage 和 IndexDB 无法读取。</p>
</li>
<li><p>（2） DOM 无法获得。</p>
</li>
<li><p>（3） AJAX 请求不能发送。</p>
</li>
</ul>
<p>虽然这些限制是必要的，但是有时很不方便，合理的用途也受到影响。下面，我将详细介绍，如何规避上面三种限制。</p>
<p>引用自<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">浏览器同源政策及其规避方法</a></p>
<p>#2.在spring boot中允许跨域访问</p>
<p>##2.1方法级别的跨域访问<br>spring boot提供了一种简单的声明式方法来实现跨域请求。使用@CrossOrigin注解实现。</p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
</search>
