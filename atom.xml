<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>D4C的世界</title>
  
  <subtitle>dancer4code</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-31T09:34:46.783Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>d4c</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/09/02/spring-boot/%E5%85%B3%E4%BA%8E%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%EF%BC%8Chibernate%E7%9A%84validator/"/>
    <id>http://example.com/2021/09/02/spring-boot/%E5%85%B3%E4%BA%8E%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%EF%BC%8Chibernate%E7%9A%84validator/</id>
    <published>2021-09-02T01:16:12.704Z</published>
    <updated>2021-08-31T09:34:46.783Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于参数校验，hibernate的validator-的校验"><a href="#关于参数校验，hibernate的validator-的校验" class="headerlink" title="关于参数校验，hibernate的validator 的校验"></a>关于参数校验，hibernate的validator 的校验</h1><h2 id="1-注解式校验"><a href="#1-注解式校验" class="headerlink" title="1.注解式校验"></a>1.注解式校验</h2><h3 id="1-1-常见校验注解"><a href="#1-1-常见校验注解" class="headerlink" title="1.1 常见校验注解"></a>1.1 常见校验注解</h3><blockquote><p><strong>定义的校验类型</strong></p><p>@Null 验证对象是否为null<br>@NotNull 验证对象是否不为null, 无法查检长度为0的字符串<br>@NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.<br>@NotEmpty 检查约束元素是否为NULL或者是EMPTY.<br>@CreditCardNumber信用卡验证<br>@Email 验证是否是邮件地址，如果为null,不进行验证，算通过验证。<br>@URL(protocol=,host=, port=,regexp=, flags=) ip地址校验</p><p><strong>Booelan检查</strong></p><p>@AssertTrue 验证 Boolean 对象是否为 true<br>@AssertFalse 验证 Boolean 对象是否为 false</p><p><strong>长度检查</strong><br>@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内<br>@Length(min=, max=) Validates that the annotated string is between min and max included.</p><p><strong>日期检查</strong><br>@Past 验证 Date 和 Calendar 对象是否在当前时间之前<br>@Future 验证 Date 和 Calendar 对象是否在当前时间之后<br>@Pattern 验证 String 对象是否符合正则表达式的规则</p><p><strong>数值检查，</strong>建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为””时无法转换为int，但可以转换为Stirng为””,Integer为null<br>@Min 验证 Number 和 String 对象是否大等于指定的值<br>@Max 验证 Number 和 String 对象是否小等于指定的值<br>@DecimalMax 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度<br>@DecimalMin 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度<br>@Digits 验证 Number 和 String 的构成是否合法<br>@Digits(integer=,fraction=) 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。<br>@Range(min=, max=) Checks whether the annotated value lies between (inclusive) the specified minimum and maximum.</p></blockquote><h3 id="1-2-实现简单的注解式校验栗子"><a href="#1-2-实现简单的注解式校验栗子" class="headerlink" title="1.2 实现简单的注解式校验栗子"></a>1.2 实现简单的注解式校验栗子</h3><h4 id="1-2-1-请求实体"><a href="#1-2-1-请求实体" class="headerlink" title="1.2.1 请求实体"></a>1.2.1 请求实体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonReqVO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 互感器主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;业务类型不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;数据不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;开始时间不能为空！&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^((([0-9]&#123;3&#125;[1-9]|[0-9]&#123;2&#125;[1-9][0-9]&#123;1&#125;|[0-9]&#123;1&#125;[1-9][0-9]&#123;2&#125;|[1-9][0-9]&#123;3&#125;)-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]&#123;2&#125;)(0[4]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29))\\s+([0-1]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$&quot;,message = &quot;日期格式不正确&quot;)</span></span><br><span class="line"><span class="comment">//    @DateTime(format = &quot;yyyy-MM-dd&quot;, message = &quot;时间格式错误，格式应为&#x27;yyyy-MM-dd&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String startDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;name不能为空&quot;,groups = S1.class)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Range(min = 1,max = 120,message = &quot;年龄必须在1-120之间&quot;,groups = S1.class)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;address不能为空&quot;,groups = S2.class)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;phone不能为空&quot;,groups = S2.class)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">S1</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">S2</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-controller"><a href="#1-2-2-controller" class="headerlink" title="1.2.2 controller"></a>1.2.2 controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;t3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(<span class="meta">@RequestBody</span> CommonReqVO&lt;UserVO&gt; userVO)</span></span>&#123;</span><br><span class="line">        ValidateUtil.validateParams(userVO,<span class="string">&quot;请求参数不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;01&quot;</span>.equals(userVO.getType()))&#123;</span><br><span class="line">            ValidateUtil.validateParams(userVO,<span class="string">&quot;请求参数不能为空&quot;</span>,UserVO.S1.class);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;02&quot;</span>.equals(userVO.getType()))&#123;</span><br><span class="line">            ValidateUtil.validateParams(userVO,<span class="string">&quot;请求参数不能为空&quot;</span>,UserVO.S2.class);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">&quot;请求参数type类型不匹配！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;t3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;t4&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test4</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> CommonReqVO&lt;UserVO&gt; userVO)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;4&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-2-3-统一异常处理类及相关类"><a href="#1-2-3-统一异常处理类及相关类" class="headerlink" title="1.2.3 统一异常处理类及相关类"></a>1.2.3 统一异常处理类及相关类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;validator.showField:false&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean showFile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">handleCustomException</span><span class="params">(CustomException e)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;【用户自定义异常】&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ResultInfoUtil.error(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpMediaTypeNotSupportedException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">handleReqException</span><span class="params">(HttpMediaTypeNotSupportedException e)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;【请求类型不支持异常】&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">if</span> (e.getMessage().contains(<span class="string">&quot;not supported&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, <span class="string">&quot;请求Content-Type不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">handleReqBodyException</span><span class="params">(HttpMessageNotReadableException e)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;【请求体异常】&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">if</span> (e.getMessage().contains(<span class="string">&quot;Required request body is missing&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, <span class="string">&quot;请求体不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">handleOtherException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;【系统异常】&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理validation框架中的&#123;<span class="doctag">@link</span> MethodArgumentNotValidException&#125;异常</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;该异常一般出在用&#123;<span class="doctag">@code</span> <span class="doctag">@RequestBody</span>&#125;注解标记的参数校验，在对象中的参数有问题是抛出&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e &#123;<span class="doctag">@link</span> MethodArgumentNotValidException&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ResultInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">doNoValidExceptionHandler</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;捕捉到参数校验异常： [&#123;&#125;]&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> validationExceptionHandler(e.getBindingResult(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理validation框架中的&#123;<span class="doctag">@link</span> ConstraintDeclarationException&#125;异常</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;该异常一般出在用&#123;<span class="doctag">@code</span> <span class="doctag">@RequestParam</span>&#125;注解标记的参数校验&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e &#123;<span class="doctag">@link</span> ConstraintDeclarationException&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ResultInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ConstraintDeclarationException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">doNoValidExceptionHandler</span><span class="params">(ConstraintDeclarationException e)</span> </span>&#123;</span><br><span class="line">        String errorMsg = e.getMessage();</span><br><span class="line">        log.info(<span class="string">&quot;捕捉到参数校验异常： [&#123;&#125;]&quot;</span>, errorMsg, e);</span><br><span class="line">        <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理validation框架中的&#123;<span class="doctag">@link</span> BindException&#125;异常</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;该异常一般出在用&#123;<span class="doctag">@code</span> <span class="doctag">@RequestBody</span>&#125;注解标记的参数校验，在对象嵌套类型参数有问题时抛出&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e &#123;<span class="doctag">@link</span> BindException&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ResultInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">doNoValidExceptionHandler</span><span class="params">(BindException e)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;捕捉到参数校验异常： [&#123;&#125;]&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> validationExceptionHandler(e.getBindingResult(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理validation框架的异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bindingResult &#123;<span class="doctag">@link</span> BindingResult&#125; 异常绑定的对象信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message       异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ResultInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ResultInfo <span class="title">validationExceptionHandler</span><span class="params">(BindingResult bindingResult, String message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认捕获第一个不符合校验规则的错误信息</span></span><br><span class="line">        <span class="comment">//错误字段对象</span></span><br><span class="line">        List&lt;FieldError&gt; fieldErrors = bindingResult.getFieldErrors();</span><br><span class="line">        List&lt;String&gt; errorMessages = <span class="keyword">new</span> ArrayList&lt;&gt;(fieldErrors.size());</span><br><span class="line">        <span class="keyword">if</span> (showFile)&#123;</span><br><span class="line">            fieldErrors.stream().forEach(e-&gt;&#123;</span><br><span class="line">                errorMessages.add(e.getField()+<span class="string">&quot;-&quot;</span>+e.getDefaultMessage());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            fieldErrors.stream().forEach(e-&gt;&#123;</span><br><span class="line">                errorMessages.add(e.getDefaultMessage());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;捕捉到参数校验异常详情： &#123;&#125;&quot;</span>, errorMessages);</span><br><span class="line">        <span class="keyword">return</span> ResultInfoUtil.error(<span class="number">0</span>, errorMessages.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultInfo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *返回码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *返回提示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *返回具体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultInfoUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultInfo <span class="title">success</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        ResultInfo result = <span class="keyword">new</span> ResultInfo();</span><br><span class="line">        ResultInfoEnum successEnum = ResultInfoEnum.SUCCESS;</span><br><span class="line">        result.setCode(successEnum.getCode());</span><br><span class="line">        result.setMsg(successEnum.getMsg());</span><br><span class="line">        result.setData(object);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultInfo <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultInfo <span class="title">error</span><span class="params">(Integer code, String msg)</span> </span>&#123;</span><br><span class="line">        ResultInfo result = <span class="keyword">new</span> ResultInfo();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(ResultInfoEnum resultInfoEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(resultInfoEnum.getMsg());</span><br><span class="line">        <span class="keyword">this</span>.code = resultInfoEnum.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.code = ResultInfoEnum.FAILED.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意上面配置了 failFast 为false。所以会校验全部参数</p></blockquote><h4 id="1-2-4-请求及响应"><a href="#1-2-4-请求及响应" class="headerlink" title="1.2.4 请求及响应"></a>1.2.4 请求及响应</h4><p><strong>请求</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>响应</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;[data-数据不能为空, type-业务类型不能为空, startDate-开始时间不能为空！]&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-编程式校验"><a href="#2-编程式校验" class="headerlink" title="2.编程式校验"></a>2.编程式校验</h2><h3 id="2-1-校验相关类"><a href="#2-1-校验相关类" class="headerlink" title="2.1 校验相关类"></a>2.1 校验相关类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateUtil</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Validator validator;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用快速失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Boolean failFast;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否显示错误字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Boolean showField;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFailFast</span><span class="params">(Boolean failFast)</span> </span>&#123;</span><br><span class="line">        ValidateUtil.failFast = failFast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setShowField</span><span class="params">(Boolean showField)</span> </span>&#123;</span><br><span class="line">        ValidateUtil.showField = showField;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 校验的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validate(T obj, Class... groupClasses) &#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolations;</span><br><span class="line">        <span class="keyword">if</span> (groupClasses != <span class="keyword">null</span> &amp;&amp; groupClasses.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            constraintViolations = validator.validate(obj, groupClasses);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            constraintViolations = validator.validate(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> constraintViolations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证请求参数是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o   参数对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 报错信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkIsNotNull</span><span class="params">(Object o, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">validateParams</span><span class="params">(T t, String msg, Class... groupClasses)</span> </span>&#123;</span><br><span class="line">        checkIsNotNull(t, msg);</span><br><span class="line">        Set&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolationSet = validate(t, groupClasses);</span><br><span class="line">        List&lt;String&gt; resultString = <span class="keyword">new</span> ArrayList&lt;&gt;(constraintViolationSet.size());</span><br><span class="line">        <span class="keyword">if</span> (!constraintViolationSet.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (showField)&#123;</span><br><span class="line">                constraintViolationSet.stream().forEach(c -&gt; &#123;</span><br><span class="line">                    resultString.add(c.getPropertyPath().toString() + <span class="string">&quot;-&quot;</span> + c.getMessage());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                constraintViolationSet.stream().forEach(c -&gt; &#123;</span><br><span class="line">                    resultString.add(c.getMessage());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(resultString.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入validator</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> validatorBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setValidator</span><span class="params">(Validator validatorBean)</span> </span>&#123;</span><br><span class="line">        validator = validatorBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;validator.failFast:true&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean failFast;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;validator.showField:false&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean showField;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">validator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValidatorFactory validatorFactory = Validation.byProvider(HibernateValidator.class)</span><br><span class="line">                .configure()</span><br><span class="line">                <span class="comment">// 快速失败</span></span><br><span class="line">                .failFast(failFast)</span><br><span class="line">                .buildValidatorFactory();</span><br><span class="line">        <span class="keyword">return</span> validatorFactory.getValidator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给ValidateUtil初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initValidateUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);</span><br><span class="line">        Validator validator = (Validator) applicationContext.getBean(<span class="string">&quot;validator&quot;</span>);</span><br><span class="line">        ValidateUtil.setValidator(validator);</span><br><span class="line">        ValidateUtil.setFailFast(failFast);</span><br><span class="line">        ValidateUtil.setShowField(showField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#校验相关配置</span></span><br><span class="line"><span class="attr">validator:</span></span><br><span class="line">  <span class="comment">#快速失败</span></span><br><span class="line">  <span class="attr">failFast:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#错误提示是否显示错误字段</span></span><br><span class="line">  <span class="attr">showField:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="3-自定义校验注解"><a href="#3-自定义校验注解" class="headerlink" title="3.自定义校验注解"></a>3.自定义校验注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = DateTime.DateTimeValidator.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DateTime &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;格式错误&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">format</span><span class="params">()</span> <span class="keyword">default</span> &quot;yyyyMM&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DateTimeValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">DateTime</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> DateTime dateTime;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(DateTime dateTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 如果 value 为空则不进行格式验证，为空验证可以使用 @NotBlank @NotNull @NotEmpty 等注解来进行控制，职责分离</span></span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String format = dateTime.format();</span><br><span class="line">            <span class="keyword">if</span> (value.length() != format.length()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(format);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                simpleDateFormat.parse(value);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-使用方法"><a href="#3-1-使用方法" class="headerlink" title="3.1 使用方法"></a>3.1 使用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DateTime(format = &quot;yyyy-MM-dd&quot;, message = &quot;时间格式错误，格式应为&#x27;yyyy-MM-dd&#x27;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String startDate;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>spring-cloud之zuul(转载)</title>
    <link href="http://example.com/2020/10/04/spring-cloud/spring-cloud%E4%B9%8Bzuul(%E8%BD%AC%E8%BD%BD)/"/>
    <id>http://example.com/2020/10/04/spring-cloud/spring-cloud%E4%B9%8Bzuul(%E8%BD%AC%E8%BD%BD)/</id>
    <published>2020-10-04T13:01:24.000Z</published>
    <updated>2020-10-28T08:35:32.967Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Zuul网关"><a href="#1-Zuul网关" class="headerlink" title="1.Zuul网关"></a>1.Zuul网关</h1><p>通过前面的学习，使用Spring Cloud实现微服务的架构基本成型，大致是这样的：</p><p><img src="https://upload-images.jianshu.io/upload_images/19382524-9302ac23b9f88e21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1525674644660.png"></p><p>我们使用Spring Cloud Netflix中的Eureka实现了服务注册中心以及服务注册与发现；而服务间通过Ribbon或Feign实现服务的消费以及均衡负载；通过Spring Cloud Config实现了应用多环境的外部化配置以及版本管理。为了使得服务集群更为健壮，使用Hystrix的融断机制来避免在微服务架构中个别服务出现异常时引起的故障蔓延。</p><p>在该架构中，我们的服务集群包含：内部服务Service A和Service B，他们都会注册与订阅服务至Eureka Server，而Open Service是一个对外的服务，通过均衡负载公开至服务调用方。我们把焦点聚集在对外服务这块，直接暴露我们的服务地址，这样的实现是否合理，或者是否有更好的实现方式呢？</p><p>先来说说这样架构需要做的一些事儿以及存在的不足：</p><ul><li>首先，破坏了服务无状态特点。<ul><li>为了保证对外服务的安全性，我们需要实现对服务访问的权限控制，而开放服务的权限控制机制将会贯穿并污染整个开放服务的业务逻辑，这会带来的最直接问题是，破坏了服务集群中REST API无状态的特点。</li><li> 从具体开发和测试的角度来说，在工作中除了要考虑实际的业务逻辑之外，还需要额外考虑对接口访问的控制处理。</li></ul></li><li>其次，无法直接复用既有接口。<ul><li>当我们需要对一个即有的集群内访问接口，实现外部服务访问时，我们不得不通过在原有接口上增加校验逻辑，或增加一个代理调用来实现权限控制，无法直接复用原有的接口。</li></ul></li></ul><p>面对类似上面的问题，我们要如何解决呢？答案是：服务网关！</p><p>为了解决上面这些问题，我们需要将权限控制这样的东西从我们的服务单元中抽离出去，而最适合这些逻辑的地方就是处于对外访问最前端的地方，我们需要一个更强大一些的均衡负载器的 服务网关。</p><p>服务网关是微服务架构中一个不可或缺的部分。通过服务网关统一向外系统提供REST API的过程中，除了具备服务路由、均衡负载功能之外，它还具备了<code>权限控制</code>等功能。Spring Cloud Netflix中的Zuul就担任了这样的一个角色，为微服务架构提供了前门保护的作用，同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的可复用性和可测试性。</p><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1.简介"></a>1.1.简介</h2><p>官网：<a href="https://github.com/Netflix/zuul">https://github.com/Netflix/zuul</a><br><img src="https://upload-images.jianshu.io/upload_images/19382524-6cb6e13212fc7da2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1525675168152.png"></p><h2 id="1-2-Zuul加入后的架构"><a href="#1-2-Zuul加入后的架构" class="headerlink" title="1.2.Zuul加入后的架构"></a>1.2.Zuul加入后的架构</h2><p><img src="https://upload-images.jianshu.io/upload_images/19382524-bc2a7ffc211ec593.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1525675648881.png"></p><ul><li>不管是来自于客户端（PC或移动端）的请求，还是服务内部调用。一切对服务的请求都会经过Zuul这个网关，然后再由网关来实现 鉴权、动态路由等等操作。Zuul就是我们服务的统一入口。</li></ul><h2 id="1-3-快速入门"><a href="#1-3-快速入门" class="headerlink" title="1.3.快速入门"></a>1.3.快速入门</h2><h3 id="1-3-1-新建工程"><a href="#1-3-1-新建工程" class="headerlink" title="1.3.1.新建工程"></a>1.3.1.新建工程</h3><p>添加Zuul依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-2-编写启动类"><a href="#1-3-2-编写启动类" class="headerlink" title="1.3.2.编写启动类"></a>1.3.2.编写启动类</h3><p>通过<code>@EnableZuulProxy </code>注解开启Zuul的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">// 开启Zuul的网关功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ZuulDemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-编写配置"><a href="#1-3-3-编写配置" class="headerlink" title="1.3.3.编写配置"></a>1.3.3.编写配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6003</span><span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">zuul-demo#指定服务名</span></span><br></pre></td></tr></table></figure><h3 id="1-3-4-编写路由规则"><a href="#1-3-4-编写路由规则" class="headerlink" title="1.3.4.编写路由规则"></a>1.3.4.编写路由规则</h3><p>映射规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">account-demo:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/account-demo/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://127.0.0.1:6060#</span> <span class="string">映射路径对应的实际url地址</span></span><br></pre></td></tr></table></figure><p>我们将符合<code>path</code> 规则的一切请求，都代理到 <code>url</code>参数指定的地址</p><p>本例中，我们将 <code>/account-demo/**</code>开头的请求，代理到<a href="http://127.0.0.1:6060/">http://127.0.0.1:6060</a></p><h3 id="1-3-5-启动测试："><a href="#1-3-5-启动测试：" class="headerlink" title="1.3.5.启动测试："></a>1.3.5.启动测试：</h3><p>访问的路径中需要加上配置规则的映射路径，我们访问：<a href="http://127.0.0.1:6003/account-demo/account/get/2">http://127.0.0.1:6003/account-demo/account/get/2</a></p><p><img src="https://upload-images.jianshu.io/upload_images/19382524-6f517100c20eac9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="1-4-面向服务的路由"><a href="#1-4-面向服务的路由" class="headerlink" title="1.4.面向服务的路由"></a>1.4.面向服务的路由</h2><p>在刚才的路由规则中，我们把路径对应的服务地址写死了！如果同一服务有多个实例的话，这样做显然就不合理了。</p><p>我们应该根据服务的名称，去Eureka注册中心查找 服务对应的所有实例列表，然后进行动态路由才对！</p><h3 id="1-4-1-添加Eureka客户端依赖"><a href="#1-4-1-添加Eureka客户端依赖" class="headerlink" title="1.4.1.添加Eureka客户端依赖"></a>1.4.1.添加Eureka客户端依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-2-开启Eureka客户端发现功能"><a href="#1-4-2-开启Eureka客户端发现功能" class="headerlink" title="1.4.2.开启Eureka客户端发现功能"></a>1.4.2.开启Eureka客户端发现功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">// 开启Zuul的网关功能</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ZuulDemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-添加Eureka配置，获取服务信息"><a href="#1-4-3-添加Eureka配置，获取服务信息" class="headerlink" title="1.4.3.添加Eureka配置，获取服务信息"></a>1.4.3.添加Eureka配置，获取服务信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span> <span class="comment"># 获取服务列表的周期：5s</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:6001/eureka/,http://127.0.0.1:6002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="1-4-4-修改映射配置，通过服务名称获取"><a href="#1-4-4-修改映射配置，通过服务名称获取" class="headerlink" title="1.4.4.修改映射配置，通过服务名称获取"></a>1.4.4.修改映射配置，通过服务名称获取</h3><p>因为已经有了Eureka客户端，我们可以从Eureka获取服务的地址信息，因此映射时无需指定IP地址，而是通过服务名称来访问，而且Zuul已经集成了Ribbon的负载均衡功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">account-demo:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/account-demo/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">account-demo</span> <span class="comment"># 指定服务名称</span></span><br></pre></td></tr></table></figure><h2 id="1-5-简化的路由配置"><a href="#1-5-简化的路由配置" class="headerlink" title="1.5.简化的路由配置"></a>1.5.简化的路由配置</h2><p>在刚才的配置中，我们的规则是这样的：</p><ul><li><code>zuul.routes.&lt;route&gt;.path=/xxx/**</code>： 来指定映射路径。<code>&lt;route&gt;</code>是自定义的路由名</li><li><code>zuul.routes.&lt;route&gt;.serviceId=/account-demo</code>：来指定服务名。</li></ul><p>而大多数情况下，我们的<code>&lt;route&gt;</code>路由名称往往和 服务名会写成一样的。因此Zuul就提供了一种简化的配置语法：<code>zuul.routes.&lt;serviceId&gt;=&lt;path&gt;</code></p><p>比方说上面我们关于account-demo的配置可以简化为一条：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">account-demo:</span> <span class="string">/account-demo/**</span> <span class="comment"># 这里是映射路径</span></span><br></pre></td></tr></table></figure><p>省去了对服务名称的配置。</p><h2 id="1-6-默认的路由规则"><a href="#1-6-默认的路由规则" class="headerlink" title="1.6.默认的路由规则"></a>1.6.默认的路由规则</h2><p>在使用Zuul的过程中，上面讲述的规则已经大大的简化了配置项。但是当服务较多时，配置也是比较繁琐的。因此Zuul就指定了默认的路由规则：</p><ul><li>默认情况下，一切服务的映射路径就是服务名本身。<ul><li>例如服务名为：<code>account-demo</code>，则默认的映射路径就是：<code>/account-demo/**</code></li></ul></li></ul><p>也就是说，刚才的映射规则我们完全不配置也是OK的，不信就试试看。</p><h2 id="1-7-路由前缀"><a href="#1-7-路由前缀" class="headerlink" title="1.7.路由前缀"></a>1.7.路由前缀</h2><p>配置示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 添加路由前缀</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">      <span class="attr">account-demo:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/account-demo/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">account-demo</span> <span class="comment"># 指定服务名称</span></span><br></pre></td></tr></table></figure><p>我们通过<code>zuul.prefix=/api</code>来指定了路由的前缀，这样在发起请求时，路径就要以/api开头。</p><p>路径<code>/api/account-demo/account/get/1</code>将会被代理到<code>account-demo/account/get/1</code></p><h2 id="1-8-过滤器"><a href="#1-8-过滤器" class="headerlink" title="1.8.过滤器"></a>1.8.过滤器</h2><p>Zuul作为网关的其中一个重要功能，就是实现请求的鉴权。而这个动作我们往往是通过Zuul提供的过滤器来实现的。</p><h3 id="1-8-1-ZuulFilter"><a href="#1-8-1-ZuulFilter" class="headerlink" title="1.8.1.ZuulFilter"></a>1.8.1.ZuulFilter</h3><p>ZuulFilter是过滤器的顶级父类。在这里我们看一下其中定义的4个最重要的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ZuulFilter implements IZuulFilter&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span></span>;<span class="comment">// 来自IZuulFilter</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException</span>;<span class="comment">// IZuulFilter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>shouldFilter</code>：返回一个<code>Boolean</code>值，判断该过滤器是否需要执行。返回true执行，返回false不执行。</li><li><code>run</code>：过滤器的具体业务逻辑。</li><li><code>filterType</code>：返回字符串，代表过滤器的类型。包含以下4种：<ul><li><code>pre</code>：请求在被路由之前执行</li><li><code>routing</code>：在路由请求时调用</li><li><code>post</code>：在routing和errror过滤器之后调用</li><li><code>error</code>：处理请求时发生错误调用</li></ul></li><li><code>filterOrder</code>：通过返回的int值来定义过滤器的执行顺序，数字越小优先级越高。</li></ul><h3 id="1-8-2-过滤器执行生命周期："><a href="#1-8-2-过滤器执行生命周期：" class="headerlink" title="1.8.2.过滤器执行生命周期："></a>1.8.2.过滤器执行生命周期：</h3><p>这张是Zuul官网提供的请求生命周期图，清晰的表现了一个请求在各个过滤器的执行顺序。</p><p>​    <img src="https://upload-images.jianshu.io/upload_images/19382524-952a99b049cfd419.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>正常流程：<ul><li>请求到达首先会经过pre类型过滤器，而后到达routing类型，进行路由，请求就到达真正的服务提供者，执行请求，返回结果后，会到达post过滤器。而后返回响应。</li></ul></li><li>异常流程：<ul><li>整个过程中，pre或者routing过滤器出现异常，都会直接进入error过滤器，再error处理完毕后，会将请求交给POST过滤器，最后返回给用户。</li><li>如果是error过滤器自己出现异常，最终也会进入POST过滤器，而后返回。</li><li>如果是POST过滤器出现异常，会跳转到error过滤器，但是与pre和routing不同的时，请求不会再到达POST过滤器了。</li></ul></li></ul><p>所有内置过滤器列表：</p><p>​<img src="https://upload-images.jianshu.io/upload_images/19382524-0cf6f4ff7ec23fcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="1-8-3-使用场景"><a href="#1-8-3-使用场景" class="headerlink" title="1.8.3.使用场景"></a>1.8.3.使用场景</h3><p>场景非常多：</p><ul><li>请求鉴权：一般放在pre类型，如果发现没有访问权限，直接就拦截了</li><li>异常处理：一般会在error类型和post类型过滤器中结合来处理。</li><li>服务调用时长统计：pre和post结合使用。</li></ul><h2 id="1-9-自定义过滤器"><a href="#1-9-自定义过滤器" class="headerlink" title="1.9.自定义过滤器"></a>1.9.自定义过滤器</h2><p>接下来我们来自定义一个过滤器，模拟一个登录的校验。基本逻辑：如果请求中有access-token参数，则认为请求有效，放行。</p><h3 id="1-9-1-定义过滤器类"><a href="#1-9-1-定义过滤器类" class="headerlink" title="1.9.1.定义过滤器类"></a>1.9.1.定义过滤器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 登录校验，肯定是在前置拦截</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 顺序设置为1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回true，代表过滤器生效。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">// 登录校验逻辑。</span></span><br><span class="line">        <span class="comment">// 1）获取Zuul提供的请求上下文对象</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 2) 从上下文中获取request对象</span></span><br><span class="line">        HttpServletRequest req = ctx.getRequest();</span><br><span class="line">        <span class="comment">// 3) 从请求中获取token</span></span><br><span class="line">        String token = req.getParameter(<span class="string">&quot;access-token&quot;</span>);</span><br><span class="line">        <span class="comment">// 4) 判断</span></span><br><span class="line">        <span class="keyword">if</span>(token == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(token.trim()))&#123;</span><br><span class="line">            <span class="comment">// 没有token，登录校验失败，拦截</span></span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 返回401状态码。也可以考虑重定向到登录页。</span></span><br><span class="line">            ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验通过，可以考虑把用户信息放入上下文，继续向后执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-9-2-测试"><a href="#1-9-2-测试" class="headerlink" title="1.9.2.测试"></a>1.9.2.测试</h3><p>没有token参数时，访问失败：</p><p><img src="https://upload-images.jianshu.io/upload_images/19382524-5f41f7aae46443ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>添加token参数后：</p><p>​    <img src="https://upload-images.jianshu.io/upload_images/19382524-176b9e76577c67ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="1-10-负载均衡和熔断"><a href="#1-10-负载均衡和熔断" class="headerlink" title="1.10.负载均衡和熔断"></a>1.10.负载均衡和熔断</h2><p>Zuul中默认就已经集成了Ribbon负载均衡和Hystix熔断机制。但是所有的超时策略都是走的默认值，比如熔断超时时间只有1S，很容易就触发了。因此建议我们手动进行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">retryable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">250</span> <span class="comment"># 连接超时时间(ms)</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># 通信超时时间(ms)</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对所有操作重试</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span> <span class="comment"># 同一服务不同实例的重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 同一实例的重试次数</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">        <span class="attr">execution:</span></span><br><span class="line">          <span class="attr">isolation:</span></span><br><span class="line">            <span class="attr">thread:</span></span><br><span class="line">              <span class="attr">timeoutInMillisecond:</span> <span class="number">6000</span> <span class="comment"># 熔断超时时长：6000ms</span></span><br></pre></td></tr></table></figure><h2 id="1-11完整配置"><a href="#1-11完整配置" class="headerlink" title="1.11完整配置"></a>1.11完整配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zuul-demo</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6003</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.d4c:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span> <span class="comment"># 获取服务列表的周期：5s</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer1:6001/eureka/,http://peer2:6002/eureka/</span></span><br><span class="line"><span class="comment">#zuul:</span></span><br><span class="line"><span class="comment">#  routes:</span></span><br><span class="line"><span class="comment">#    account-demo: # 这里是路由id，随意写</span></span><br><span class="line"><span class="comment">#      path: /account-demo/** # 这里是映射路径</span></span><br><span class="line"><span class="comment">#      url: http://127.0.0.1:6060 # 映射路径对应的实际url地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#zuul:</span></span><br><span class="line"><span class="comment">#  routes:</span></span><br><span class="line"><span class="comment">#    account-demo: # 这里是路由id，随意写</span></span><br><span class="line"><span class="comment">#      path: /account-demo/** # 这里是映射路径</span></span><br><span class="line"><span class="comment">#      serviceId: account-demo # 指定服务名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#zuul:</span></span><br><span class="line"><span class="comment">#  routes:</span></span><br><span class="line"><span class="comment">#    account-demo: /account-demo/** # 这里是映射路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#zuul:</span></span><br><span class="line"><span class="comment">#  prefix: /api # 添加路由前缀</span></span><br><span class="line"><span class="comment">#  routes:</span></span><br><span class="line"><span class="comment">#    account-demo: # 这里是路由id，随意写</span></span><br><span class="line"><span class="comment">#      path: /account-demo/** # 这里是映射路径</span></span><br><span class="line"><span class="comment">#      service-id: account-demo # 指定服务名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 添加路由前缀</span></span><br><span class="line">  <span class="attr">retryable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">250</span> <span class="comment"># 连接超时时间(ms)</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># 通信超时时间(ms)</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对所有操作重试</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span> <span class="comment"># 同一服务不同实例的重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 同一实例的重试次数</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMillisecond:</span> <span class="number">6000</span> <span class="comment"># 熔断超时时长：6000ms</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring cloud" scheme="http://example.com/categories/spring-cloud/"/>
    
    
    <category term="spring cloud" scheme="http://example.com/tags/spring-cloud/"/>
    
    <category term="zuul" scheme="http://example.com/tags/zuul/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud之feign</title>
    <link href="http://example.com/2020/10/03/spring-cloud/spring-cloud%E4%B9%8Bfeign/"/>
    <id>http://example.com/2020/10/03/spring-cloud/spring-cloud%E4%B9%8Bfeign/</id>
    <published>2020-10-03T13:01:24.000Z</published>
    <updated>2020-10-28T08:35:02.213Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--这个依赖 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6063</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-feign</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Spring Cloud的重试功能</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.d4c:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer1:6001/eureka/,http://peer2:6002/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的熔断功能</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/html,application/xml,application/json</span> <span class="comment"># 设置压缩的数据类型</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 设置触发压缩的大小下限</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启响应压缩</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">250</span> <span class="comment"># Ribbon的连接超时时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">1000</span> <span class="comment"># Ribbon的数据读取超时时间</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对所有操作都进行重试</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment"># 切换实例的重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 对当前实例的重试次数</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span> <span class="comment"># 设置hystrix的超时时间为6000ms</span></span><br></pre></td></tr></table></figure><p>#3.相关类</p><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span><span class="comment">//或者@EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerFeignApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>FeignClient接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;account-demo&quot;,fallback = AccountClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;account/get/server/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">queryAccountById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;account/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">queryAccountByIdTwo</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FeignClient接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountClientFallback</span> <span class="keyword">implements</span> <span class="title">AccountClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAccountById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am fallback!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAccountByIdTwo</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am fallback two!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConsumerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountClient accountClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAccountById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        String s = accountClient.queryAccountById(id);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAccountByIdTwo</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        String s = accountClient.queryAccountByIdTwo(id);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountConsumerService accountConsumerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAccountById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountConsumerService.queryAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/two/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAccountByIdTwo</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountConsumerService.queryAccountByIdTwo(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>feign自定的日志类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogLevelConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定的Level级别是FULL，Feign支持4种级别：</p><ul><li><p>  NONE：不记录任何日志信息，这是默认值。</p></li><li><p>  BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</p></li><li><p>  HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</p></li><li><p>  FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring cloud" scheme="http://example.com/categories/spring-cloud/"/>
    
    
    <category term="spring cloud" scheme="http://example.com/tags/spring-cloud/"/>
    
    <category term="feign" scheme="http://example.com/tags/feign/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud之ribbon负载均衡-自定义负载均衡配置,超时及重试</title>
    <link href="http://example.com/2020/10/02/spring-cloud/spring-cloud%E4%B9%8Bribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE,%E8%B6%85%E6%97%B6%E5%8F%8A%E9%87%8D%E8%AF%95/"/>
    <id>http://example.com/2020/10/02/spring-cloud/spring-cloud%E4%B9%8Bribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE,%E8%B6%85%E6%97%B6%E5%8F%8A%E9%87%8D%E8%AF%95/</id>
    <published>2020-10-02T13:01:24.000Z</published>
    <updated>2020-10-28T08:35:24.066Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="spring-cloud之ribbon负载均衡-自定义负载均衡配置-超时及重试"><a href="#spring-cloud之ribbon负载均衡-自定义负载均衡配置-超时及重试" class="headerlink" title="spring-cloud之ribbon负载均衡-自定义负载均衡配置,超时及重试"></a>spring-cloud之ribbon负载均衡-自定义负载均衡配置,超时及重试</h1><h1 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1.依赖导入"></a>1.依赖导入</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--version没有添加，我在父工程中添加了--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web应用导入--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--eureka中包含了ribbon,不需要单独引入依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加ribbon失败重试机制--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>#2.配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6064</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.d4c:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">zone-1:</span> <span class="string">http://peer1:6001/eureka/</span></span><br><span class="line">      <span class="attr">zone-2:</span> <span class="string">http://peer2:6002/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Spring Cloud的重试功能</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-ribbon</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">restclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#没有这个ribbon超时不会生效 ribbon. 是ribbon.http.client.enabled的替代品</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment">#同一台实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment">#重试负载均衡其他的实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="comment">#当OkToRetryOnAllOperations设置为false时，只会对get请求进行重试。</span></span><br><span class="line">  <span class="comment">#如果设置为true，便会对所有的请求进行重试，如果是put或post等写操作，</span></span><br><span class="line">  <span class="comment">#如果服务器接口没做幂等性，会产生不好的结果，所以OkToRetryOnAllOperations慎用。</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span>  <span class="comment">#是否所有操作都重试</span></span><br></pre></td></tr></table></figure><p>具体为什么要设置ribbon.http.client.enabled 请参考<a href="https://blog.csdn.net/hsz2568952354/article/details/89466511">Ribbon、Feign、Hystrix和Zuul超时重试设置（一）</a>，<a href="https://www.jb51.net/article/149226.htm">Spring Cloud Ribbon的踩坑记录与原理详析</a></p><h1 id="3-类的配置及调用方式"><a href="#3-类的配置及调用方式" class="headerlink" title="3.类的配置及调用方式"></a>3.类的配置及调用方式</h1><p><strong>启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerRibbonApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerRibbonApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//方式一</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    <span class="comment">/*@Bean</span></span><br><span class="line"><span class="comment">    @LoadBalanced</span></span><br><span class="line"><span class="comment">    public RestTemplate restTemplate(RestTemplateBuilder builder) &#123;</span></span><br><span class="line"><span class="comment">        return builder.build();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义负载均衡策略</span></span><br><span class="line">   <span class="comment">/*  </span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public IRule ribbonRule() &#123;</span></span><br><span class="line"><span class="comment">        return new MyRule();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义负载均衡规则配置类（自定义的时候用到，默认是轮询）</strong></p><p>需要extends  AbstractLoadBalancerRule，下面的规则是，每个服务实例执行5次<br>参考<a href="https://blog.csdn.net/www1056481167/article/details/81151064">SpringCloud-Ribbon（自定义负载均衡算法）</a>,  <a href="http://blog.itpub.net/31558358/viewspace-2564425/">Spring Cloud：自定义 Ribbon 负载均衡策略</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line">    <span class="comment">// total = 0 // 当total==5以后，我们指针才能往下走，</span></span><br><span class="line">    <span class="comment">// index = 0 // 当前对外提供服务的服务器地址，</span></span><br><span class="line">    <span class="comment">// total需要重新置为零，但是已经达到过一个3次，我们的index = 1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> total = <span class="number">0</span>;    <span class="comment">// 总共被调用的次数，目前要求每台被调用5次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentIndex = <span class="number">0</span>; <span class="comment">// 当前提供服务的机器号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Server server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            List&lt;Server&gt; upList = lb.getReachableServers();</span><br><span class="line">            List&lt;Server&gt; allList = lb.getAllServers();</span><br><span class="line">            <span class="keyword">int</span> serverCount = allList.size();</span><br><span class="line">            <span class="keyword">if</span> (serverCount == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(total &lt; <span class="number">5</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                server = upList.get(currentIndex);</span><br><span class="line">                total++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                total = <span class="number">0</span>;</span><br><span class="line">                currentIndex++;</span><br><span class="line">                <span class="keyword">if</span>(currentIndex &gt;= upList.size())</span><br><span class="line">                &#123;</span><br><span class="line">                    currentIndex = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Thread.yield();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line">            server = <span class="keyword">null</span>;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConsumerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试负载均衡功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBalancerRun</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            ServiceInstance choose = loadBalancerClient.choose(<span class="string">&quot;account-demo&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;choose.getInstanceId()+\&quot;:\&quot;&quot;</span> + choose.getInstanceId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试重试功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">retry</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://account-demo/account/get/&quot;</span> + id;</span><br><span class="line">        String forObject = restTemplate.getForObject(url, String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;forObject = &quot;</span> + forObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountConsumerService accountConsumerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;balancer/&#123;times&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">balance</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> times)</span></span>&#123;</span><br><span class="line">        accountConsumerService.loadBalancerRun(times);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;retry/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">retry</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountConsumerService.retry(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义负载均衡"><a href="#自定义负载均衡" class="headerlink" title="自定义负载均衡"></a>自定义负载均衡</h1><p><strong>方式一</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">account-demo:</span>  <span class="comment">#针对的服务名</span></span><br><span class="line">    <span class="attr">ribbon:</span></span><br><span class="line">       <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.d4c.config.MyRule</span></span><br></pre></td></tr></table></figure><p>上面的配置方法<code>针对account-demo</code>服务会采用MyRule的负载均衡规则。</p><p>同理，我想把我的MyRule<code>针对所有服务</code><br>以为下面这种配发能起作用,但实际不起作用，还是默认的轮询策略。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.d4c.config.MyRule</span></span><br></pre></td></tr></table></figure><p>于是从网上找来了另一种起作用的方法。</p><p>需要定义配置累<br>或者直接吧MyRule注入到spring（@Componnet）或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种是针对所有服务</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRibbonConfig</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 自定义负载均衡策略</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么能全局应用，就是把这个自定义文件放到了@ComponentScan所扫描的地方</p><blockquote><p>官方文档给出警告：<br>这个自定义的类不能放在@ComponentScan所扫描的当前包以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，也就是我们达不到特殊化指定的目的了。</p></blockquote><p>如果我们把这个配置文件放到@ComponentScan扫描不到的地方，或者说扫描的时候排除这个配置类，那么能不能实现针对服务级别的配置或隔离<br>下面这种方法就是<code>针对服务的配置</code><br><strong>方式二</strong><br>1.把MyRibbonConfig 放到启动类扫描不到的地方。<br><img src="https://upload-images.jianshu.io/upload_images/19382524-d00f044a6a4335f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2.或者扫描时排除此配置类。<br>扫描排除某类的方法 <a href="https://www.cnblogs.com/wenbronk/p/6881643.html">springcloud-04-自定义ribbon的配置方式</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ribbon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.d4c.config.MyRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRibbonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//随机负载</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置@RibbonClient 或者@RibbonClients（这个注解放启动类上或项目能自动扫描的地方就行了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//针对一个服务</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;account-demo&quot;, configuration = MyRule.class)</span>,</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonClientConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//针对多个服务</span></span><br><span class="line"><span class="meta">@RibbonClients(value = &#123;</span></span><br><span class="line"><span class="meta">        @RibbonClient(name = &quot;account-demo&quot;, configuration = MyRule.class),</span></span><br><span class="line"><span class="meta">        @RibbonClient(name = &quot;product-demo2&quot;, configuration = RandomRule.class)</span></span><br><span class="line"><span class="meta">&#125;,defaultConfiguration = &#123;MyRule.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonClientsConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ribbon的超时配置"><a href="#ribbon的超时配置" class="headerlink" title="ribbon的超时配置"></a>ribbon的超时配置</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">restclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#没有这个ribbon超时不会生效 ribbon. 是ribbon.http.client.enabled的替代品</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment">#同一台实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment">#重试负载均衡其他的实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="comment">#当OkToRetryOnAllOperations设置为false时，只会对get请求进行重试。</span></span><br><span class="line">  <span class="comment">#如果设置为true，便会对所有的请求进行重试，如果是put或post等写操作，</span></span><br><span class="line">  <span class="comment">#如果服务器接口没做幂等性，会产生不好的结果，所以OkToRetryOnAllOperations慎用。</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span>  <span class="comment">#是否所有操作都重试</span></span><br></pre></td></tr></table></figure><h1 id="ribbon的重试"><a href="#ribbon的重试" class="headerlink" title="ribbon的重试"></a>ribbon的重试</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Spring Cloud的重试功能</span></span><br></pre></td></tr></table></figure><h1 id="单独使用Ribbon"><a href="#单独使用Ribbon" class="headerlink" title="单独使用Ribbon"></a>单独使用Ribbon</h1><p>因为往往Ribbon配合Eureka使用的，往往也有第三方服务没有注册到Eureka Server，但也部署了多个实例，也需要进行负载均衡，这时可以在服务消费者的配置文件中进行如下方式配置，实现负载均衡</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取消Ribbon使用Eureka</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eureka:</span></span><br><span class="line">   <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#配置Ribbon能访问 的微服务节点，多个节点用逗号隔开</span></span><br><span class="line"><span class="attr">account-demo:</span></span><br><span class="line">   <span class="attr">ribbon:</span></span><br><span class="line">      <span class="string">listOfServers:localhost:6060,localhost:6070</span></span><br></pre></td></tr></table></figure><p>参考 <a href="https://blog.csdn.net/wudiyong22/article/details/84937648">spring cloud各种超时时间及重试设置</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring cloud" scheme="http://example.com/categories/spring-cloud/"/>
    
    
    <category term="spring cloud" scheme="http://example.com/tags/spring-cloud/"/>
    
    <category term="ribbon" scheme="http://example.com/tags/ribbon/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud之hystrix</title>
    <link href="http://example.com/2020/10/01/spring-cloud/spring-cloud%E4%B9%8Bhystrix/"/>
    <id>http://example.com/2020/10/01/spring-cloud/spring-cloud%E4%B9%8Bhystrix/</id>
    <published>2020-10-01T13:01:24.000Z</published>
    <updated>2020-10-28T08:35:14.658Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#1.依赖引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hystrix仪表盘--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6065</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.d4c:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer1:6001/eureka/,http://peer2:6002/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Spring Cloud的重试功能</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-hystrix</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">restclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#没有这个ribbon超时配置不会生效，是</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment">#同一台实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment">#重试负载均衡其他的实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="comment">#当OkToRetryOnAllOperations设置为false时，只会对get请求进行重试。</span></span><br><span class="line">  <span class="comment">#如果设置为true，便会对所有的请求进行重试，如果是put或post等写操作，如果服务器接口没做幂等性，会产生不好的结果，所以OkToRetryOnAllOperations慎用。</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span>  <span class="comment">#是否所有操作都重试</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span> <span class="comment"># 设置hystrix的超时时间为6000ms</span></span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span><span class="comment">//开启服务发现</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span><span class="comment">//开启熔断器</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span><span class="comment">//开启hystrix仪表盘</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerHystrixpplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerHystrixpplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConsumerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;fallback&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hystrixCommand</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://account-demo/account/get/&quot;</span> + id;</span><br><span class="line">        String forObject = restTemplate.getForObject(url, String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;forObject = &quot;</span> + forObject);</span><br><span class="line">        <span class="keyword">return</span> forObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fallback</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am fallback!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountConsumerService accountConsumerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;fallback/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String s = accountConsumerService.hystrixCommand(id);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考 <a href="https://www.cnblogs.com/cjsblog/p/7988979.html">参考Spring Cloud官方文档第13、14、15章</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring cloud" scheme="http://example.com/categories/spring-cloud/"/>
    
    
    <category term="spring cloud" scheme="http://example.com/tags/spring-cloud/"/>
    
    <category term="hystrix" scheme="http://example.com/tags/hystrix/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot演示json返回信息与统一异常处理</title>
    <link href="http://example.com/2020/08/17/spring-boot/spring-boot%E6%BC%94%E7%A4%BAjson%E8%BF%94%E5%9B%9E%E4%BF%A1%E6%81%AF%E4%B8%8E%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2020/08/17/spring-boot/spring-boot%E6%BC%94%E7%A4%BAjson%E8%BF%94%E5%9B%9E%E4%BF%A1%E6%81%AF%E4%B8%8E%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2020-08-17T14:36:00.000Z</published>
    <updated>2020-10-28T08:26:36.532Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-创建基于spring-boot-jpa的基本的增删"><a href="#1-创建基于spring-boot-jpa的基本的增删" class="headerlink" title="1.创建基于spring boot+jpa的基本的增删"></a>1.创建基于spring boot+jpa的基本的增删</h1><p>请参考<a href="https://www.jianshu.com/p/b7c0115889ba">spring boot+jpa简单实现</a>就不多介绍了。本次主要是统一异常处理的演进过程，还有一个目的是刚看的异常处理视频，记录一下，方便以后查看。<br>#2.最原始的返回（不友好，不利于前端处理）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;findByIdFirst&quot;)</span><br><span class="line">public Student findByIdFirst(@RequestParam String id) &#123;</span><br><span class="line">    return studentService.findById(id).orElse(null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;findAllFirst&quot;)</span><br><span class="line">public List&lt;Student&gt; findByIdFirst() &#123;</span><br><span class="line">    return studentService.list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果存在Student的id为<code>d4c-2cfaa59e-27a8-46c1-8578-da715e44b214</code>则返回。<br><img src="https://upload-images.jianshu.io/upload_images/19382524-15dfa353385b7020.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="findByIdFirst"></p></li><li><p>如果查询的id不存在，则什么都不返回<br><img src="https://upload-images.jianshu.io/upload_images/19382524-7924b8f19a032ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查询id不存在"></p></li><li><p>如果存在数据，list接口返回<br><img src="https://upload-images.jianshu.io/upload_images/19382524-62f32b2fe42c2d62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="list有数据"></p></li></ul><p>如果不存在数据，则返回。<br><img src="https://upload-images.jianshu.io/upload_images/19382524-8ede90070c57500c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="list为空"></p><p>如果用这种接口返回数据，肯定会被前端捶爆。(还是不要尝试了！哎！说多了都是泪！！！)</p><p>#3 .怎么改进<br>我们定义一个ResultInfo对象来统一定义返回结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.exception.demo.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:41</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Data</span><br><span class="line">public class ResultInfo&lt;T&gt; &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     *返回码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Integer code;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     *返回提示信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String msg;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     *返回具体对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面的接口就可以改进为</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;findByIdSecond&quot;)</span><br><span class="line">   public ResultInfo findByIdSecond(@RequestParam String id) &#123;</span><br><span class="line">       Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">       ResultInfo resultInfo &#x3D; new ResultInfo();</span><br><span class="line">       resultInfo.setCode(1);</span><br><span class="line">       resultInfo.setMsg(&quot;成功！&quot;);</span><br><span class="line">       resultInfo.setData(stu);</span><br><span class="line">       return resultInfo;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;findAllSecond&quot;)</span><br><span class="line">   public ResultInfo findByIdSecond() &#123;</span><br><span class="line">       List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">       ResultInfo resultInfo &#x3D; new ResultInfo();</span><br><span class="line">       resultInfo.setCode(1);</span><br><span class="line">       resultInfo.setMsg(&quot;成功！&quot;);</span><br><span class="line">       resultInfo.setData(listStudent);</span><br><span class="line">       return resultInfo;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><p>改造后的数据（1条数据）<br><img src="https://upload-images.jianshu.io/upload_images/19382524-bedb758f89096974.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="get"></p></li><li><p>list<br><img src="https://upload-images.jianshu.io/upload_images/19382524-14142da02874f089.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="list"></p></li></ul><p>现在不管有没有数据，共同的部分code和msg都会返回，这样更有利于前端的判断处理数据。</p><p>但是，每次返回成功都要写一遍<br> <code> ResultInfo resultInfo = new ResultInfo();</code><br> <code>  resultInfo.setCode(1);</code><br> <code> resultInfo.setMsg(&quot;成功！&quot;);</code><br>这有点太繁琐，一点都不优雅！！！</p><p>#4. 代码共同的部分提取成一个工具类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.exception.demo.utils;</span><br><span class="line"></span><br><span class="line">import com.d4c.exception.demo.pojo.ResultInfo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:42</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ResultInfoOldUtil &#123;</span><br><span class="line">    public static ResultInfo success(Object object) &#123;</span><br><span class="line">        ResultInfo result &#x3D; new ResultInfo();</span><br><span class="line">        result.setCode(1);</span><br><span class="line">        result.setMsg(&quot;成功！&quot;);</span><br><span class="line">        result.setData(object);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，代码就能改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;findByIdThird&quot;)</span><br><span class="line">   public ResultInfo findByIdThird(@RequestParam String id) &#123;</span><br><span class="line">       Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">       return ResultInfoOldUtil.success(stu);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;findAllThird&quot;)</span><br><span class="line">   public ResultInfo findByIdThird() &#123;</span><br><span class="line">       List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">       return ResultInfoOldUtil.success(listStudent);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>效果与上面一样。</p><p>到上面我们就处理了我们成功的代码，但只是成功，前提是代码不出现异常，但是这也许有可能吧！！！</p><p>我们来主动测试一个异常看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;findByIdFourth&quot;)</span><br><span class="line">   public ResultInfo findByIdFourth(@RequestParam String id) &#123;</span><br><span class="line">       </span><br><span class="line">       Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">       Integer count &#x3D; 1&#x2F;0;</span><br><span class="line">       return ResultInfoOldUtil.success(stu);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/19382524-e59cee3803515d74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="type=Internal Server Error, status=500"></p><p>直接异常抛到页面上，这怎么可以。</p><p>因此又处理了一下，变成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;findByIdFourth&quot;)</span><br><span class="line">  public ResultInfo findByIdFourth(@RequestParam String id) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">          Integer count &#x3D; 1&#x2F;0;</span><br><span class="line">          return ResultInfoOldUtil.success(stu);</span><br><span class="line">      &#125; catch (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">          return ResultInfoOldUtil.error();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(&quot;findAllFourth&quot;)</span><br><span class="line">  public ResultInfo findByIdFourth() throws Exception &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">          throw new Exception(&quot;出现异常&quot;);</span><br><span class="line">      &#125; catch (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">          return ResultInfoOldUtil.error();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>此时的结果变成了<br><img src="https://upload-images.jianshu.io/upload_images/19382524-b04000ee3c63102d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="异常统一"></p><p>异常也变得优雅了！</p><p>但是，如果异常多了，我们分别处理，就有变成了。<br> <code>try &#123;...&#125; catch(...) &#123;...&#125;catch(...).... finally &#123;...&#125;</code></p><p>这样处理如此繁琐。能不能把这些异常统一处理一下，处理一次，下次就不有再处理同样的异常了。</p><p>#5.统一异常处理@ControllerAdvice+ @ExceptionHandler(…)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.exception.demo.handle;</span><br><span class="line"></span><br><span class="line">import com.d4c.exception.demo.enums.ResultInfoEnum;</span><br><span class="line">import com.d4c.exception.demo.exception.StudentException;</span><br><span class="line">import com.d4c.exception.demo.pojo.ResultInfo;</span><br><span class="line">import com.d4c.exception.demo.utils.ResultInfoUtil;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:40</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@ControllerAdvice</span><br><span class="line">@Slf4j</span><br><span class="line">public class ExceptionHandle &#123;</span><br><span class="line">    @ExceptionHandler(Exception.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public ResultInfo handleException(Exception e) &#123;</span><br><span class="line">        if (e instanceof StudentException) &#123;</span><br><span class="line">            StudentException studentException &#x3D; (StudentException) e;</span><br><span class="line">            return ResultInfoUtil.error(studentException.getCode(), studentException.getMessage());</span><br><span class="line">        &#125; else if (e instanceof NullPointerException) &#123;</span><br><span class="line">            ResultInfoEnum resultInfoEnum &#x3D; ResultInfoEnum.NULL_POINT_EXCEPTION;</span><br><span class="line">            return ResultInfoUtil.error(resultInfoEnum.getCode(), resultInfoEnum.getMsg());</span><br><span class="line">        &#125; else if (e instanceof IndexOutOfBoundsException) &#123;</span><br><span class="line">            ResultInfoEnum resultInfoEnum &#x3D; ResultInfoEnum.INDEX_OUT_BOUNDS_EXCEPTION;</span><br><span class="line">            return ResultInfoUtil.error(resultInfoEnum.getCode(), resultInfoEnum.getMsg());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            log.error(&quot;【系统异常】&#123;&#125;&quot;, e);</span><br><span class="line">            ResultInfoEnum unknown &#x3D; ResultInfoEnum.UNKNOWN;</span><br><span class="line">            return ResultInfoUtil.error(unknown.getCode(), unknown.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.exception.demo.exception;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.d4c.exception.demo.enums.ResultInfoEnum;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.Getter;</span><br><span class="line">import lombok.Setter;</span><br><span class="line">import net.bytebuddy.implementation.bind.annotation.Super;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:36</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">public class StudentException extends RuntimeException &#123;</span><br><span class="line"></span><br><span class="line">    private Integer code;</span><br><span class="line"></span><br><span class="line">    public StudentException(ResultInfoEnum resultInfoEnum)&#123;</span><br><span class="line">        super(resultInfoEnum.getMsg());</span><br><span class="line">        this.code &#x3D; resultInfoEnum.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们就不用显示的try catch了。只要在ExceptionHandle处理一遍就好了。就变成了下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;findByIdFifth&quot;)</span><br><span class="line">   public ResultInfo findByIdFifth(@RequestParam String id) &#123;</span><br><span class="line">       Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">       Integer count &#x3D; 1 &#x2F; 0;</span><br><span class="line">       return ResultInfoOldUtil.success(stu);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;findAllFifth&quot;)</span><br><span class="line">   public ResultInfo findByIdFifth() throws Exception &#123;</span><br><span class="line">       List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">       throw new Exception(&quot;出现异常&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/19382524-3427896ee0a10747.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="处理后"></p><h1 id="6-自定义异常类StudentException"><a href="#6-自定义异常类StudentException" class="headerlink" title="6.自定义异常类StudentException"></a>6.自定义异常类StudentException</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.exception.demo.exception;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.d4c.exception.demo.enums.ResultInfoEnum;</span><br><span class="line">import lombok.Getter;</span><br><span class="line">import lombok.Setter;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:36</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">public class StudentException extends RuntimeException &#123;</span><br><span class="line"></span><br><span class="line">    private Integer code;</span><br><span class="line"></span><br><span class="line">    public StudentException(ResultInfoEnum resultInfoEnum) &#123;</span><br><span class="line">        super(resultInfoEnum.getMsg());</span><br><span class="line">        this.code &#x3D; resultInfoEnum.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="7-统一管理异常信息ResultInfoEnum"><a href="#7-统一管理异常信息ResultInfoEnum" class="headerlink" title="7.统一管理异常信息ResultInfoEnum"></a>7.统一管理异常信息ResultInfoEnum</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.exception.demo.enums;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Getter;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:39</span><br><span class="line"> * Description:</span><br><span class="line"> * @author</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Getter</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public enum ResultInfoEnum &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 成功</span><br><span class="line">     *&#x2F;</span><br><span class="line">    SUCCESS(1,&quot;success&quot;),</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 失败</span><br><span class="line">     *&#x2F;</span><br><span class="line">    FAILED(2,&quot;failed&quot;),</span><br><span class="line">    &#x2F;**</span><br><span class="line">     *未知错误</span><br><span class="line">     *&#x2F;</span><br><span class="line">    UNKNOWN(3,&quot;未知错误&quot;),</span><br><span class="line">    &#x2F;**</span><br><span class="line">     *id不存在</span><br><span class="line">     *&#x2F;</span><br><span class="line">    NOT_EXIST_ID(4,&quot;要查询的id不存在&quot;),</span><br><span class="line"></span><br><span class="line">    NULL_POINT_EXCEPTION(5,&quot;空指针异常&quot;),</span><br><span class="line">    INDEX_OUT_BOUNDS_EXCEPTION(6,&quot;下标超出异常&quot;)</span><br><span class="line">    ;</span><br><span class="line">    private Integer code;</span><br><span class="line">    private String msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#8.优化后的ResultInfoUtil</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.exception.demo.utils;</span><br><span class="line"></span><br><span class="line">import com.d4c.exception.demo.enums.ResultInfoEnum;</span><br><span class="line">import com.d4c.exception.demo.pojo.ResultInfo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;7 19:42</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ResultInfoUtil &#123;</span><br><span class="line">    public static ResultInfo success(Object object) &#123;</span><br><span class="line">        ResultInfo result &#x3D; new ResultInfo();</span><br><span class="line">        ResultInfoEnum successEnum &#x3D; ResultInfoEnum.SUCCESS;</span><br><span class="line">        result.setCode(successEnum.getCode());</span><br><span class="line">        result.setMsg(successEnum.getMsg());</span><br><span class="line">        result.setData(object);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static ResultInfo success() &#123;</span><br><span class="line">        return success(null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static ResultInfo error(Integer code ,String msg) &#123;</span><br><span class="line">        ResultInfo result &#x3D; new ResultInfo();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 最后，代码优化成</p><p><img src="https://upload-images.jianshu.io/upload_images/19382524-252edbd728d1563b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最后项目结构"></p><p>json与统一异常处理到这里就告一段落了。<br>具体的源码请参考<a href="https://gitee.com/dancer4code/spring-boot-lab/tree/master/exception-demo">exception-demo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring boot" scheme="http://example.com/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://example.com/tags/spring-boot/"/>
    
    <category term="异常处理" scheme="http://example.com/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot集成mybatis-基础实现</title>
    <link href="http://example.com/2020/08/16/spring-boot/Spring-Boot%E9%9B%86%E6%88%90mybatis-%E5%9F%BA%E7%A1%80%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2020/08/16/spring-boot/Spring-Boot%E9%9B%86%E6%88%90mybatis-%E5%9F%BA%E7%A1%80%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-08-16T14:36:00.000Z</published>
    <updated>2020-10-28T08:26:02.779Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="一.环境准备"></a>一.环境准备</h1><p>我这里用的是</p><ul><li>jdk1.8 </li><li>IntelliJ IDEA</li><li>maven 3.3.9<br>上面环境安装及配置请自己百度</li></ul><h1 id="二-建库、建表"><a href="#二-建库、建表" class="headerlink" title="二 建库、建表"></a>二 建库、建表</h1><p>我用的navicat premium工具手动建的表<br><img src="https://upload-images.jianshu.io/upload_images/19382524-cc8393a88352b132.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="建表.jpg"></p><p>建表sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;t_user&#96;;</span><br><span class="line">CREATE TABLE &#96;t_user&#96;  (</span><br><span class="line">  &#96;id&#96; int(15) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT &#39;&#39;,</span><br><span class="line">  &#96;password&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT &#39;&#39;,</span><br><span class="line">  &#96;address&#96; varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT &#39;&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 7 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Compact;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三-编写代码"><a href="#三-编写代码" class="headerlink" title="三 编写代码"></a>三 编写代码</h1><p>##1. 我的项目结构如下：<br><img src="https://upload-images.jianshu.io/upload_images/19382524-b0f89488b5abc247.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目结构.jpg"></p><ol start="2"><li>lombok插件安装</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/19382524-82d51c04f202ae11.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="lombok插件安装.jpg"></p><h2 id="3-application-yml配置文件"><a href="#3-application-yml配置文件" class="headerlink" title="3. application.yml配置文件"></a>3. application.yml配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;yourDB?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;UTC</span><br><span class="line">    username: root</span><br><span class="line">    password: XXXX</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapping&#x2F;*.xml  </span><br><span class="line">  type-aliases-package: com.zlq.demo.pojo</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com.zlq.demo: debug</span><br></pre></td></tr></table></figure><p>##4. maven依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.zlq.dev&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-demo-zlq&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;!--添加spring-boot-starter-parent主要是统一版本管理，通常的依赖不用鞋&lt;version&gt;&lt;&#x2F;version&gt;--&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--不用引入jdbc依赖了，此依赖默认包含spring-boot-starter-jdbc--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--web项目--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--省了写getter&#x2F;setter toString 构造函数和equals hashCode等--&gt;</span><br><span class="line">        &lt;!--idea需要装lombok插件，idea插件安装请百度--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.8&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--测试环境--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>##5. 实体类 User</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;@Data  lombok插件带的注解（不用写getter&#x2F;setter toString等）</span><br><span class="line">&#x2F;&#x2F;@NoArgsConstructor  无参构造函数</span><br><span class="line">&#x2F;&#x2F;@AllArgsConstructor </span><br><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class User implements Serializable&#123;</span><br><span class="line">    private String id;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    private String address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>##6. Dao层 User接口 UserDao</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;带上这个注解spring boot启动类上就不用带@MapperScan了</span><br><span class="line">@Mapper</span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    &#x2F;&#x2F;通过id查询用户</span><br><span class="line">    public User get(String id);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;查询所用用户</span><br><span class="line">    public List&lt;User&gt; findAll();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;修改用户信息，通过id</span><br><span class="line">    public int update(User user);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;增加用户信息</span><br><span class="line">    public int insert(User user);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;删除用户</span><br><span class="line">    public int delete(String id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##7. Service层 UserService</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDao userDao;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;通过id查询用户</span><br><span class="line">    public User get(String id) &#123;</span><br><span class="line">        return userDao.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;查询所用用户</span><br><span class="line">    public List&lt;User&gt; findAll() &#123;</span><br><span class="line">        return userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;增加用户</span><br><span class="line">    public int insert(User user) &#123;</span><br><span class="line">        return userDao.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;更新用户</span><br><span class="line">    public int update(User user) &#123;</span><br><span class="line">        return userDao.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;删除用户</span><br><span class="line">    public int delete(String id) &#123;</span><br><span class="line">        return userDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>##8. Controller层 UserController</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#123;user_id&#125;&quot;)</span><br><span class="line">    public User getUser(@PathVariable(&quot;user_id&quot;) String id)&#123;</span><br><span class="line">        return userService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping</span><br><span class="line">    public List&lt;User&gt; findAllUser()&#123;</span><br><span class="line">        return userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @PostMapping</span><br><span class="line">    public int addUser(@RequestBody User user)&#123;</span><br><span class="line">        return userService.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PutMapping</span><br><span class="line">    public int updateUser(@RequestBody User user)&#123;</span><br><span class="line">        return userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @DeleteMapping(&quot;&#123;id&#125;&quot;)</span><br><span class="line">    public int deleteUser(@PathVariable(&quot;id&quot;) String id)&#123;</span><br><span class="line">        return userService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>##9. UserMapper.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.zlq.demo.dao.UserDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;get&quot; parameterType&#x3D;&quot;string&quot; resultType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        SELECT id,name,password,address</span><br><span class="line">          FROM  t_user WHERE id&#x3D;#&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;findAll&quot; resultType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        SELECT id,name,password,address FROM  t_user</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;update id&#x3D;&quot;update&quot; parameterType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        UPDATE t_user</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;name!&#x3D; null&quot;&gt;</span><br><span class="line">                name &#x3D; #&#123;name&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;password!&#x3D; null&quot;&gt;</span><br><span class="line">                password &#x3D; #&#123;password&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;address!&#x3D; null&quot;&gt;</span><br><span class="line">                address &#x3D; #&#123;address&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;&#x2F;set&gt;</span><br><span class="line">        WHERE id &#x3D; #&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;update&gt;</span><br><span class="line">    &lt;insert id&#x3D;&quot;insert&quot; parameterType&#x3D;&quot;user&quot; useGeneratedKeys&#x3D;&quot;true&quot; keyProperty&#x3D;&quot;id&quot;&gt;</span><br><span class="line">        INSERT INTO t_user</span><br><span class="line">        &lt;trim prefix&#x3D;&quot;(&quot; suffix&#x3D;&quot;)&quot; suffixOverrides&#x3D;&quot;,&quot;&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;id !&#x3D; null and id !&#x3D; &#39;&#39;&quot;&gt;</span><br><span class="line">                id,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;name!&#x3D; null&quot;&gt;</span><br><span class="line">                name,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;password!&#x3D; null&quot;&gt;</span><br><span class="line">                password,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;address!&#x3D; null&quot;&gt;</span><br><span class="line">                address,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;&#x2F;trim&gt;</span><br><span class="line">        &lt;trim prefix&#x3D;&quot;values (&quot; suffix&#x3D;&quot;)&quot; suffixOverrides&#x3D;&quot;,&quot;&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;id !&#x3D; null and id !&#x3D; &#39;&#39;&quot;&gt;</span><br><span class="line">                #&#123;id&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;name!&#x3D; null&quot;&gt;</span><br><span class="line">                #&#123;name&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;password!&#x3D; null&quot;&gt;</span><br><span class="line">                #&#123;password&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;address!&#x3D; null&quot;&gt;</span><br><span class="line">                #&#123;address&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;&#x2F;trim&gt;</span><br><span class="line">    &lt;&#x2F;insert&gt;</span><br><span class="line">    &lt;delete id&#x3D;&quot;delete&quot; parameterType&#x3D;&quot;string&quot;&gt;</span><br><span class="line">        DELETE FROM t_user WHERE id&#x3D;#&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;delete&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>到这里基础环境和项目已经搞定。</p><h1 id="四-项目测试"><a href="#四-项目测试" class="headerlink" title="四 项目测试"></a>四 项目测试</h1><p>##1. 用idea自带的restful工具测试</p><p><img src="https://upload-images.jianshu.io/upload_images/19382524-099551f86ffa48e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="restful测试工具.jpg"></p><p>##2.增加一个用户</p><p><img src="https://upload-images.jianshu.io/upload_images/19382524-bc62e4583c01063e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加用户.jpg"></p><p>成功增加一条数据</p><p><img src="https://upload-images.jianshu.io/upload_images/19382524-b745616890fa37e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功执行添加一条数据.jpg"></p><p> 其它接口也都能运行，就不一 一测试。</p><p>OK！搞定手工！<br>拜拜！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring boot" scheme="http://example.com/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://example.com/tags/spring-boot/"/>
    
    <category term="mybatis" scheme="http://example.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot+jpa演示id的生成策略及自定义id</title>
    <link href="http://example.com/2020/08/15/spring-boot/spring-boot+jpa%E6%BC%94%E7%A4%BAid%E7%9A%84%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89id/"/>
    <id>http://example.com/2020/08/15/spring-boot/spring-boot+jpa%E6%BC%94%E7%A4%BAid%E7%9A%84%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89id/</id>
    <published>2020-08-15T14:36:00.000Z</published>
    <updated>2020-10-28T08:25:56.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#1.spring boot+jpa项目的构建<br>请参考<a href="https://www.jianshu.com/p/b7c0115889ba">spring boot+jpa简单实现</a></p><h1 id="2-Id-GeneratedValue四种id生成策略"><a href="#2-Id-GeneratedValue四种id生成策略" class="headerlink" title="2.@Id+@GeneratedValue四种id生成策略"></a>2.@Id+@GeneratedValue四种id生成策略</h1><p>使用<code>GenerationType.IDENTITY</code>(mysql要设置成自增)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.dancer4code.actuator.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">import org.hibernate.annotations.GenericGenerator;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@Entity</span><br><span class="line">@Table(name &#x3D; &quot;student&quot;)</span><br><span class="line">public class Student implements Serializable&#123;</span><br><span class="line">   @Id</span><br><span class="line">   @GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JPA提供四种标准用法,由@GeneratedValue的源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;METHOD,FIELD&#125;)    </span><br><span class="line">@Retention(RUNTIME)    </span><br><span class="line">public @interface GeneratedValue&#123;    </span><br><span class="line">    GenerationType strategy() default AUTO;    </span><br><span class="line">    String generator() default &quot;&quot;;    </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>其中GenerationType: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public enum GenerationType&#123;    </span><br><span class="line">    TABLE,    </span><br><span class="line">    SEQUENCE,    </span><br><span class="line">    IDENTITY,    </span><br><span class="line">    AUTO   </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>JPA提供的四种标准用法为<code>TABLE</code>,<code>SEQUENCE</code>,<code>IDENTITY</code>,<code>AUTO</code>. </p><ul><li>TABLE：使用一个特定的数据库表格来保存主键。 <br>GenerationType.TABLE：使用一个特定的数据库表格来保存主键,持久化引擎通过关系数据库的一张特定的表格来生成主键,这种策略的好处就是不依赖于外部环境和数据库的具体实现,在不同数据库间可以很容易的进行移植,但由于其不能充分利用数据库的特性,所以不会优先使用。该策略一般与另外一个注解一起使用@TableGenerator,@TableGenerator注解指定了生成主键的表(可以在实体类上指定也可以在主键字段或属性上指定),然后JPA将会根据注解内容自动生成一张表作为序列表(或使用现有的序列表)。如果不指定序列表,则会生成一张默认的序列表,表中的列名也是自动生成,数据库上会生成一张名为sequence的表(SEQ_NAME,SEQ_COUNT)。序列表一般只包含两个字段:第一个字段是该生成策略的名称,第二个字段是该关系表的最大序号,它会随着数据的插入逐渐累加。例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Id  </span><br><span class="line">@GeneratedValue(strategy &#x3D; GenerationType.TABLE, generator &#x3D; &quot;id_sequence&quot;)  </span><br><span class="line">@TableGenerator(name &#x3D; &quot;id_sequence&quot;, allocationSize &#x3D; 1, table &#x3D; &quot;sequence_table&quot;, pkColumnName &#x3D; &quot;sequence_max_id&quot;, valueColumnName &#x3D; &quot;sequence_count&quot;)  </span><br><span class="line">private int id;</span><br></pre></td></tr></table></figure></li><li>SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。 <br>GenerationType.SEQUENCE：在某些数据库中,不支持主键自增长,比如Oracle,其提供了一种叫做”序列(sequence)”的机制生成主键。此时,GenerationType.SEQUENCE就可以作为主键生成策略。该策略的不足之处正好与TABLE相反,由于只有部分数据库(Oracle,PostgreSQL,DB2)支持序列对象,所以该策略一般不应用于其他数据库。类似的,该策略一般与另外一个注解一起使用@SequenceGenerator,@SequenceGenerator注解指定了生成主键的序列.然后JPA会根据注解内容创建一个序列(或使用一个现有的序列)。如果不指定序列,则会自动生成一个序列SEQ_GEN_SEQUENCE。例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Id  </span><br><span class="line">@GeneratedValue(strategy &#x3D; GenerationType.SEQUENCE, generator &#x3D; &quot;id_sequence&quot;)  </span><br><span class="line">@SequenceGenerator(name &#x3D; &quot;id_sequence&quot;, initialValue &#x3D; 1, allocationSize &#x3D; 1, sequenceName &#x3D; &quot;ID_SEQUENCE&quot;)  </span><br><span class="line">private int id;</span><br></pre></td></tr></table></figure></li><li>IDENTITY：主键由数据库自动生成（主要是自动增长型） <br>GenerationType.IDENTITY：此种主键生成策略就是通常所说的主键自增长,数据库在插入数据时,会自动给主键赋值,比如MYSQL可以在创建表时声明”auto_increment” 来指定主键自增长。该策略在大部分数据库中都提供了支持(指定方法或关键字可能不同),但还是有少数数据库不支持,所以可移植性略差。使用自增长主键生成策略是只需要声明strategy = GenerationType.IDENTITY即可。例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Id  </span><br><span class="line">@GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)  </span><br><span class="line">private int id;</span><br></pre></td></tr></table></figure></li><li>AUTO：主键由程序控制。<br>GenerationType.AUTO：把主键生成策略交给持久化引擎(persistence engine),持久化引擎会根据数据库在以上三种主键生成策略中选择其中一种。此种主键生成策略比较常用,由于JPA默认的生成策略就是GenerationType.AUTO,所以使用此种策略时.可以显式的指定@GeneratedValue(strategy = GenerationType.AUTO)也可以直接@GeneratedValue。例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;如果不指定具体的生成规则，则默认为AUTO，即下列两种情况等价</span><br><span class="line">@Id  </span><br><span class="line">@GeneratedValue(strategy &#x3D; GenerationType.AUTO) </span><br><span class="line">private String id;</span><br><span class="line"></span><br><span class="line">@Id  </span><br><span class="line">private String id;</span><br></pre></td></tr></table></figure></li></ul><p>常用数据库支持生成规则如下：</p><table><thead><tr><th align="center"></th><th align="center">mysql</th><th align="center">Oracle</th><th align="center">PostgreSQL</th></tr></thead><tbody><tr><td align="center">GenerationType.TABLE</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">GenerationType.AUTO</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">GenerationType.IDENTITY</td><td align="center">√</td><td align="center">x</td><td align="center">√</td></tr><tr><td align="center">GenerationType.SEQUENCE</td><td align="center">x</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><h1 id="3-Hibernate主键策略生成"><a href="#3-Hibernate主键策略生成" class="headerlink" title="3.Hibernate主键策略生成"></a>3.Hibernate主键策略生成</h1><p>hibernate-5.3.7.Final版本的默认工厂中有<code>14种</code>生成策略,具体可见org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public DefaultIdentifierGeneratorFactory() &#123;</span><br><span class="line">register( &quot;uuid2&quot;, UUIDGenerator.class );</span><br><span class="line">register( &quot;guid&quot;, GUIDGenerator.class );&#x2F;&#x2F; can be done with UUIDGenerator + strategy</span><br><span class="line">register( &quot;uuid&quot;, UUIDHexGenerator.class );&#x2F;&#x2F; &quot;deprecated&quot; for new use</span><br><span class="line">register( &quot;uuid.hex&quot;, UUIDHexGenerator.class ); &#x2F;&#x2F; uuid.hex is deprecated</span><br><span class="line">register( &quot;assigned&quot;, Assigned.class );</span><br><span class="line">register( &quot;identity&quot;, IdentityGenerator.class );</span><br><span class="line">register( &quot;select&quot;, SelectGenerator.class );</span><br><span class="line">register( &quot;sequence&quot;, SequenceStyleGenerator.class );</span><br><span class="line">register( &quot;seqhilo&quot;, SequenceHiLoGenerator.class );</span><br><span class="line">register( &quot;increment&quot;, IncrementGenerator.class );</span><br><span class="line">register( &quot;foreign&quot;, ForeignGenerator.class );</span><br><span class="line">register( &quot;sequence-identity&quot;, SequenceIdentityGenerator.class );</span><br><span class="line">register( &quot;enhanced-sequence&quot;, SequenceStyleGenerator.class );</span><br><span class="line">register( &quot;enhanced-table&quot;, TableGenerator.class );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对几种比较常用的类型进行说明：</p><ul><li>uuid<br>采用128位的uuid算法生成主键，uuid被编码为一个32位16进制数字的字符串。<br>当使用strategy为uuid时，使用的时hibernate自己定义的UUID生成算法，此策略已过时，其具体实现参照org.hibernate.id. UUIDHexGenerator, 生成的字符串如402880876359adeb016359ae27190000当使用strategy为uuid2时，此为此版本推荐使用的uuid生成算法，其默认采用标准的生成策略StandardRandomStrategy，实现为使用jdk自带的uuid生成方法，生成的字符串如4af17c8e-8317-43e9-aff9-12d5590a71c6<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Id</span><br><span class="line">@GeneratedValue(generator &#x3D; &quot;faceset_generator&quot;)</span><br><span class="line">@GenericGenerator(name &#x3D; &quot;faceset_generator&quot;, strategy &#x3D; &quot;uuid&quot;)</span><br></pre></td></tr></table></figure></li><li>assigned<br>插入主键时，由程序来指定。相当于JPA中的AUTO。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Id</span><br><span class="line">@GeneratedValue(generator &#x3D; &quot;faceset_generator&quot;)</span><br><span class="line">@GenericGenerator(name &#x3D; &quot;faceset_generator&quot;, strategy &#x3D; &quot;assigned&quot;)</span><br></pre></td></tr></table></figure></li><li>sequence<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Id</span><br><span class="line">@GeneratedValue(generator &#x3D; &quot;faceset_generator&quot;)  </span><br><span class="line">@GenericGenerator(name &#x3D; &quot;faceset_generator&quot;, strategy &#x3D; &quot;sequence&quot;,    parameters &#x3D; &#123; @Parameter(name &#x3D; &quot;sequence&quot;, value &#x3D; &quot;faceset_seq&quot;) &#125;) </span><br></pre></td></tr></table></figure></li><li>guid<br>采用数据库底层的guid算法机制，对应MYSQL的uuid()函数，SQL Server的newid()函数，ORACLE的rawtohex(sys_guid())函数等</li></ul><p>来自<a href="https://www.jianshu.com/p/ee87671a492b">SpringDataJpa-主键生成策略</a></p><h1 id="4-自定义主键生成策略"><a href="#4-自定义主键生成策略" class="headerlink" title="4.自定义主键生成策略"></a>4.自定义主键生成策略</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.dancer4code.actuator.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">import org.hibernate.annotations.GenericGenerator;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 17:14</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@Entity</span><br><span class="line">@Table(name &#x3D; &quot;student&quot;)</span><br><span class="line"></span><br><span class="line">public class Student implements Serializable&#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GenericGenerator(name &#x3D; &quot;my_id&quot;, strategy &#x3D; &quot;com.dancer4code.actuator.utils.MyIdGenerator&quot; )</span><br><span class="line">    @GeneratedValue(generator &#x3D; &quot;my_id&quot;)</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>MyIdGenerator.java</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.dancer4code.actuator.utils;</span><br><span class="line"></span><br><span class="line">import org.hibernate.HibernateException;</span><br><span class="line">import org.hibernate.engine.spi.SharedSessionContractImplementor;</span><br><span class="line">import org.hibernate.id.IdentifierGenerator;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 19:01</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MyIdGenerator implements IdentifierGenerator &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Serializable generate(SharedSessionContractImplementor session, Object object) throws HibernateException &#123;</span><br><span class="line">        return &quot;d4c-&quot;+UUID.randomUUID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>成功实现自己的id生成</em><br><img src="https://upload-images.jianshu.io/upload_images/19382524-45ae6b26ffdb8023.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p><p>源码见gitee中<a href="https://gitee.com/dancer4code/spring-boot-lab">spring-boot-lab</a></p><p>如果还不够用请参考雪花算法<br>更多其他内容请参考<a href="https://www.jianshu.com/p/9d7ebe37215e">分布式全局唯一ID生成策略</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring boot" scheme="http://example.com/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://example.com/tags/spring-boot/"/>
    
    <category term="jpa" scheme="http://example.com/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot+jpa简单实现</title>
    <link href="http://example.com/2020/08/14/spring-boot/spring-boot+jpa%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2020/08/14/spring-boot/spring-boot+jpa%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-08-14T14:36:00.000Z</published>
    <updated>2020-10-28T08:29:39.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#1.创建maven项目<br>不演示了，想知道更多的自己百度<br>#2.maven依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--提供很多方便的功能--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.18.8&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--jpa只要导入这个就好--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--mysql版本外在差异主要是驱动类的改变--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;8.0.16&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.58&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>#3.启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.dancer4code.actuator;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 9:57</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@SpringBootApplication</span><br><span class="line">&#x2F;&#x2F;@ServletComponentScan(basePackages &#x3D; &quot;com.dancer4code.actuator.filter&quot;)</span><br><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#4.配置文件application.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8000</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: actuator-demo</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3307&#x2F;testdb?serverTimezone&#x3D;UTC&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false</span><br><span class="line">    username: root</span><br><span class="line">    password: mysqlzlq</span><br><span class="line">  jpa:</span><br><span class="line">    show-sql: true</span><br><span class="line">    open-in-view: true</span><br><span class="line">management:</span><br><span class="line">  endpoint:</span><br><span class="line">    shutdown:</span><br><span class="line">      enabled: true</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: shutdown,*</span><br><span class="line">      base-path: &#x2F;d4c&#x2F;actuator</span><br></pre></td></tr></table></figure><p>#5.Dao</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.dancer4code.actuator.dao;</span><br><span class="line"></span><br><span class="line">import com.dancer4code.actuator.pojo.Student;</span><br><span class="line">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 17:20</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">public interface StudentDao  extends JpaRepository&lt;Student,Integer&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#6.实体类pojo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.dancer4code.actuator.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">import org.hibernate.annotations.GenericGenerator;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 17:14</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@Entity</span><br><span class="line">@Table(name &#x3D; &quot;student&quot;)</span><br><span class="line">&#x2F;&#x2F;@GenericGenerator(name &#x3D; &quot;uuid2&quot;, strategy &#x3D; &quot;org.hibernate.id.UUIDGenerator&quot; )</span><br><span class="line">@GenericGenerator(name &#x3D; &quot;uuid2&quot;, strategy &#x3D; &quot;com.dancer4code.actuator.utils.MyIdGenerator&quot; )</span><br><span class="line"></span><br><span class="line">public class Student implements Serializable&#123;</span><br><span class="line">    @Id</span><br><span class="line">    &#x2F;&#x2F;@GenericGenerator(name &#x3D; &quot;idGenerator&quot;, strategy &#x3D; &quot;increment&quot;)</span><br><span class="line">    @GeneratedValue(generator &#x3D; &quot;uuid2&quot;)</span><br><span class="line">    &#x2F;&#x2F;@GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#7.controller</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package com.dancer4code.actuator.controller;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.dancer4code.actuator.dao.StudentDao;</span><br><span class="line">import com.dancer4code.actuator.pojo.Student;</span><br><span class="line">import com.dancer4code.actuator.utils.HttpJsonUtil;</span><br><span class="line">import com.fasterxml.jackson.databind.util.JSONPObject;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 18:16</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;student&quot;)</span><br><span class="line">public class StudentController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    protected HttpServletRequest request ;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    protected HttpServletResponse response ;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    protected HttpSession session ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;add&quot;)</span><br><span class="line">    public void add()&#123;</span><br><span class="line">        Student stu &#x3D; new Student(null,&quot;黄飞鸿&quot;,28);</span><br><span class="line">        studentDao.save(stu);</span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        jsonObject.put(&quot;result&quot;, &quot;success&quot;);</span><br><span class="line">        jsonObject.put(&quot;message&quot;, &quot;增加学生成功-id:&quot;+stu.getId());</span><br><span class="line">        HttpJsonUtil.writeJsonData(response, jsonObject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAll&quot;)</span><br><span class="line">    public void findAll ()&#123;</span><br><span class="line">        &#x2F;&#x2F;return studentDao.findAll();</span><br><span class="line">        List&lt;Student&gt; list &#x3D; studentDao.findAll();</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        jsonObject.put(&quot;result&quot;, &quot;success&quot;);</span><br><span class="line">        jsonObject.put(&quot;message&quot;, &quot;查询学生列表成功&quot;);</span><br><span class="line">        jsonObject.put(&quot;data&quot;,list);</span><br><span class="line">        HttpJsonUtil.writeJsonData(response, jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#8.util</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.dancer4code.actuator.utils;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 18:16</span><br><span class="line"> * Description:将Java Bean序列化为JSON字符串,响应到客户端</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class HttpJsonUtil &#123;</span><br><span class="line"></span><br><span class="line">    public static void writeJsonData(HttpServletResponse response, JSONObject jsonResponse) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">            if (jsonResponse.containsKey(&quot;message&quot;) &amp;&amp; jsonResponse.getString(&quot;message&quot;) !&#x3D; null &amp;&amp; !jsonResponse.getString(&quot;message&quot;).isEmpty()) &#123;</span><br><span class="line">                String message &#x3D; URLEncoder.encode(jsonResponse.getString(&quot;message&quot;), &quot;utf-8&quot;);</span><br><span class="line">                jsonResponse.put(&quot;message&quot;, message);</span><br><span class="line">            &#125;</span><br><span class="line">            response.getWriter().write(jsonResponse.toString());</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">            response.getWriter().close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void writeJsonData(HttpServletResponse response, JSONArray jsonArray) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">            response.getWriter().write(jsonArray.toString());</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">            response.getWriter().close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void writeJsonData(HttpServletResponse response, String str) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">            response.getWriter().write(str);</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">            response.getWriter().close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>自定义id生成类</strong><br>请参考<br><a href="https://www.jianshu.com/p/3b384e873232">spring boot+jpa演示id的生成策略及自定义id</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.dancer4code.actuator.utils;</span><br><span class="line"></span><br><span class="line">import org.hibernate.HibernateException;</span><br><span class="line">import org.hibernate.engine.spi.SharedSessionContractImplementor;</span><br><span class="line">import org.hibernate.id.IdentifierGenerator;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 19:01</span><br><span class="line"> * Description:自定义id生成类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MyIdGenerator implements IdentifierGenerator &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Serializable generate(SharedSessionContractImplementor session, Object object) throws HibernateException &#123;</span><br><span class="line">        return &quot;d4c-&quot;+UUID.randomUUID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#9.结果<br><img src="https://upload-images.jianshu.io/upload_images/19382524-3f4b4a1d83ea0f76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p><p>返回的结果中，中文乱码<br>可以自定义一个解决乱码的过滤器<br><strong>比如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">package com.dancer4code.actuator.filter;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 19:45</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">&#x2F;&#x2F;@WebFilter</span><br><span class="line">&#x2F;&#x2F;@Configuration</span><br><span class="line">&#x2F;&#x2F;@Order(value &#x3D; 15)</span><br><span class="line">public class MyCharacterEncodingFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest,</span><br><span class="line">                         ServletResponse servletResponse, FilterChain filterChain)</span><br><span class="line">            throws IOException, ServletException &#123;</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;----------------MyCharacterEncordingFilter------doFilter-----------------&quot;);</span><br><span class="line">        HttpServletRequest request &#x3D; (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response &#x3D; (HttpServletResponse) servletResponse;</span><br><span class="line">        request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);</span><br><span class="line">        filterChain.doFilter(new MyRequest(request), response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">     * 1.写一个类实现与被增强对象相同的接口</span><br><span class="line">     * 2.定义一个变量，记住被增强的对象</span><br><span class="line">     * 3.定义一个构造方法，接受被增强对象</span><br><span class="line">     * 4.覆盖想增强的方法</span><br><span class="line">     * 5.对于不想增强的方法，直接调用被增强对象（目标对象）的方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    class MyRequest extends HttpServletRequestWrapper &#123;</span><br><span class="line">        private HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">        public MyRequest(HttpServletRequest request) &#123;</span><br><span class="line">            super(request);</span><br><span class="line">            this.request &#x3D; request;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String getParameter(String name) &#123;</span><br><span class="line">            String value &#x3D; this.request.getParameter(name);</span><br><span class="line">            if (!request.getMethod().equalsIgnoreCase(&quot;get&quot;)) &#123;</span><br><span class="line">                return value;</span><br><span class="line">            &#125;</span><br><span class="line">            if (value &#x3D;&#x3D; null) &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                return new String(value.getBytes(&quot;UTF-8&quot;),</span><br><span class="line">                        request.getCharacterEncoding());</span><br><span class="line"></span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                throw new RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;---MyCharacterEncordingFilter-----init-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        &#x2F;&#x2F;System.out.println(&quot;---MyCharacterEncordingFilter-----destroy-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>请参考<br><a href="https://www.jianshu.com/p/6fc23042e417">彻底搞定乱码-自定义过滤器（filter）-3</a></p><p><strong>最终解决乱码</strong><br><img src="https://upload-images.jianshu.io/upload_images/19382524-3e8bf1edb044a0c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p><p>demo代码请参考gitee   <a href="https://gitee.com/dancer4code/spring-boot-lab">spring-boot-lab</a></p><p><code>搞定了......</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring boot" scheme="http://example.com/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://example.com/tags/spring-boot/"/>
    
    <category term="jpa" scheme="http://example.com/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot+actuator</title>
    <link href="http://example.com/2020/08/13/spring-boot/spring-boot+actuator/"/>
    <id>http://example.com/2020/08/13/spring-boot/spring-boot+actuator/</id>
    <published>2020-08-13T14:36:00.000Z</published>
    <updated>2020-10-28T08:27:35.991Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-创建一个spring-boot工程并添加依赖"><a href="#1-创建一个spring-boot工程并添加依赖" class="headerlink" title="1.创建一个spring boot工程并添加依赖"></a>1.创建一个spring boot工程并添加依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>#2.配置文件<br><em>application.yml</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8000</span><br><span class="line">management:</span><br><span class="line">  endpoint:</span><br><span class="line">    shutdown:</span><br><span class="line">      enabled: true #shutdown默认关闭，此时打开</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: shutdown,*  # shutdown配合这个，才能在列表中出现</span><br><span class="line">      base-path: &#x2F;d4c&#x2F;actuator #命名空间</span><br></pre></td></tr></table></figure><p>然后启动项目,就可以访问了不配置任何的情况下<br>直接访问<a href="http://localhost:8000/actuator">http://localhost:8000/actuator</a><br>可见下列结果</p><p><img src="https://upload-images.jianshu.io/upload_images/19382524-e46fbd6b7d244b08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p><p>我配置了配置文件<br>所以需要访问</p><p><code>结果</code><br><img src="https://upload-images.jianshu.io/upload_images/19382524-f612a7ee9561985c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p><p><code>关闭应用</code></p><p><img src="https://upload-images.jianshu.io/upload_images/19382524-33d3de31e8624798.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="shutdown"></p><p><code>注意： </code>要发送post请求才能关闭应用，get不行。</p><p>若想spring boot Actuator+spring boot Security请参考<br><a href="https://www.jianshu.com/p/d5943e303a1f">Spring Boot Actuator:健康检查、审计、统计和监控</a><br><a href="https://blog.csdn.net/niugang0920/article/details/79756977">24.Spring-Boot-Actuator与Spring-Security整合应用7</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring boot" scheme="http://example.com/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://example.com/tags/spring-boot/"/>
    
    <category term="actuator" scheme="http://example.com/tags/actuator/"/>
    
  </entry>
  
  <entry>
    <title>CommandLineRunner和ApplicationRunner用法</title>
    <link href="http://example.com/2020/08/12/spring-boot/CommandLineRunner,ApplicationRunner/"/>
    <id>http://example.com/2020/08/12/spring-boot/CommandLineRunner,ApplicationRunner/</id>
    <published>2020-08-12T14:36:00.000Z</published>
    <updated>2020-10-28T08:27:54.676Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>业务场景:</strong><br>应用服务启动时，加载一些数据和执行一些应用的初始化动作。如：删除临时文件，清除缓存信息，读取配置文件信息，数据库连接等。<br>SpringBoot提供了CommandLineRunner和ApplicationRunner接口。当接口有多个实现类时，提供了@order注解实现自定义执行顺序，也可以实现Ordered接口来自定义顺序。<br>注意：数字越小，优先级越高，也就是@Order(1)注解的类会在@Order(2)注解的类之前执行。<br><strong>两者的区别在于：</strong><br>ApplicationRunner中run方法的参数为ApplicationArguments，而CommandLineRunner接口中run方法的参数为String数组。想要更详细地获取命令行参数，那就使用ApplicationRunner接口</p><p><strong>ApplicationRunner</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Order(value &#x3D; 1)</span><br><span class="line">public class AgentApplicationRun2 implements ApplicationRunner &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run(ApplicationArguments applicationArguments) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CommandLineRunner</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Order(value &#x3D; 12)</span><br><span class="line">public class AgentApplicationRun implements CommandLineRunner &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run(String... strings) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用实现CommandLineRunner 但其初始化动作，不是必须完成才能运行。最好开启多线程，因为CommandLineRunner 默认是由主线程启动，若出错，其后的主线程会直接退出。<br>但CommandLineRunner 这个初始化动作一般是必须的。所以，大部分不需要新启线程。</p><p><strong>新启线程方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.boot.CommandLineRunner;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class MyRunner implements CommandLineRunner &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run(String... args) throws Exception &#123;</span><br><span class="line">        log.info(&quot;--------MyRunner----------&quot;);</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line">        new Thread() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                &#x2F;&#x2F;TODO</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>CommandLineRunner与@PostConstruct区别</strong></p><blockquote><p>在一个类内，如果有构造器（Constructor ），有@PostConstruct，还有@Autowired，他们的先后执行顺序为Constructor &gt;&gt; @Autowired &gt;&gt; @PostConstruct。</p></blockquote><blockquote><p>因为一个有声明注解的类文件（必须有声明，这样在项目初始化时候才会注入），在项目启动后，会对对象进行依赖注入，而初始化的动作会依赖于对象，所以假象上看，也类似于项目启动就会执行的操作，因此，我们也可以通过这样的形式，对数据进行初始化。</p></blockquote><blockquote><p>说明一下，@PostConstruct更针对性于当前类文件，而CommandLineRunner更服务于整个项目。所以在我们使用中，可根据自己的使用场景来进行选择用这两种方式来实现初始化。</p></blockquote><p><strong>引用参考</strong></p><p><a href="https://blog.csdn.net/weixin_38362455/article/details/83023025">spring boot：ApplicationRunner和CommandLineRunner用法区别</a><br><a href="https://blog.csdn.net/cx1110162/article/details/87866633">spring boot 启动加载 CommandLineRunner @PostConstruct</a><br><a href="https://blog.csdn.net/zwq_zwq_zwq/article/details/81059017">使用Spring Boot 的CommandLineRunner遇到的坑</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring boot" scheme="http://example.com/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://example.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>自定义过滤器filter</title>
    <link href="http://example.com/2020/08/11/spring-boot/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8filter/"/>
    <id>http://example.com/2020/08/11/spring-boot/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8filter/</id>
    <published>2020-08-11T14:36:00.000Z</published>
    <updated>2020-10-28T08:28:11.884Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#这里介绍两种几种种自定义filter的方式</p><ul><li>通过<code>@WebFilter</code>+<code>@ServletComponentScan</code>的方式</li><li>通过配置<code>FilterRegistrationBean</code>的方式</li><li>通过加注解<code>@component</code>等注入的方式</li></ul><p>##1.通过<code>@WebFilter</code>+<code>@ServletComponentScan</code>的方式</p><p><code>filter类</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.filter;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Order(1)</span><br><span class="line">@WebFilter(filterName &#x3D; &quot;firstName&quot;,urlPatterns &#x3D; &quot;&#x2F;hello&#x2F;*&quot;)</span><br><span class="line">public class FirstFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        log.info(&quot;FirstFilter init--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        log.info(&quot;FirstFilter doFilter--------&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;FirstFilter destroy--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动类上要加<code>@ServletComponentScan</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line">@ServletComponentScan</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class CustomBeanApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(CustomBeanApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@WebFilter常用属性</strong></p><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">是否必需</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">asyncSupported</td><td align="center">boolean</td><td align="center">否</td><td align="center">指定Filter是否支持异步模式</td></tr><tr><td align="center">dispatcherTypes</td><td align="center">DispatcherType[]</td><td align="center">否</td><td align="center">指定Filter对哪种方式的请求进行过滤。 支持的属性：ASYNC、ERROR、FORWARD、INCLUDE、REQUEST； 默认过滤所有方式的请求</td></tr><tr><td align="center">filterName</td><td align="center">String</td><td align="center">否</td><td align="center">Filter名称</td></tr><tr><td align="center">initParams</td><td align="center">WebInitParam[]</td><td align="center">否</td><td align="center">配置参数</td></tr><tr><td align="center">displayName</td><td align="center">String</td><td align="center">否</td><td align="center">Filter显示名</td></tr><tr><td align="center">servletNames</td><td align="center">String[]</td><td align="center">否</td><td align="center">指定对哪些Servlet进行过滤</td></tr><tr><td align="center">urlPatterns/value</td><td align="center">String[]</td><td align="center">否</td><td align="center">两个属性作用相同，指定拦截的路径</td></tr></tbody></table><p><strong>过滤器的urlPatterns的过滤路径规则：</strong></p><ul><li>1.全路径匹配： /hello/do.html</li><li>2.部分路径匹配： /hello/*</li><li>3.通配符匹配 ：/*</li><li>4.后缀名匹配 ：*.html(注意:前面不加/)</li></ul><p><strong>@Order</strong><br>@Orde注解是决定着执行顺序，而不是类的初始化顺序。order数字越小，优先级越高。<code>最好，统一用一种方式定义filter，否则@Order可能不起作用（混乱）。</code></p><p>#2.通过配置<code>FilterRegistrationBean</code>的方式</p><p><code>filter类</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.filter;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">public class SecondFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        log.info(&quot;SecondFilter init--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        log.info(&quot;SecondFilter doFilter--------&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;SecondFilter destroy--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>配置类</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import com.d4c.custombean.filter.SecondFilter;</span><br><span class="line">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class MyRegisterBean &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean filterRegistrationBean()&#123;</span><br><span class="line">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean();</span><br><span class="line">        &#x2F;&#x2F;注册自定义过滤器</span><br><span class="line">        bean.setFilter(new SecondFilter());</span><br><span class="line">        &#x2F;&#x2F;过滤器名称</span><br><span class="line">        bean.setName(&quot;second filter bean&quot;);</span><br><span class="line">        &#x2F;&#x2F;过滤所有路径</span><br><span class="line">        bean.addUrlPatterns(&quot;&#x2F;do&#x2F;*&quot;);</span><br><span class="line">        &#x2F;&#x2F;优先级，数字越小，优先级越高</span><br><span class="line">        bean.setOrder(2);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#3.通过加注解<code>@Component</code>等注入的方式<br><strong>虽然这种方式能实现filter，但是不推荐。最好第一种或第二种方式选其一</strong></p><p><code>filter类</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.filter;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Order(3)</span><br><span class="line">&#x2F;&#x2F;或者用@Configuration</span><br><span class="line">@Component   </span><br><span class="line">public class ThirdFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        log.info(&quot;ThirdFilter init--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        log.info(&quot;ThirdFilter doFilter--------&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;ThirdFilter destroy--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring boot" scheme="http://example.com/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://example.com/tags/spring-boot/"/>
    
    <category term="filter" scheme="http://example.com/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>自定义servlet</title>
    <link href="http://example.com/2020/08/10/spring-boot/%E8%87%AA%E5%AE%9A%E4%B9%89servlet/"/>
    <id>http://example.com/2020/08/10/spring-boot/%E8%87%AA%E5%AE%9A%E4%B9%89servlet/</id>
    <published>2020-08-10T14:36:00.000Z</published>
    <updated>2020-10-28T08:28:28.151Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#两种方式</p><ul><li>@WebServlet注解+@ServletComponentScan</li><li>通过配置FilterRegistrationBean的方式</li></ul><hr><p>##1. @WebServlet注解+@ServletComponentScan</p><p><code>servlet</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.servlet;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@WebServlet(name&#x3D;&quot;FirstServlet&quot;,urlPatterns &#x3D; &quot;&#x2F;servlet&#x2F;*&quot;,loadOnStartup &#x3D; 1)</span><br><span class="line">public class FirstServlet implements Servlet &#123;</span><br><span class="line"></span><br><span class="line">    private ServletConfig servletConfig;</span><br><span class="line">    private ServletRequest servletRequest;</span><br><span class="line">    private ServletResponse servletResponse;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(ServletConfig config) throws ServletException &#123;</span><br><span class="line">        this.servletConfig &#x3D; config;</span><br><span class="line">        log.info(&quot;FirstServlet init-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ServletConfig getServletConfig() &#123;</span><br><span class="line">        return servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException &#123;</span><br><span class="line">        log.info(&quot;FirstServlet service-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getServletInfo() &#123;</span><br><span class="line">        return servletRequest.getServletContext().getServerInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;FirstServlet destroy-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>启动类</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line">@ServletComponentScan</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class CustomBeanApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(CustomBeanApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@WebServlet常用属性</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">是否必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">asyncSupported</td><td align="left">boolean</td><td align="left">否</td><td align="left">指定Servlet是否支持异步操作模式</td></tr><tr><td align="left">displayName</td><td align="left">String</td><td align="left">否</td><td align="left">指定Servlet显示名称</td></tr><tr><td align="left">initParams</td><td align="left">WebInitParam[]</td><td align="left">否</td><td align="left">配置初始化参数</td></tr><tr><td align="left">loadOnStartup</td><td align="left">int</td><td align="left">否</td><td align="left">标记容器是否在应用启动时就加载这个Servlet</td></tr><tr><td align="left">name</td><td align="left">String</td><td align="left">否</td><td align="left">指定Servlet名称</td></tr><tr><td align="left">urlPatterns/value</td><td align="left">String[]</td><td align="left">否</td><td align="left">这两个属性作用相同，指定Servlet处理的url</td></tr></tbody></table><p><strong>也可以继承HttpServlet</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.servlet;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@WebServlet(name&#x3D;&quot;SecondServlet&quot;,urlPatterns &#x3D; &quot;&#x2F;servlet2&#x2F;*&quot;,loadOnStartup &#x3D; 2)</span><br><span class="line">public class SecondServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        log.info(&quot;SecondServlet doGet-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        log.info(&quot;SecondServlet doPost-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init() throws ServletException &#123;</span><br><span class="line">        log.info(&quot;SecondServlet init-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;SecondServlet destroy-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>##2.通过配置FilterRegistrationBean的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.servlet;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@WebServlet(name&#x3D;&quot;ThirdServlet&quot;,urlPatterns &#x3D; &quot;&#x2F;servlet3&#x2F;*&quot;,loadOnStartup &#x3D; 3)</span><br><span class="line">public class ThirdServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        log.info(&quot;ThirdServlet doGet-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        log.info(&quot;ThirdServlet doPost-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init() throws ServletException &#123;</span><br><span class="line">        log.info(&quot;ThirdServlet init-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;ThirdServlet destroy-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import com.d4c.custombean.filter.SecondFilter;</span><br><span class="line">import com.d4c.custombean.servlet.ThirdServlet;</span><br><span class="line">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class MyRegisterBean &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean servletRegistrationBean()&#123;</span><br><span class="line">        ServletRegistrationBean bean &#x3D; new ServletRegistrationBean();</span><br><span class="line">        &#x2F;&#x2F;注册自定义过滤器</span><br><span class="line">        bean.setServlet(new ThirdServlet());</span><br><span class="line">        &#x2F;&#x2F;过滤器名称</span><br><span class="line">        bean.setName(&quot;ThirdServlet&quot;);</span><br><span class="line">        &#x2F;&#x2F;过滤所有路径</span><br><span class="line">        bean.addUrlMappings(&quot;&#x2F;servlet3&quot;);</span><br><span class="line">        &#x2F;&#x2F;优先级</span><br><span class="line">        bean.setOrder(3);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>推荐用第二种</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring boot" scheme="http://example.com/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://example.com/tags/spring-boot/"/>
    
    <category term="servlet" scheme="http://example.com/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>自定义listener</title>
    <link href="http://example.com/2020/08/09/spring-boot/%E8%87%AA%E5%AE%9A%E4%B9%89listener/"/>
    <id>http://example.com/2020/08/09/spring-boot/%E8%87%AA%E5%AE%9A%E4%B9%89listener/</id>
    <published>2020-08-09T14:36:00.000Z</published>
    <updated>2020-10-28T08:28:39.899Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#两种方式，一种是基于注解，另一种通过注册bean注册</p><hr><p>#方式一：基于注解</p><p><code>@WebListener</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.listener;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebListener;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line">@WebListener</span><br><span class="line">@Slf4j</span><br><span class="line">public class MyServletContextListener implements ServletContextListener, ServletContextAttributeListener, HttpSessionListener,</span><br><span class="line">        HttpSessionAttributeListener, HttpSessionBindingListener,HttpSessionActivationListener,HttpSessionIdListener,</span><br><span class="line">        ServletRequestListener,ServletRequestAttributeListener</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;ServletContextAttributeListener</span><br><span class="line">    @Override</span><br><span class="line">    public void attributeAdded(ServletContextAttributeEvent scae) &#123;</span><br><span class="line">        log.info(&quot;ServletContextAttributeListener attributeAdded-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeRemoved(ServletContextAttributeEvent scae) &#123;</span><br><span class="line">        log.info(&quot;ServletContextAttributeListener attributeRemoved-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeReplaced(ServletContextAttributeEvent scae) &#123;</span><br><span class="line">        log.info(&quot;ServletContextAttributeListener attributeReplaced-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;ServletContextListener</span><br><span class="line">    @Override</span><br><span class="line">    public void contextInitialized(ServletContextEvent sce) &#123;</span><br><span class="line">        log.info(&quot;ServletContextListener contextInitialized-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void contextDestroyed(ServletContextEvent sce) &#123;</span><br><span class="line">        log.info(&quot;ServletContextListener contextDestroyed-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;HttpSessionIdListener</span><br><span class="line">    @Override</span><br><span class="line">    public void sessionIdChanged(HttpSessionEvent se, String oldSessionId) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionIdListener sessionIdChanged-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;HttpSessionActivationListener</span><br><span class="line">    @Override</span><br><span class="line">    public void sessionWillPassivate(HttpSessionEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionActivationListener sessionWillPassivate-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sessionDidActivate(HttpSessionEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionActivationListener sessionDidActivate-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;HttpSessionAttributeListener</span><br><span class="line">    @Override</span><br><span class="line">    public void attributeAdded(HttpSessionBindingEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionAttributeListener attributeAdded-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeRemoved(HttpSessionBindingEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionAttributeListener attributeRemoved-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeReplaced(HttpSessionBindingEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionAttributeListener attributeReplaced-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;HttpSessionBindingListener</span><br><span class="line">    @Override</span><br><span class="line">    public void valueBound(HttpSessionBindingEvent event) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionBindingListener valueBound-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void valueUnbound(HttpSessionBindingEvent event) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionBindingListener valueUnbound-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;HttpSessionListener</span><br><span class="line">    @Override</span><br><span class="line">    public void sessionCreated(HttpSessionEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionListener sessionCreated-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sessionDestroyed(HttpSessionEvent se) &#123;</span><br><span class="line">        log.info(&quot;HttpSessionBindingListener sessionDestroyed-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;ServletRequestAttributeListener</span><br><span class="line">    @Override</span><br><span class="line">    public void attributeAdded(ServletRequestAttributeEvent srae) &#123;</span><br><span class="line">        log.info(&quot;ServletRequestAttributeListener attributeAdded-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeRemoved(ServletRequestAttributeEvent srae) &#123;</span><br><span class="line">        log.info(&quot;ServletRequestAttributeListener attributeRemoved-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeReplaced(ServletRequestAttributeEvent srae) &#123;</span><br><span class="line">        log.info(&quot;ServletRequestAttributeListener attributeReplaced-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;ServletRequestListener</span><br><span class="line">    @Override</span><br><span class="line">    public void requestDestroyed(ServletRequestEvent sre) &#123;</span><br><span class="line">        log.info(&quot;ServletRequestListener requestDestroyed-----&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void requestInitialized(ServletRequestEvent sre) &#123;</span><br><span class="line">        log.info(&quot;ServletRequestListener requestInitialized-----&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Servlet事件监听器</span><br><span class="line"> 在Servlet技术中已经定义了一些事件，</span><br><span class="line"> 并且我们可以针对这些事件来编写相关的事件监听器，从而对事件作出相应处理。</span><br><span class="line"> Servlet事件主要有3类：Servlet上下文事件、会话事件与请求事件</span><br><span class="line"> 下面具体讲解这3类事件的监听器实现。</span><br><span class="line"> </span><br><span class="line"> 1．对Servlet上下文进行监听</span><br><span class="line"> 可以监听ServletContext对象的创建和删除以及属性的添加、删除和修改等操作。该监听器需要使用到如下两个接口类：</span><br><span class="line">     ● ServletContextAttributeListener：监听对ServletContext属性的操作，如增加、删除、修改操作。</span><br><span class="line">     ● ServletContextListener：监听ServletContext，</span><br><span class="line">         当创建ServletContext时，激发contextInitialized (ServletContextEvent sce)方法。</span><br><span class="line">         当销毁ServletContext时，激发contextDestroyed(ServletContext- Event sce)方法。</span><br><span class="line"> </span><br><span class="line"> 2．监听Http会话</span><br><span class="line"> 可以监听Http会话活动情况、Http会话中属性设置情况，也可以监听Http会话的active、paasivate情况等。该监听器需要使用到如下多个接口类：</span><br><span class="line">   ● HttpSessionListener：监听HttpSession的操作。</span><br><span class="line">         当创建一个Session时，激发session Created (SessionEvent se)方法；</span><br><span class="line">         当销毁一个Session时，激发sessionDestroyed (HttpSessionEvent se)方法。</span><br><span class="line">   ● HttpSessionActivationListener：用于监听Http会话active、passivate情况。</span><br><span class="line">   ● HttpSessionAttributeListener：监听HttpSession中属性的操作。</span><br><span class="line">         当在Session增加一个属性时，激发attributeAdded(HttpSessionBindingEvent se) 方法；</span><br><span class="line">         当在Session删除一个属性时，激发attributeRemoved(HttpSessionBindingEvent se)方法；</span><br><span class="line">         当在Session属性被重新设置时，激发attributeReplaced(HttpSessionBindingEvent se) 方法。</span><br><span class="line">   ● HttpSessionBindingListener：监听HttpSession绑定和解绑</span><br><span class="line">   ● HttpSessionIdListener：</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"> 3．对客户端请求进行监听</span><br><span class="line"> 对客户端的请求进行监听是在Servlet 2.4规范中新添加的一项技术，使用的接口类如下：</span><br><span class="line">     ● ServletRequestListener接口类。</span><br><span class="line">     ● ServletRequestAttrubuteListener接口类</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>#方式二：基于ServletListenerRegistrationBean</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import com.d4c.custombean.filter.SecondFilter;</span><br><span class="line">import com.d4c.custombean.listener.MyServletListener;</span><br><span class="line">import com.d4c.custombean.servlet.ThirdServlet;</span><br><span class="line">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class MyRegisterBean &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletListenerRegistrationBean servletListenerRegistrationBean()&#123;</span><br><span class="line">        ServletListenerRegistrationBean bean &#x3D; new ServletListenerRegistrationBean();</span><br><span class="line">        &#x2F;&#x2F;注册自定义Listener</span><br><span class="line">        bean.setListener(new MyServletListener());</span><br><span class="line">        bean.setEnabled(true);</span><br><span class="line">        &#x2F;&#x2F;路径</span><br><span class="line">        bean.setOrder(3);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>引用文章</strong></p><p><a href="https://www.cnblogs.com/kongxianghao/p/6961843.html">java web Listener的简单使用案例</a><br><a href="https://blog.csdn.net/qq1021979964/article/details/88633586">Spring Boot—(3)整合Web三大组件（Servlet，Filter过滤器，Listener监听器</a><br><a href="https://blog.csdn.net/zhizhuodewo6/article/details/82019409">servlet注解 @WebListener</a><br><a href="https://www.iteye.com/blog/hy2012-2207902">HttpSessionListener与HttpSessionBindingListener之间区别</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring boot" scheme="http://example.com/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://example.com/tags/spring-boot/"/>
    
    <category term="listener" scheme="http://example.com/tags/listener/"/>
    
  </entry>
  
  <entry>
    <title>简单自定义spring-boot启动器starter</title>
    <link href="http://example.com/2020/08/08/spring-boot/%E7%AE%80%E5%8D%95%E8%87%AA%E5%AE%9A%E4%B9%89spring-boot%E5%90%AF%E5%8A%A8%E5%99%A8starter/"/>
    <id>http://example.com/2020/08/08/spring-boot/%E7%AE%80%E5%8D%95%E8%87%AA%E5%AE%9A%E4%B9%89spring-boot%E5%90%AF%E5%8A%A8%E5%99%A8starter/</id>
    <published>2020-08-08T14:36:00.000Z</published>
    <updated>2020-10-28T08:28:48.819Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;groupId&gt;com.d4c.study&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;starter-demo-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-autoconfigure&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p><strong>因为是spring Boot启动器，所以要指定parent为：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.1.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure><p><strong>spring-boot-configuration-processor</strong></p><blockquote><p>spring-boot-configuration-processor的作用是编译时生成 spring-configuration-metadata.json ，此文件主要给IDE使用。如当配置此jar相关配置属性在 application.yml ，你可以用ctlr+鼠标左键点击属性名，IDE会跳转到你配置此属性的类中。<br>我们日常使用的Spring官方的Starter一般采取spring-boot-starter-{name} 的命名方式，如 spring-boot-starter-web 。<br>而非官方的Starter，官方建议 artifactId 命名应遵循{name}-spring-boot-starter 的格式。 例如：mybatis-spring-boot-starter  。</p></blockquote><p><strong>spring-boot-autoconfigure</strong><br>spring-boot-autoconfigure主要是要用到其中的一些注解</p><h1 id="2-定义属性类，用于读取，接受配置文件中的值"><a href="#2-定义属性类，用于读取，接受配置文件中的值" class="headerlink" title="2.定义属性类，用于读取，接受配置文件中的值"></a>2.定义属性类，用于读取，接受配置文件中的值</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.starter.autoconfigure;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line">@ConfigurationProperties(&quot;simple.string&quot;)</span><br><span class="line">public class SimpleProperties &#123;</span><br><span class="line">    private String value;</span><br><span class="line"></span><br><span class="line">    public String getValue() &#123;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setValue(String value) &#123;</span><br><span class="line">        this.value &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ConfigurationProperties与@EnableConfigurationProperties配合使用，实现了配置文件的读取，与引入。</p><h1 id="3-定义功能实现类"><a href="#3-定义功能实现类" class="headerlink" title="3.定义功能实现类"></a>3.定义功能实现类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.starter.autoconfigure;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class StringResolvedBean &#123;</span><br><span class="line">    private String config;</span><br><span class="line"></span><br><span class="line">    public StringResolvedBean(String config) &#123;</span><br><span class="line">        this.config &#x3D; config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String[] split(String separatorChar) &#123;</span><br><span class="line">        return config.split(separatorChar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-自动配置类"><a href="#4-自动配置类" class="headerlink" title="4.自动配置类"></a>4.自动配置类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.starter.autoconfigure;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ConditionalOnClass(StringResolvedBean.class)</span><br><span class="line">@EnableConfigurationProperties(SimpleProperties.class)</span><br><span class="line">public class SimpleStringAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnMissingBean</span><br><span class="line">    @ConditionalOnProperty(prefix &#x3D; &quot;simple.string&quot;, value &#x3D; &quot;enabled&quot;, havingValue &#x3D; &quot;true&quot;)</span><br><span class="line">    StringResolvedBean starterInit(SimpleProperties simpleProperties) &#123;</span><br><span class="line">        return new StringResolvedBean(simpleProperties.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-1-有关条件的注解"><a href="#4-1-有关条件的注解" class="headerlink" title="4.1 有关条件的注解"></a>4.1 有关条件的注解</h2><blockquote><p>@ConditionalOnBean:当容器中有指定的Bean的条件下<br>@ConditionalOnClass：当类路径下有指定的类的条件下<br>@ConditionalOnExpression:基于SpEL表达式作为判断条件<br>@ConditionalOnJava:基于JVM版本作为判断条件<br>@ConditionalOnJndi:在JNDI存在的条件下查找指定的位置<br>@ConditionalOnMissingBean:当容器中没有指定Bean的情况下<br>@ConditionalOnMissingClass:当类路径下没有指定的类的条件下<br>@ConditionalOnNotWebApplication:当前项目不是Web项目的条件下<br>@ConditionalOnProperty:指定的属性是否有指定的值<br>@ConditionalOnResource:类路径下是否有指定的资源<br>@ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean @ConditionalOnWebApplication:当前项目是Web项目的条件下 </p></blockquote><p>#5.创建spring.factories</p><blockquote><p>在resources/META-INF/下创建spring.factories文件，并添加如下内容：<br>org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.d4c.starter.autoconfigure.SimpleStringAutoConfiguration</p></blockquote><h1 id="6-项目路径参考"><a href="#6-项目路径参考" class="headerlink" title="6.项目路径参考"></a>6.项目路径参考</h1><p><img src="https://upload-images.jianshu.io/upload_images/19382524-fe3490d220742aff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="7-打包到本地仓库"><a href="#7-打包到本地仓库" class="headerlink" title="7.打包到本地仓库"></a>7.打包到本地仓库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#切到项目根目录，执行mvn命令</span><br><span class="line">mvn install</span><br></pre></td></tr></table></figure><h1 id="8-其他本地项目就可以maven-dependency引入了"><a href="#8-其他本地项目就可以maven-dependency引入了" class="headerlink" title="8.其他本地项目就可以maven dependency引入了"></a>8.其他本地项目就可以maven dependency引入了</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.d4c.study&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;starter-demo-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 6011</span><br><span class="line">simple:</span><br><span class="line">  string:</span><br><span class="line">    enabled: true</span><br><span class="line">    value: 12,aa,bb,cc</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring boot" scheme="http://example.com/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://example.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-spring-boot跨域问题</title>
    <link href="http://example.com/2020/08/07/spring-boot/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-spring-boot%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/08/07/spring-boot/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-spring-boot%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-07T14:36:00.000Z</published>
    <updated>2020-10-28T08:28:59.826Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>CORS(Cross Origin Resource Sharing,跨域资源共享)机制允许web应用服务器允许跨域访问控制，从而是跨域数据传输得以安全进行。</p></blockquote><h1 id="1-跨域"><a href="#1-跨域" class="headerlink" title="1.跨域"></a>1.跨域</h1><p>##1.1含义<br>1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。<br>最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”。</p><ul><li>协议相同</li><li>域名相同</li><li>端口相同</li></ul><p>举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是<code>http://</code>，域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略）。它的同源情况如下。<br><code>http://www.example.com/dir2/other.html</code>：同源<br><code>http://example.com/dir/other.html</code>：不同源（域名不同）<br><code>http://v2.www.example.com/dir/other.html</code>：不同源（域名不同）<br><code>http://www.example.com:81/dir/other.html</code>：不同源（端口不同）<br>##1.2 目的<br>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。<br>设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？</p><p>很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。<br>由此可见，”同源政策”是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。</p><p>##1.3 限制范围<br>随着互联网的发展，”同源政策”越来越严格。目前，如果非同源，共有三种行为受到限制。</p><ul><li><p>（1） Cookie、LocalStorage 和 IndexDB 无法读取。</p></li><li><p>（2） DOM 无法获得。</p></li><li><p>（3） AJAX 请求不能发送。</p></li></ul><p>虽然这些限制是必要的，但是有时很不方便，合理的用途也受到影响。下面，我将详细介绍，如何规避上面三种限制。</p><p>引用自<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">浏览器同源政策及其规避方法</a></p><p>#2.在spring boot中允许跨域访问</p><p>##2.1方法级别的跨域访问<br>spring boot提供了一种简单的声明式方法来实现跨域请求。使用@CrossOrigin注解实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring boot" scheme="http://example.com/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://example.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot用aop做统一请求日志处理</title>
    <link href="http://example.com/2020/08/06/spring-boot/spring-boot%E7%94%A8aop%E5%81%9A%E7%BB%9F%E4%B8%80%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2020/08/06/spring-boot/spring-boot%E7%94%A8aop%E5%81%9A%E7%BB%9F%E4%B8%80%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/</id>
    <published>2020-08-06T14:36:00.000Z</published>
    <updated>2020-10-28T08:29:16.780Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#1.定义切面、切点@Aspect+@Pointcut</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.exception.demo.aspect;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;9 20:54</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class HttpAspect &#123;</span><br><span class="line">    @Pointcut(&quot;execution(public * com.d4c.exception.demo.controller.*.*(..))&quot;)</span><br><span class="line">    public void pointCut()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Before(&quot;pointCut()&quot;)</span><br><span class="line">    public void doBefore(JoinPoint joinPoint)&#123;</span><br><span class="line">        ServletRequestAttributes attributes&#x3D; (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request &#x3D; attributes.getRequest();</span><br><span class="line">        log.info(&quot;url&#x3D;&#123;&#125;&quot;,request.getRequestURL());</span><br><span class="line">        &#x2F;&#x2F;method</span><br><span class="line">        log.info(&quot;method&#x3D;&#123;&#125;&quot;, request.getMethod());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;ip</span><br><span class="line">        log.info(&quot;ip&#x3D;&#123;&#125;&quot;, request.getRemoteAddr());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;类方法</span><br><span class="line">        log.info(&quot;method&#x3D;&#123;&#125;&quot;, joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;参数</span><br><span class="line">        log.info(&quot;args&#x3D;&#123;&#125;&quot;, joinPoint.getArgs());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After(&quot;pointCut()&quot;)</span><br><span class="line">    public void doAfter()&#123;</span><br><span class="line">        log.info(&quot;-----after------&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @AfterReturning(returning &#x3D; &quot;object&quot;,pointcut &#x3D; &quot;pointCut()&quot;)</span><br><span class="line">    public void doAfterReturning(Object object)&#123;</span><br><span class="line">        log.info(&quot;return&#x3D;&#123;&#125;&quot;,object);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#2.简单接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.exception.demo.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.d4c.exception.demo.pojo.ResultInfo;</span><br><span class="line">import com.d4c.exception.demo.pojo.Student;</span><br><span class="line">import com.d4c.exception.demo.service.StudentService;</span><br><span class="line">import com.d4c.exception.demo.utils.ResultInfoOldUtil;</span><br><span class="line">import com.d4c.exception.demo.utils.ResultInfoUtil;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created with IntelliJ IDEA.</span><br><span class="line"> * User: liangqing.zhao(zlq)</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;4 18:16</span><br><span class="line"> * Description:</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;student&quot;)</span><br><span class="line">public class StudentController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private StudentService studentService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;add&quot;)</span><br><span class="line">    public ResultInfo add() &#123;</span><br><span class="line">        Student stu &#x3D; new Student(null, &quot;黄麒英&quot;, 48);</span><br><span class="line">        studentService.insert(stu);</span><br><span class="line">        return ResultInfoUtil.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;getOne&quot;)</span><br><span class="line">    public ResultInfo getOne(@RequestParam(required &#x3D; false) String id) &#123;</span><br><span class="line">        Student student &#x3D; studentService.get(id);</span><br><span class="line">        return ResultInfoUtil.success(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findByIdFirst&quot;)</span><br><span class="line">    public Student findByIdFirst(@RequestParam String id) &#123;</span><br><span class="line">        return studentService.findById(id).orElse(null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAllFirst&quot;)</span><br><span class="line">    public List&lt;Student&gt; findByIdFirst() &#123;</span><br><span class="line">        return studentService.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findByIdSecond&quot;)</span><br><span class="line">    public ResultInfo findByIdSecond(@RequestParam String id) &#123;</span><br><span class="line">        Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">        ResultInfo resultInfo &#x3D; new ResultInfo();</span><br><span class="line">        resultInfo.setCode(1);</span><br><span class="line">        resultInfo.setMsg(&quot;成功！&quot;);</span><br><span class="line">        resultInfo.setData(stu);</span><br><span class="line">        return resultInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAllSecond&quot;)</span><br><span class="line">    public ResultInfo findByIdSecond() &#123;</span><br><span class="line">        List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">        ResultInfo resultInfo &#x3D; new ResultInfo();</span><br><span class="line">        resultInfo.setCode(1);</span><br><span class="line">        resultInfo.setMsg(&quot;成功！&quot;);</span><br><span class="line">        resultInfo.setData(listStudent);</span><br><span class="line">        return resultInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findByIdThird&quot;)</span><br><span class="line">    public ResultInfo findByIdThird(@RequestParam String id) &#123;</span><br><span class="line">        Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">        return ResultInfoOldUtil.success(stu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAllThird&quot;)</span><br><span class="line">    public ResultInfo findByIdThird() &#123;</span><br><span class="line">        List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">        return ResultInfoOldUtil.success(listStudent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findByIdFourth&quot;)</span><br><span class="line">    public ResultInfo findByIdFourth(@RequestParam String id) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">            Integer count &#x3D; 1 &#x2F; 0;</span><br><span class="line">            return ResultInfoOldUtil.success(stu);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return ResultInfoOldUtil.error();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAllFourth&quot;)</span><br><span class="line">    public ResultInfo findByIdFourth() throws Exception &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">            throw new Exception(&quot;出现异常&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return ResultInfoOldUtil.error();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findByIdFifth&quot;)</span><br><span class="line">    public ResultInfo findByIdFifth(@RequestParam String id) &#123;</span><br><span class="line">        Student stu &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">        Integer count &#x3D; 1 &#x2F; 0;</span><br><span class="line">        return ResultInfoOldUtil.success(stu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAllFifth&quot;)</span><br><span class="line">    public ResultInfo findByIdFifth() throws Exception &#123;</span><br><span class="line">        List&lt;Student&gt; listStudent &#x3D; studentService.list();</span><br><span class="line">        throw new Exception(&quot;出现异常&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findById&quot;)</span><br><span class="line">    public ResultInfo findById(@RequestParam(required &#x3D; false) String id) &#123;</span><br><span class="line">        Student byId &#x3D; studentService.findById(id).orElse(null);</span><br><span class="line">        return ResultInfoUtil.success(byId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;findAll&quot;)</span><br><span class="line">    public ResultInfo findAll() &#123;</span><br><span class="line">        List&lt;Student&gt; list &#x3D; studentService.list();</span><br><span class="line">        return ResultInfoUtil.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#3.请求接口测试<br><img src="https://upload-images.jianshu.io/upload_images/19382524-bf53c04a0082b03a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="请求地址"></p><p>#4.结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect -url&#x3D;http:&#x2F;&#x2F;localhost:8000&#x2F;student&#x2F;findAll</span><br><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect -method&#x3D;GET</span><br><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect -ip&#x3D;0:0:0:0:0:0:0:1</span><br><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect -method&#x3D;com.d4c.exception.demo.controller.StudentController.findAll</span><br><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect -args&#x3D;&#123;&#125;</span><br><span class="line">Hibernate: select student0_.id as id1_0_, student0_.age as age2_0_, student0_.name as name3_0_ from student student0_</span><br><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect ------after------</span><br><span class="line">2019-10-09 23:02:09 [http-nio-8000-exec-4] INFO  com.d4c.exception.demo.aspect.HttpAspect -return&#x3D;ResultInfo(code&#x3D;1, msg&#x3D;success, data&#x3D;[Student(id&#x3D;d4c-04b6feca-a37c-4942-9042-d9da28c167fe, na</span><br></pre></td></tr></table></figure><p>每个方法都拦截了，并打印出信息。搞定了</p><p>想自定义日志信息可以参考<code>logback.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL --&gt;</span><br><span class="line">&lt;!-- 日志输出规则  根据当前ROOT 级别，日志输出时，级别高于root默认的级别时  会输出 --&gt;</span><br><span class="line">&lt;!-- 以下  每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，</span><br><span class="line">默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br><span class="line">&lt;configuration scan&#x3D;&quot;false&quot; scanPeriod&#x3D;&quot;60 seconds&quot; debug&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    &lt;!-- 定义日志文件 输入位置 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;logPath&quot; value&#x3D;&quot;d:&#x2F;test_log&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 日志最大的历史 30天 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;maxHistory&quot; value&#x3D;&quot;30&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置项， 通过此节点配置日志输出位置（控制台、文件、数据库）、输出格式等--&gt;</span><br><span class="line">    &lt;!-- ConsoleAppender代表输出到控制台 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;consoleLog&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;!-- layout代表输出格式 --&gt;</span><br><span class="line">        &lt;layout class&#x3D;&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %highlight(%-5level) %cyan(%logger) -%.-100msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;layout&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line">    &lt;!-- 日志输出文件 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;fileInfoLog&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger -%msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender--&gt;</span><br><span class="line">        &lt;!-- 滚动策略，它根据时间来制定滚动策略.既负责滚动也负责触发滚动 --&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!-- 输出路径 --&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;logPath&#125;&#x2F;info&#x2F;%d.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且&lt;maxHistory&gt;是6，</span><br><span class="line">            则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除--&gt;</span><br><span class="line">            &lt;maxHistory&gt;$&#123;maxHistory&#125;&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&gt;</span><br><span class="line">          &lt;fileNamePattern&gt;$&#123;logPath&#125;&#x2F;%d&#123;yyyy-MM-dd&#125;&#x2F;.log.zip&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">          &lt;minIndex&gt;1&lt;&#x2F;minIndex&gt;</span><br><span class="line">          &lt;maxIndex&gt;3&lt;&#x2F;maxIndex&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;   --&gt;</span><br><span class="line">        &lt;!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动</span><br><span class="line">        &lt;triggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;</span><br><span class="line">            &lt;maxFileSize&gt;5MB&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">        &lt;&#x2F;triggeringPolicy&gt;   --&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line">    &lt;!-- 特殊记录Error日志 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;fileErrorLog&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 只记录ERROR级别日志，添加范围过滤，可以将该类型的日志特殊记录到某个位置 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;ERROR&lt;&#x2F;level&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger -%msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;logPath&#125;&#x2F;error&#x2F;%d.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;!-- 日志最大的历史 60天 --&gt;</span><br><span class="line">            &lt;maxHistory&gt;60&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;fileWarnLog&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 只记录ERROR级别日志，添加范围过滤，可以将该类型的日志特殊记录到某个位置 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;WARN&lt;&#x2F;level&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger -%msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;logPath&#125;&#x2F;warn&#x2F;%d.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;!-- 日志最大的历史 60天 --&gt;</span><br><span class="line">            &lt;maxHistory&gt;60&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 根节点，表名基本的日志级别，里面可以由多个appender规则 --&gt;</span><br><span class="line">    &lt;!-- level&#x3D;&quot;ALL&quot;代表基础日志级别为ALL --&gt;</span><br><span class="line">    &lt;root level&#x3D;&quot;info&quot;&gt;</span><br><span class="line">        &lt;!-- 引入控制台输出规则 --&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;consoleLog&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;fileInfoLog&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;fileErrorLog&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;fileWarnLog&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;root&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><p>更多请参考<a href="https://www.jianshu.com/p/fba0d8e0a017">logging日志-log4j、log4j 2、logback、commons-logging和…..</a></p><p>上述代码请参考<a href="https://gitee.com/dancer4code/spring-boot-lab/tree/master/exception-demo">gitee源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring boot" scheme="http://example.com/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://example.com/tags/spring-boot/"/>
    
    <category term="日志" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Spring容器初始化完成后执行初始化数据方法</title>
    <link href="http://example.com/2020/08/04/spring/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91Spring%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%8C%E6%88%90%E5%90%8E%E6%89%A7%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2020/08/04/spring/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91Spring%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%8C%E6%88%90%E5%90%8E%E6%89%A7%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE%E6%96%B9%E6%B3%95/</id>
    <published>2020-08-04T14:36:00.000Z</published>
    <updated>2020-10-28T08:15:10.966Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文转载自：<a href="https://blog.csdn.net/honghailiang888/article/details/73333821">https://blog.csdn.net/honghailiang888/article/details/73333821</a> </p><h1 id="一、背景知识及需求"><a href="#一、背景知识及需求" class="headerlink" title="一、背景知识及需求"></a>一、背景知识及需求</h1><p>在做WEB项目时，经常在项目第一次启动时利用WEB容器的监听、Servlet加载初始化等切入点为数据库准备数据，这些初始化数据是系统开始运行前必须的数据，例如权限组、系统选项、默认管理员等等。而项目采用了Spring依赖注入来管理对象，而servlet并不受Spring的管理。若此时在servlet中注入Spring管理的对象，则无法使用，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class InitServlet extends HttpServlet &#123;</span><br><span class="line"> </span><br><span class="line">    @Autowired</span><br><span class="line">    private IProductService productService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService userService;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候是无法使用上述中的两个service的，因为InitServlet不受Spring容器管理。虽然可以用getBean的方式手动获取service，但是违反了使用Spring的初衷。</p><p>该篇文章也在之前<a href="http://blog.csdn.net/honghailiang888/article/details/53113853">【Spring实战】系列</a>的基础上进行优化和深入分析，本篇就是在更换了hsqldb数据库并初始化了商品、普通用户和管理员用户需求时产生的。</p><h1 id="二、Spring提供的解决方案"><a href="#二、Spring提供的解决方案" class="headerlink" title="二、Spring提供的解决方案"></a>二、Spring提供的解决方案</h1><h2 id="1、InitializingBean"><a href="#1、InitializingBean" class="headerlink" title="1、InitializingBean"></a>1、InitializingBean</h2><p>直接上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Created by Administrator on 2017&#x2F;6&#x2F;15.</span><br><span class="line"> * spring容器启动后，初始化数据（产生一个默认商品、普通用户和管理员用户）</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">public class InitServlet implements InitializingBean &#123;</span><br><span class="line"> </span><br><span class="line">    @Autowired</span><br><span class="line">    private IProductService productService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService userService;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F;库中没有商品则声称一个</span><br><span class="line">        List&lt;Product&gt; products &#x3D; productService.getProductList();</span><br><span class="line">        if (null &#x3D;&#x3D; products || products.isEmpty())&#123;</span><br><span class="line">            Product product &#x3D; new Product();</span><br><span class="line">            product.setProductName(&quot;Mango&quot;);</span><br><span class="line">            product.setQuantity(100);</span><br><span class="line">            product.setUnit(&quot;个&quot;);</span><br><span class="line">            product.setUnitPrice(100);</span><br><span class="line">            productService.saveProduct(product);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F;库中没有用户则添加普通用户和管理员用户</span><br><span class="line">        List&lt;MangoUser&gt; mangoUsers &#x3D; userService.getUserList();</span><br><span class="line">        if(null &#x3D;&#x3D; mangoUsers || mangoUsers.isEmpty())&#123;</span><br><span class="line">            MangoUser mangoUser &#x3D; new MangoUser();</span><br><span class="line">            mangoUser.setUserName(&quot;mango&quot;);</span><br><span class="line">            mangoUser.setPassword(StringUtil.md5(&quot;123456&quot;));</span><br><span class="line">            mangoUser.setRole(&quot;ROLE_USER&quot;);</span><br><span class="line">            userService.saveUser(mangoUser);</span><br><span class="line"> </span><br><span class="line">            MangoUser mangoUser1 &#x3D; new MangoUser();</span><br><span class="line">            mangoUser1.setUserName(&quot;manager&quot;);</span><br><span class="line">            mangoUser1.setPassword(StringUtil.md5(&quot;123456&quot;));</span><br><span class="line">            mangoUser1.setRole(&quot;ROLE_MANAGER&quot;);</span><br><span class="line">            userService.saveUser(mangoUser1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若采用XML来配置Bean的话，可以指定属性init-method。</p><h2 id="2、ApplicationListener"><a href="#2、ApplicationListener" class="headerlink" title="2、ApplicationListener"></a>2、ApplicationListener</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;交给Spring管理，如果不是自动扫描加载bean的方式，则在xml里配一个即可</span><br><span class="line">@Component</span><br><span class="line">public class InitData implements ApplicationListener&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    @Autowired</span><br><span class="line">    private IProductService productService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService userService;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void onApplicationEvent(ContextRefreshedEvent event) &#123;</span><br><span class="line">        if (event.getApplicationContext().getParent() &#x3D;&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F;库中没有商品则声称一个</span><br><span class="line">            List&lt;Product&gt; products &#x3D; productService.getProductList();</span><br><span class="line">            if (null &#x3D;&#x3D; products || products.isEmpty())&#123;</span><br><span class="line">                Product product &#x3D; new Product();</span><br><span class="line">                product.setProductName(&quot;Mango&quot;);</span><br><span class="line">                product.setQuantity(100);</span><br><span class="line">                product.setUnit(&quot;个&quot;);</span><br><span class="line">                product.setUnitPrice(100);</span><br><span class="line">                productService.saveProduct(product);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            &#x2F;&#x2F;库中没有用户则添加普通用户和管理员用户</span><br><span class="line">            List&lt;MangoUser&gt; mangoUsers &#x3D; userService.getUserList();</span><br><span class="line">            if(null &#x3D;&#x3D; mangoUsers || mangoUsers.isEmpty())&#123;</span><br><span class="line">                MangoUser mangoUser &#x3D; new MangoUser();</span><br><span class="line">                mangoUser.setUserName(&quot;mango&quot;);</span><br><span class="line">                mangoUser.setPassword(StringUtil.md5(&quot;123456&quot;));</span><br><span class="line">                mangoUser.setRole(&quot;ROLE_USER&quot;);</span><br><span class="line">                userService.saveUser(mangoUser);</span><br><span class="line"> </span><br><span class="line">                MangoUser mangoUser1 &#x3D; new MangoUser();</span><br><span class="line">                mangoUser1.setUserName(&quot;manager&quot;);</span><br><span class="line">                mangoUser1.setPassword(StringUtil.md5(&quot;123456&quot;));</span><br><span class="line">                mangoUser1.setRole(&quot;ROLE_MANAGER&quot;);</span><br><span class="line">                userService.saveUser(mangoUser1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意是监听的ContextRefreshedEvent事件。</p><p>在web 项目中（spring mvc），系统会存在两个容器，一个是root application context ,另一个就是我们自己的 projectName-servlet context（作为root application context的子容器）。这种情况下，就会造成onApplicationEvent方法被执行两次。为了避免上面提到的问题，我们可以只在root application context初始化完成后调用逻辑代码，其他的容器的初始化完成，则不做任何处理。</p><p>event.getApplicationContext().getParent() == null</p><h2 id="3、-PostConstruct"><a href="#3、-PostConstruct" class="headerlink" title="3、@PostConstruct"></a>3、@PostConstruct</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Created by Administrator on 2017&#x2F;6&#x2F;15.</span><br><span class="line"> * spring容器启动后，初始化数据（产生一个默认商品、普通用户和管理员用户）</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">public class InitMango&#123;</span><br><span class="line"> </span><br><span class="line">    @Autowired</span><br><span class="line">    private IProductService productService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService userService;</span><br><span class="line"> </span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        &#x2F;&#x2F;库中没有商品则声称一个</span><br><span class="line">        List&lt;Product&gt; products &#x3D; productService.getProductList();</span><br><span class="line">        if (null &#x3D;&#x3D; products || products.isEmpty())&#123;</span><br><span class="line">            Product product &#x3D; new Product();</span><br><span class="line">            product.setProductName(&quot;Mango&quot;);</span><br><span class="line">            product.setQuantity(100);</span><br><span class="line">            product.setUnit(&quot;个&quot;);</span><br><span class="line">            product.setUnitPrice(100);</span><br><span class="line">            productService.saveProduct(product);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F;库中没有用户则添加普通用户和管理员用户</span><br><span class="line">        List&lt;MangoUser&gt; mangoUsers &#x3D; userService.getUserList();</span><br><span class="line">        if(null &#x3D;&#x3D; mangoUsers || mangoUsers.isEmpty())&#123;</span><br><span class="line">            MangoUser mangoUser &#x3D; new MangoUser();</span><br><span class="line">            mangoUser.setUserName(&quot;mango&quot;);</span><br><span class="line">            mangoUser.setPassword(StringUtil.md5(&quot;123456&quot;));</span><br><span class="line">            mangoUser.setRole(&quot;ROLE_USER&quot;);</span><br><span class="line">            userService.saveUser(mangoUser);</span><br><span class="line"> </span><br><span class="line">            MangoUser mangoUser1 &#x3D; new MangoUser();</span><br><span class="line">            mangoUser1.setUserName(&quot;manager&quot;);</span><br><span class="line">            mangoUser1.setPassword(StringUtil.md5(&quot;123456&quot;));</span><br><span class="line">            mangoUser1.setRole(&quot;ROLE_MANAGER&quot;);</span><br><span class="line">            userService.saveUser(mangoUser1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下篇文章会分析其原理和源码实现。</p><h3 id="三、代码托管"><a href="#三、代码托管" class="headerlink" title="三、代码托管"></a>三、代码托管</h3><p><a href="https://github.com/honghailiang/SpringMango">https://github.com/honghailiang/SpringMango</a> </p><h3 id="四、实现原理"><a href="#四、实现原理" class="headerlink" title="四、实现原理"></a>四、实现原理</h3><p>其实现原理在<a href="http://blog.csdn.net/honghailiang888/article/details/74981445">【Spring实战】Spring注解工作原理源码解析</a>中均能找到答案，简单说明下：</p><p>1）在bean创建的过程中，初始化时会先调用@PostConstruct注解标注的方法，而后调用实现InitializingBean接口的afterPropertiesSet方法</p><p>2）在finishRefresh()会分发事件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Publish the final event.publishEvent(new ContextRefreshedEvent(this));</span><br></pre></td></tr></table></figure><p>关心ContextRefreshedEvent事件的bean中的onApplicationEvent方法会被调用</p><p>3）建议使用@PostConstruct注解，减少Spring的侵入性以及耦合性 </p><p>本文转载自：<a href="https://blog.csdn.net/honghailiang888/article/details/73333821">https://blog.csdn.net/honghailiang888/article/details/73333821</a> </p><p>spring请参考<br><a href="https://blog.csdn.net/wenmingfeng1215/article/details/80405371">Spring容器初始化完成后执行初始化数据方法</a></p><p>spring boot请参考<br><a href="https://blog.csdn.net/ClementAD/article/details/84345196">Spring boot 启动之后，执行某些初始化的几种方法</a></p><p><a href="https://blog.csdn.net/qq_35981283/article/details/77826537">Spring Boot学习–项目启动时执行特定方法</a></p><p><a href="https://blog.csdn.net/ming19951224/article/details/81156904">springboot项目启动后，自动执行需要的初始化操作</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring" scheme="http://example.com/categories/spring/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring集成测试环境的搭建</title>
    <link href="http://example.com/2020/08/03/spring/spring%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2020/08/03/spring/spring%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2020-08-03T14:36:00.000Z</published>
    <updated>2020-10-28T08:15:26.230Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-加入依赖包"><a href="#1-加入依赖包" class="headerlink" title="1.加入依赖包"></a>1.加入依赖包</h2><p>使用Spring的测试框架需要加入以下依赖包：</p><ul><li><p>  JUnit 4 （官方下载：<a href="http://www.junit.org/">http://www.junit.org/</a>）</p></li><li><p>  Spring Test （Spring框架中的test包）</p></li><li><p>  Spring 相关其他依赖包（不再赘述了，就是context等包）</p></li></ul><h2 id="2-创建测试源目录和包"><a href="#2-创建测试源目录和包" class="headerlink" title="2. 创建测试源目录和包"></a>2. 创建测试源目录和包</h2><p>创建一个和src下面与main同级创建test目录（测试目录），基本上大的框架（像spring的测试文件就是这样的，这已经是默认的了）。</p><h2 id="3-创建测试类"><a href="#3-创建测试类" class="headerlink" title="3. 创建测试类"></a>3. 创建测试类</h2><p>创建一个测试用的类，推荐名称为 “被测试类名称 + Test”。  创建测试类通常的两种方式：</p><ol><li><p> 根据需求继承必须的类</p></li><li><p> 根据需求加上必须的注解</p></li></ol><p><strong>第一种方式</strong>：测试类应该继承与 AbstractJUnit4SpringContextTests 或 AbstractTransactionalJUnit4SpringContextTests</p><ul><li><p>  AbstractJUnit4springcontextTests （测试中不涉及事物）</p></li><li><p>  AbstractTransactionalJUnit4SpringContextTests （测试类中，需要用到事务管理）（比如要在测试结果出来之后回滚测试内容）</p></li></ul><p><strong>第二种方式</strong>：使用注解</p><ul><li><p>  AbstractJUnit4springcontextTests可以用@RunWith(SpringJUnit4ClassRunner.class)来实现同样的功能</p></li><li><p>  AbstractTransactionalJUnit4SpringContextTests 可以用@RunWith(SpringJUnit4ClassRunner.class)+@TransactionConfiguration(transactionManager = “transactionManager”, defaultRollback = true)来实现同样的功能</p></li></ul><h2 id="4-通过JUnit-4-执行或maven自动执行"><a href="#4-通过JUnit-4-执行或maven自动执行" class="headerlink" title="4. 通过JUnit 4 执行或maven自动执行"></a>4. 通过JUnit 4 执行或maven自动执行</h2><ul><li><p>  Junit：右键方法名，选择则“Run As”→“JUnit Test”即可</p></li><li><p>  maven：默认自动回执行测试类，如果想要跳过测试可以添加如下命令：-Dmaven.test.skip=true</p></li></ul><h2 id="5-测试代码解释（测试Controller层）"><a href="#5-测试代码解释（测试Controller层）" class="headerlink" title="5.测试代码解释（测试Controller层）"></a>5.测试代码解释（测试Controller层）</h2><p><strong>code</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Transactional&#x2F;&#x2F;每次都开启一个事务</span><br><span class="line">@WebAppConfiguration&#x2F;&#x2F;测试环境使用，用来表示测试环境使用的ApplicationContext将是WebApplicationContext类型的；</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(locations &#x3D; &#123;&quot;classpath*:spring-*.xml&quot;&#125;)</span><br><span class="line">@TransactionConfiguration(transactionManager &#x3D; &quot;transactionManager&quot;, defaultRollback &#x3D; true)</span><br><span class="line">public class BaseSpringJUnit &#123;</span><br><span class="line">&#x2F;&#x2F;执行@Test标注的方法之前都执行这个方法</span><br><span class="line">@Before</span><br><span class="line">public void setUp() throws Exception &#123;</span><br><span class="line">&#x2F;&#x2F;to doing somthing </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;执行@Test标注的方法之之后都执行这个方法</span><br><span class="line">@After</span><br><span class="line">public void tearDown() throws Exception &#123;</span><br><span class="line">&#x2F;&#x2F;to doing somthing</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;测试方法</span><br><span class="line">@Test</span><br><span class="line">public void testPrint()&#123;</span><br><span class="line">&#x2F;&#x2F;to doing somthing</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Transactional:每次都开启一个事务</p><p>@WebAppConfiguration:测试环境使用，用来表示测试环境使用的ApplicationContext将是WebApplicationContext类型的；</p><p>@ContextConfiguration(locations = {“classpath*:spring-*.xml”}):Spring整合JUnit4测试时，使用注解引入多个配置文件</p><p>@RunWith(SpringJUnit4ClassRunner.class)和@TransactionConfiguration(transactionManager = “transactionManager”, defaultRollback = true)上面已经过</p><p>其中：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mockMvc.perform(post(&quot;&#x2F;a&#x2F;pro&#x2F;unit&#x2F;list&quot;).param(&quot;name&quot;, &quot;s&quot;)).andExpect(MockMvcResultMatchers.view().name(&quot;modules&#x2F;pro&#x2F;unitList&quot;)) </span><br><span class="line">.andExpect(MockMvcResultMatchers.model().attributeExists(&quot;page&quot;)) </span><br><span class="line">.andExpect(MockMvcResultMatchers.jsonPath(&quot;$.code&quot;).value(&quot;10000&quot;)) </span><br><span class="line">.andDo(MockMvcResultHandlers.print()) </span><br><span class="line">.andReturn();</span><br></pre></td></tr></table></figure><p>其中使用MockMvcResultMatchers.jsonPath(“$.code”).value(“10000”)，需要导入jar包</p><p><strong>pom.xml配置需要加上</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.jayway.jsonpath&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;json-path&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;0.8.1&lt;&#x2F;version&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.jayway.jsonpath&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;json-path-assert&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;0.8.1&lt;&#x2F;version&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>最后整个过程：</strong></p><ul><li><p>  1、mockMvc.perform执行一个请求；</p></li><li><p>  2、MockMvcRequestBuilders.get(“/user/1”)构造一个请求</p></li><li><p>  3、ResultActions.andExpect添加执行完成后的断言</p></li><li><p>  4、ResultActions.andDo添加一个结果处理器，表示要对结果做点什么事情，比如此处使用MockMvcResultHandlers.print()输出整个响应结果信息。</p></li><li><p>  5、ResultActions.andReturn表示执行完成后返回相应的结果。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring" scheme="http://example.com/categories/spring/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>关于@Configuration与@Configurable的比较</title>
    <link href="http://example.com/2020/08/02/spring/@Configuration%E4%B8%8E@Configurable%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>http://example.com/2020/08/02/spring/@Configuration%E4%B8%8E@Configurable%E7%9A%84%E6%AF%94%E8%BE%83/</id>
    <published>2020-08-02T14:36:00.000Z</published>
    <updated>2020-10-28T08:14:37.101Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#@Configuration<br>@Configuration就是以前spring的xml配置文件中的<beans> 的java实现，而@Bean就相当于<bean><br>@Configuration+@Bean就实现了spring以前配置文件中的类的配置加载。</p><p>#@Configurable<br>主要是这个注解以前了解的不多。百度了一下，才知道其主要作用</p><blockquote><p>主要是适用于，某些自己new出来的对象，而new这个对象又必须依赖spring容器里的对象，才能完成一些工作。</p></blockquote><p>具体怎么运用。</p><p>##1.添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-aspects&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-instrument&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>##2.具体的类<br><code>Student</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">    public void study()&#123;</span><br><span class="line">        System.out.println(&quot;I am a student,I must to study!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>People</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Configurable;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@Configurable</span><br><span class="line">public class People &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private Student student;</span><br><span class="line"></span><br><span class="line">    public void doSomething()&#123;</span><br><span class="line">        student.study();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>启动类加注解@SpringBootApplication+@EnableSpringConfigured</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.EnableLoadTimeWeaving;</span><br><span class="line">import org.springframework.context.annotation.aspectj.EnableSpringConfigured;</span><br><span class="line"></span><br><span class="line">@ServletComponentScan</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableSpringConfigured</span><br><span class="line">@EnableLoadTimeWeaving</span><br><span class="line">public class CustomBeanApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(CustomBeanApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>测试类</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.d4c.custombean.config;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">public class PeopleTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void doSomething() &#123;</span><br><span class="line">        People people &#x3D; new People();</span><br><span class="line">        people.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置jvm参数"><a href="#配置jvm参数" class="headerlink" title="配置jvm参数"></a>配置jvm参数</h2><p>不配置是会报错的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:E:\maven_repository\org\springframework\spring-instrument\5.1.9.RELEASE\spring-instrument-5.1.9.RELEASE.jar</span><br><span class="line">&#x2F;&#x2F;直接指定spring-instrument.jar的maven本地仓库的地址就行</span><br></pre></td></tr></table></figure><p>如图：<br><img src="https://upload-images.jianshu.io/upload_images/19382524-832eae8f346fda47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="OK-，可以了"><a href="#OK-，可以了" class="headerlink" title="OK ，可以了"></a>OK ，可以了</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="spring" scheme="http://example.com/categories/spring/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
</feed>
